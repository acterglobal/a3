use anyhow::{bail, Result};
use std::io::Write;
use tempfile::Builder;
use tokio_retry::{
    strategy::{jitter, FibonacciBackoff},
    Retry,
};

use super::setup_accounts;

#[tokio::test]
async fn test_room_avatar() -> Result<()> {
    let _ = env_logger::try_init();

    let retry_strategy = FibonacciBackoff::from_millis(100).map(jitter).take(10);
    let ((admin, _handle1), (observer, _handle2), room_id) = setup_accounts("room-avatar").await?;

    let room = admin.room(room_id.to_string()).await?;
    let room_activities = observer.activities_for_room(room_id.to_string())?;
    let mut activities_listenerd = room_activities.subscribe();

    let bytes = include_bytes!("../fixtures/kingfisher.jpg");
    let mut tmp_jpg = Builder::new().suffix(".jpg").tempfile()?;
    tmp_jpg.as_file_mut().write_all(bytes)?;
    let jpg_path = tmp_jpg // it is randomly generated by system and not kingfisher.jpg
        .path()
        .to_string_lossy()
        .to_string();

    // ensure it was sent
    let uri = room.upload_avatar(jpg_path).await?;

    activities_listenerd.recv().await?; // await for it have been coming in

    // wait for the event to come in
    let cl = observer.clone();
    let activity = Retry::spawn(retry_strategy, move || {
        let room_activities = room_activities.clone();
        let cl = cl.clone();
        async move {
            let m = room_activities.get_ids(0, 1).await?;
            let Some(id) = m.first().cloned() else {
                bail!("no latest room activity found");
            };
            cl.activity(id).await
        }
    })
    .await?;

    // external API check
    let meta = activity.event_meta();
    assert_eq!(activity.sender_id_str(), admin.user_id()?);
    assert_eq!(activity.event_id_str(), meta.event_id.to_string());
    assert_eq!(activity.room_id_str(), room.room_id_str());
    assert_eq!(activity.type_str(), "roomAvatar");
    assert_eq!(
        activity.origin_server_ts(),
        Into::<u64>::into(meta.origin_server_ts.get())
    );

    // check the content of activity
    let content = activity
        .room_avatar_content()
        .expect("not a room avatar event");

    assert_eq!(
        content.url_change(),
        Some("Set".to_owned()),
        "url in room avatar should be set"
    );
    assert_eq!(
        content.url_new_val(),
        Some(uri.to_string()),
        "new val of url in room avatar is invalid"
    );
    assert_eq!(
        content.url_old_val(),
        None,
        "old val of url in room avatar is invalid"
    );

    Ok(())
}
