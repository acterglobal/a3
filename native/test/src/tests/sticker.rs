use acter::api::TimelineItem;
use anyhow::{Context, Result};
use core::time::Duration;
use futures::{pin_mut, stream::StreamExt, FutureExt};
use std::io::Write;
use tempfile::NamedTempFile;
use tokio::time::sleep;
use tokio_retry::{
    strategy::{jitter, FibonacciBackoff},
    Retry,
};
use tracing::info;

use crate::utils::random_user_with_random_convo;

#[tokio::test]
async fn test_sticker() -> Result<()> {
    let _ = env_logger::try_init();

    let (mut user, room_id) = random_user_with_random_convo("test_sticker").await?;
    let state_sync = user.start_sync();
    state_sync.await_has_synced_history().await?;

    // wait for sync to catch up
    let retry_strategy = FibonacciBackoff::from_millis(100).map(jitter).take(10);
    let fetcher_client = user.clone();
    let target_id = room_id.clone();
    Retry::spawn(retry_strategy, move || {
        let client = fetcher_client.clone();
        let room_id = target_id.clone();
        async move { client.convo(room_id.to_string()).await }
    })
    .await?;

    let convo = user.convo(room_id.to_string()).await?;
    let timeline = convo.timeline_stream();
    let stream = timeline.messages_stream();
    pin_mut!(stream);

    let bytes = include_bytes!("./fixtures/kingfisher.jpg");
    let mut tmp_jpg = NamedTempFile::new()?;
    tmp_jpg.as_file_mut().write_all(bytes)?;
    let jpg_name = tmp_jpg // it is randomly generated by system and not kingfisher.jpg
        .path()
        .file_name()
        .expect("it is not file")
        .to_string_lossy()
        .to_string();

    let draft = user.image_draft(
        tmp_jpg.path().to_string_lossy().to_string(),
        "image/jpeg".to_string(),
    );
    timeline.send_message(Box::new(draft)).await?;

    // image msg may reach via pushback action or reset action
    let mut i = 30;
    let mut img_url = None;
    while i > 0 {
        if let Some(diff) = stream.next().now_or_never().flatten() {
            match diff.action().as_str() {
                "PushBack" | "Set" => {
                    let value = diff
                        .value()
                        .expect("diff pushback action should have valid value");
                    if let Some((body, uri)) = match_image_msg(&value, "image/jpeg") {
                        assert_eq!(body, jpg_name, "msg body should be filename");
                        img_url = Some(uri);
                    }
                }
                "Reset" => {
                    let values = diff
                        .values()
                        .expect("diff reset action should have valid values");
                    for value in values.iter() {
                        if let Some((body, uri)) = match_image_msg(value, "image/jpeg") {
                            assert_eq!(body, jpg_name, "msg body should be filename");
                            img_url = Some(uri);
                            break;
                        }
                    }
                }
                _ => {}
            }
            // yay
            if img_url.is_some() {
                break;
            }
        }
        i -= 1;
        sleep(Duration::from_secs(1)).await;
    }
    let img_url = img_url.context("Even after 30 seconds, image msg not received")?;

    timeline.send_sticker("kingfisher".to_owned(), img_url.clone()).await?;

    // sticker event may reach via pushback action or reset action
    i = 30;
    let mut sticker_event_id = None;
    while i > 0 {
        if let Some(diff) = stream.next().now_or_never().flatten() {
            match diff.action().as_str() {
                "PushBack" | "Set" => {
                    let value = diff
                        .value()
                        .expect("diff set action should have valid value");
                    if let Some((event_id, url)) = match_sticker_event(&value) {
                        assert_eq!(url, img_url, "sticker url should be equal to image msg uri");
                        info!("=================== {}", &url);
                        info!("=================== {}", &img_url);
                        sticker_event_id = Some(event_id);
                    }
                }
                "Reset" => {
                    let values = diff
                        .values()
                        .expect("diff reset action should have valid values");
                    for value in values.iter() {
                        if let Some((event_id, url)) = match_sticker_event(value) {
                            assert_eq!(url, img_url, "sticker url should be equal to image msg uri");
                            info!("=================== {}", &url);
                            info!("=================== {}", &img_url);
                            sticker_event_id = Some(event_id);
                            break;
                        }
                    }
                }
                _ => {}
            }
            // yay
            if sticker_event_id.is_some() {
                break;
            }
        }
        i -= 1;
        sleep(Duration::from_secs(1)).await;
    }
    assert!(sticker_event_id.is_some(), "Even after 30 seconds, sticker event not received");

    Ok(())
}

fn match_image_msg(msg: &TimelineItem, content_type: &str) -> Option<(String, String)> {
    if msg.is_virtual() {
        return None;
    }
    let event_item = msg.event_item().expect("room msg should have event item");
    let Some(msg_content) = event_item.message() else {
        return None;
    };
    let mimetype = msg_content.mimetype().expect("room msg should have mimetype");
    if mimetype != content_type {
        return None;
    }
    let source = msg_content.source().expect("image msg should have media source");
    Some((msg_content.body(), source.url()))
}

fn match_sticker_event(msg: &TimelineItem) -> Option<(String, String)> {
    if msg.is_virtual() {
        return None;
    }
    let event_item = msg.event_item().expect("room msg should have event item");
    let Some(sticker) = event_item.sticker() else {
        return None;
    };
    let Some(event_id) = event_item.event_id() else {
        info!("this event not sent yet to server");
        return None;
    };
    let source = sticker.source().url();
    Some((event_id, source))
}
