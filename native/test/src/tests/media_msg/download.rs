use anyhow::{Context, Result};
use core::time::Duration;
use futures::{pin_mut, stream::StreamExt, FutureExt};
use std::{env, io::Write};
use tempfile::NamedTempFile;
use tokio::time::sleep;
use tokio_retry::{
    strategy::{jitter, FibonacciBackoff},
    Retry,
};

use crate::utils::{match_media_msg, random_user_with_random_convo};

#[tokio::test]
async fn room_msg_can_download_image() -> Result<()> {
    let _ = env_logger::try_init();

    let (mut user, room_id) = random_user_with_random_convo("room_msg_image_download").await?;
    let state_sync = user.start_sync();
    state_sync.await_has_synced_history().await?;

    // wait for sync to catch up
    let retry_strategy = FibonacciBackoff::from_millis(100).map(jitter).take(10);
    Retry::spawn(retry_strategy, || async {
        user.convo(room_id.to_string()).await
    })
    .await?;

    let convo = user.convo(room_id.to_string()).await?;
    let timeline = convo.timeline_stream();
    let stream = timeline.messages_stream();
    pin_mut!(stream);

    let bytes = include_bytes!("../fixtures/kingfisher.jpg");
    let mut tmp_jpg = NamedTempFile::new()?;
    tmp_jpg.as_file_mut().write_all(bytes)?;
    let jpg_name = tmp_jpg // it is randomly generated by system and not kingfisher.jpg
        .path()
        .file_name()
        .expect("it is not file")
        .to_string_lossy()
        .to_string();

    let bytes = include_bytes!("../fixtures/PNG_transparency_demonstration_1.png");
    let size = bytes.len() as u64;
    let mut tmp_png = NamedTempFile::new()?;
    tmp_png.as_file_mut().write_all(bytes)?;

    let mimetype = "image/jpeg";
    let draft = user
        .image_draft(
            tmp_jpg.path().to_string_lossy().to_string(),
            mimetype.to_owned(),
        )
        .thumbnail_file_path(tmp_png.path().to_string_lossy().to_string())
        .thumbnail_info(None, None, Some("image/png".to_owned()), Some(size));
    timeline.send_message(Box::new(draft)).await?;

    // image msg may reach via pushback action or reset action
    let mut i = 30;
    let mut found = None;
    while i > 0 {
        if let Some(diff) = stream.next().now_or_never().flatten() {
            match diff.action().as_str() {
                "PushBack" | "Set" => {
                    let value = diff
                        .value()
                        .expect("diff pushback action should have valid value");
                    if match_media_msg(&value, mimetype, &jpg_name).is_some() {
                        found = value.event_item().and_then(|t| t.event_id());
                    }
                }
                "Reset" => {
                    let values = diff
                        .values()
                        .expect("diff reset action should have valid values");
                    for value in values.iter() {
                        if match_media_msg(value, mimetype, &jpg_name).is_some() {
                            found = value.event_item().and_then(|t| t.event_id());
                            if found.is_some() {
                                break;
                            }
                        }
                    }
                }
                _ => {}
            }
            // yay
            if found.is_some() {
                break;
            }
        }
        i -= 1;
        sleep(Duration::from_secs(1)).await;
    }
    let event_id = found.context("Even after 30 seconds, image msg not received")?;

    let dir_path = env::temp_dir().to_string_lossy().to_string();
    let downloaded_path = convo
        .download_media(event_id.clone(), None, dir_path)
        .await?;
    assert!(
        downloaded_path.text().is_some(),
        "image msg should be downloadable"
    );

    let media_path = convo.media_path(event_id, false).await?;
    assert!(
        media_path.text().is_some(),
        "media path should be accessible if it was downloaded once"
    );

    Ok(())
}
