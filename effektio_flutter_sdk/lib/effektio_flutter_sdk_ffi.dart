// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by "ffi-gen".

library effektio;

import "dart:async";
import "dart:convert";
import "dart:ffi" as ffi;
import "dart:io" show Platform, File, Directory;
import "dart:isolate";
import "dart:typed_data";

class _DartApiEntry extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> name;
  external ffi.Pointer<ffi.Void> ptr;
}

class _DartApi extends ffi.Struct {
  @ffi.Int32()
  external int major;

  @ffi.Int32()
  external int minor;

  external ffi.Pointer<_DartApiEntry> functions;
}

ffi.Pointer<T> _lookupDartSymbol<T extends ffi.NativeType>(String symbol) {
  final ffi.Pointer<_DartApi> api = ffi.NativeApi.initializeApiDLData.cast();
  final ffi.Pointer<_DartApiEntry> functions = api.ref.functions;
  for (var i = 0; i < 100; i++) {
    final func = functions.elementAt(i).ref;
    var symbol2 = "";
    var j = 0;
    while (func.name.elementAt(j).value != 0) {
      symbol2 += String.fromCharCode(func.name.elementAt(j).value);
      j += 1;
    }
    if (symbol == symbol2) {
      return func.ptr.cast();
    }
  }
  throw "symbol not found";
}

class _Box {
  final Api _api;
  final ffi.Pointer<ffi.Void> _ptr;
  final String _dropSymbol;
  bool _dropped;
  bool _moved;
  ffi.Pointer<ffi.Void> _finalizer = ffi.Pointer.fromAddress(0);
  final Object? _context;

  _Box(this._api, this._ptr, this._dropSymbol, {Object? context})
      : _dropped = false,
        _moved = false,
        _context = context;

  late final _dropPtr = _api._lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(_dropSymbol);

  late final _drop = _dropPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  int borrow() {
    if (_dropped) {
      throw StateError("use after free");
    }
    if (_moved) {
      throw StateError("use after move");
    }
    return _ptr.address;
  }

  int move() {
    if (_dropped) {
      throw StateError("use after free");
    }
    if (_moved) {
      throw StateError("can't move value twice");
    }
    _moved = true;
    _api._unregisterFinalizer(this);
    return _ptr.address;
  }

  void drop() {
    if (_dropped) {
      throw StateError("double free");
    }
    if (_moved) {
      throw StateError("can't drop moved value");
    }
    _dropped = true;
    _api._unregisterFinalizer(this);
    _drop(ffi.Pointer.fromAddress(0), _ptr);
  }
}

class FfiBufferInt8 {
  final Api _api;
  final _Box _box;

  FfiBufferInt8._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  /// Returns a typed view of this buffer.
  /// Note: The lifetime of this view is tied to the lifetime of this FfiBufferInt8. This Int8List must not live longer than the creating FfiBufferInt8
  Int8List asTypedList() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer);
    final size = _api._ffiBufferSize(buffer) ~/ 1;
    return ffi.Pointer<ffi.Int8>.fromAddress(addressRaw).asTypedList(size);
  }
}

class FfiBufferUint8 {
  final Api _api;
  final _Box _box;

  FfiBufferUint8._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  /// Returns a typed view of this buffer.
  /// Note: The lifetime of this view is tied to the lifetime of this FfiBufferUint8. This Uint8List must not live longer than the creating FfiBufferUint8
  Uint8List asTypedList() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer);
    final size = _api._ffiBufferSize(buffer) ~/ 1;
    return ffi.Pointer<ffi.Uint8>.fromAddress(addressRaw).asTypedList(size);
  }
}

class FfiBufferInt16 {
  final Api _api;
  final _Box _box;

  FfiBufferInt16._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  /// Returns a typed view of this buffer.
  /// Note: The lifetime of this view is tied to the lifetime of this FfiBufferInt16. This Int16List must not live longer than the creating FfiBufferInt16
  Int16List asTypedList() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer);
    final size = _api._ffiBufferSize(buffer) ~/ 2;
    return ffi.Pointer<ffi.Int16>.fromAddress(addressRaw).asTypedList(size);
  }
}

class FfiBufferUint16 {
  final Api _api;
  final _Box _box;

  FfiBufferUint16._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  /// Returns a typed view of this buffer.
  /// Note: The lifetime of this view is tied to the lifetime of this FfiBufferUint16. This Uint16List must not live longer than the creating FfiBufferUint16
  Uint16List asTypedList() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer);
    final size = _api._ffiBufferSize(buffer) ~/ 2;
    return ffi.Pointer<ffi.Uint16>.fromAddress(addressRaw).asTypedList(size);
  }
}

class FfiBufferInt32 {
  final Api _api;
  final _Box _box;

  FfiBufferInt32._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  /// Returns a typed view of this buffer.
  /// Note: The lifetime of this view is tied to the lifetime of this FfiBufferInt32. This Int32List must not live longer than the creating FfiBufferInt32
  Int32List asTypedList() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer);
    final size = _api._ffiBufferSize(buffer) ~/ 4;
    return ffi.Pointer<ffi.Int32>.fromAddress(addressRaw).asTypedList(size);
  }
}

class FfiBufferUint32 {
  final Api _api;
  final _Box _box;

  FfiBufferUint32._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  /// Returns a typed view of this buffer.
  /// Note: The lifetime of this view is tied to the lifetime of this FfiBufferUint32. This Uint32List must not live longer than the creating FfiBufferUint32
  Uint32List asTypedList() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer);
    final size = _api._ffiBufferSize(buffer) ~/ 4;
    return ffi.Pointer<ffi.Uint32>.fromAddress(addressRaw).asTypedList(size);
  }
}

class FfiBufferInt64 {
  final Api _api;
  final _Box _box;

  FfiBufferInt64._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  /// Returns a typed view of this buffer.
  /// Note: The lifetime of this view is tied to the lifetime of this FfiBufferInt64. This Int64List must not live longer than the creating FfiBufferInt64
  Int64List asTypedList() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer);
    final size = _api._ffiBufferSize(buffer) ~/ 8;
    return ffi.Pointer<ffi.Int64>.fromAddress(addressRaw).asTypedList(size);
  }
}

class FfiBufferUint64 {
  final Api _api;
  final _Box _box;

  FfiBufferUint64._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  /// Returns a typed view of this buffer.
  /// Note: The lifetime of this view is tied to the lifetime of this FfiBufferUint64. This Uint64List must not live longer than the creating FfiBufferUint64
  Uint64List asTypedList() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer);
    final size = _api._ffiBufferSize(buffer) ~/ 8;
    return ffi.Pointer<ffi.Uint64>.fromAddress(addressRaw).asTypedList(size);
  }
}

class FfiBufferFloat32 {
  final Api _api;
  final _Box _box;

  FfiBufferFloat32._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  /// Returns a typed view of this buffer.
  /// Note: The lifetime of this view is tied to the lifetime of this FfiBufferFloat32. This Float32List must not live longer than the creating FfiBufferFloat32
  Float32List asTypedList() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer);
    final size = _api._ffiBufferSize(buffer) ~/ 4;
    return ffi.Pointer<ffi.Float>.fromAddress(addressRaw).asTypedList(size);
  }
}

class FfiBufferFloat64 {
  final Api _api;
  final _Box _box;

  FfiBufferFloat64._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  /// Returns a typed view of this buffer.
  /// Note: The lifetime of this view is tied to the lifetime of this FfiBufferFloat64. This Float64List must not live longer than the creating FfiBufferFloat64
  Float64List asTypedList() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer);
    final size = _api._ffiBufferSize(buffer) ~/ 8;
    return ffi.Pointer<ffi.Double>.fromAddress(addressRaw).asTypedList(size);
  }
}

/// Implements Iterable and Iterator for a rust iterator.
class Iter<T> extends Iterable<T> implements Iterator<T> {
  final _Box _box;
  final T? Function(int) _next;

  Iter._(this._box, this._next);

  @override
  Iterator<T> get iterator => this;

  T? _current;

  @override
  T get current => _current!;

  @override
  bool moveNext() {
    final next = _next(_box.borrow());
    if (next == null) {
      return false;
    } else {
      _current = next;
      return true;
    }
  }

  void drop() {
    _box.drop();
  }
}

abstract class CustomIterable<T> {
  int get length;
  T elementAt(int index);
}

class CustomIterator<T, U extends CustomIterable<T>> implements Iterator<T> {
  final U _iterable;
  int _currentIndex = -1;

  CustomIterator(this._iterable);

  @override
  T get current => _iterable.elementAt(_currentIndex);

  @override
  bool moveNext() {
    _currentIndex++;
    return _currentIndex < _iterable.length;
  }
}

Future<T> _nativeFuture<T>(_Box box, T? Function(int, int, int) nativePoll) {
  final completer = Completer<T>();
  final rx = ReceivePort();
  void poll() {
    try {
      final ret = nativePoll(box.borrow(), ffi.NativeApi.postCObject.address,
          rx.sendPort.nativePort);
      if (ret == null) {
        return;
      }
      completer.complete(ret);
    } catch (err) {
      completer.completeError(err);
    }
    rx.close();
    box.drop();
  }

  rx.listen((dynamic _message) => poll());
  poll();
  return completer.future;
}

Stream<T> _nativeStream<T>(
    _Box box, T? Function(int, int, int, int) nativePoll) {
  final controller = StreamController<T>();
  final rx = ReceivePort();
  final done = ReceivePort();
  void poll() {
    try {
      final ret = nativePoll(
        box.borrow(),
        ffi.NativeApi.postCObject.address,
        rx.sendPort.nativePort,
        done.sendPort.nativePort,
      );
      if (ret != null) {
        controller.add(ret);
      }
    } catch (err) {
      controller.addError(err);
    }
  }

  void close() {
    rx.close();
    done.close();
    box.drop();
  }

  controller.onCancel = close;
  rx.listen((dynamic _message) => poll());
  done.listen((dynamic _message) => controller.close());
  poll();
  return controller.stream;
}

class FfiString {
  final Api _api;
  final _Box _box;

  FfiString._(this._api, this._box);

  String toDartString() {
    final parts = _api._ffiStringIntoParts(_box.borrow());
    final ffi.Pointer<ffi.Uint8> tmp2_0 = ffi.Pointer.fromAddress(parts.addr);
    final tmp1 = utf8.decode(tmp2_0.asTypedList(parts.len));
    if (parts.capacity > 0) {
      final ffi.Pointer<ffi.Void> tmp2_0;
      tmp2_0 = ffi.Pointer.fromAddress(parts.addr);
      _api.__deallocate(tmp2_0, parts.capacity * 1, 1);
    }
    return tmp1;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class _FfiStringParts extends ffi.Struct {
  @ffi.Int64()
  external int addr;
  @ffi.Uint64()
  external int len;
  @ffi.Uint64()
  external int capacity;
}

class _EnumWrapper extends ffi.Struct {
  @ffi.Uint32()
  external int tag;
  @ffi.IntPtr()
  external int inner;
}

/// Main entry point to library.
class Api {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Api(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Api.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// The library is loaded from the executable.
  factory Api.loadStatic() {
    return Api(ffi.DynamicLibrary.executable());
  }

  /// The library is dynamically loaded.
  factory Api.loadDynamic(String name) {
    return Api(ffi.DynamicLibrary.open(name));
  }

  /// The library is loaded based on platform conventions.
  factory Api.load() {
    String? name;
    if (Platform.isLinux) name = "libeffektio.so";
    if (Platform.isAndroid) name = "libeffektio.so";
    if (Platform.isMacOS) name = "libeffektio.dylib";
    if (Platform.isIOS) name = "";
    if (Platform.isWindows) name = "effektio.dll";
    if (name == null) {
      throw UnsupportedError("\"This platform is not supported.\"");
    }
    if (name == "") {
      return Api.loadStatic();
    } else {
      return Api.loadDynamic(name);
    }
  }

  late final _registerPtr = _lookupDartSymbol<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Handle, ffi.Pointer<ffi.Void>,
              ffi.IntPtr, ffi.Pointer<ffi.Void>)>>("Dart_NewFinalizableHandle");

  late final _register = _registerPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          Object, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> _registerFinalizer(_Box boxed) {
    return _register(boxed, boxed._ptr, 42, boxed._dropPtr.cast());
  }

  late final _unregisterPtr = _lookupDartSymbol<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Handle)>>("Dart_DeleteFinalizableHandle");

  late final _unregister =
      _unregisterPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, _Box)>();

  void _unregisterFinalizer(_Box boxed) {
    _unregister(boxed._finalizer, boxed);
  }

  ffi.Pointer<T> __allocate<T extends ffi.NativeType>(
      int byteCount, int alignment) {
    return _allocate(byteCount, alignment).cast();
  }

  void __deallocate<T extends ffi.NativeType>(
      ffi.Pointer pointer, int byteCount, int alignment) {
    _deallocate(pointer.cast(), byteCount, alignment);
  }

  /// Initialize logging
  void initLogging(
    String? filter,
  ) {
    final tmp0 = filter;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp5 = 0;
    if (tmp0 == null) {
      tmp1 = 0;
    } else {
      tmp1 = 1;
      final tmp2 = tmp0;
      final tmp2_0 = utf8.encode(tmp2);
      tmp4 = tmp2_0.length;
      final ffi.Pointer<ffi.Uint8> tmp3_0 = this.__allocate(tmp4 * 1, 1);
      final Uint8List tmp3_1 = tmp3_0.asTypedList(tmp4);
      tmp3_1.setAll(0, tmp2_0);
      tmp3 = tmp3_0.address;
      tmp5 = tmp4;
    }
    final tmp6 = _initLogging(
      tmp1,
      tmp3,
      tmp4,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    if (tmp8 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp9_0 = ffi.Pointer.fromAddress(tmp9);
      final tmp8_0 = utf8.decode(tmp9_0.asTypedList(tmp10));
      if (tmp10 > 0) {
        final ffi.Pointer<ffi.Void> tmp9_0;
        tmp9_0 = ffi.Pointer.fromAddress(tmp9);
        this.__deallocate(tmp9_0, tmp11, 1);
      }
      throw tmp8_0;
    }
    return;
  }

  /// Create a new client for homeserver at url with storage at data_path
  Future<Client> loginNewClient(
    String basepath,
    String username,
    String password,
  ) {
    final tmp0 = basepath;
    final tmp4 = username;
    final tmp8 = password;
    var tmp1 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp9 = 0;
    var tmp10 = 0;
    var tmp11 = 0;
    final tmp0_0 = utf8.encode(tmp0);
    tmp2 = tmp0_0.length;
    final ffi.Pointer<ffi.Uint8> tmp1_0 = this.__allocate(tmp2 * 1, 1);
    final Uint8List tmp1_1 = tmp1_0.asTypedList(tmp2);
    tmp1_1.setAll(0, tmp0_0);
    tmp1 = tmp1_0.address;
    tmp3 = tmp2;
    final tmp4_0 = utf8.encode(tmp4);
    tmp6 = tmp4_0.length;
    final ffi.Pointer<ffi.Uint8> tmp5_0 = this.__allocate(tmp6 * 1, 1);
    final Uint8List tmp5_1 = tmp5_0.asTypedList(tmp6);
    tmp5_1.setAll(0, tmp4_0);
    tmp5 = tmp5_0.address;
    tmp7 = tmp6;
    final tmp8_0 = utf8.encode(tmp8);
    tmp10 = tmp8_0.length;
    final ffi.Pointer<ffi.Uint8> tmp9_0 = this.__allocate(tmp10 * 1, 1);
    final Uint8List tmp9_1 = tmp9_0.asTypedList(tmp10);
    tmp9_1.setAll(0, tmp8_0);
    tmp9 = tmp9_0.address;
    tmp11 = tmp10;
    final tmp12 = _loginNewClient(
      tmp1,
      tmp2,
      tmp3,
      tmp5,
      tmp6,
      tmp7,
      tmp9,
      tmp10,
      tmp11,
    );
    final tmp14 = tmp12;
    final ffi.Pointer<ffi.Void> tmp14_0 = ffi.Pointer.fromAddress(tmp14);
    final tmp14_1 = _Box(this, tmp14_0, "__login_new_client_future_drop");
    tmp14_1._finalizer = this._registerFinalizer(tmp14_1);
    final tmp13 = _nativeFuture(tmp14_1, this.__loginNewClientFuturePoll);
    return tmp13;
  }

  /// Create a new client from the restore token
  Future<Client> loginWithToken(
    String basepath,
    String restoreToken,
  ) {
    final tmp0 = basepath;
    final tmp4 = restoreToken;
    var tmp1 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    final tmp0_0 = utf8.encode(tmp0);
    tmp2 = tmp0_0.length;
    final ffi.Pointer<ffi.Uint8> tmp1_0 = this.__allocate(tmp2 * 1, 1);
    final Uint8List tmp1_1 = tmp1_0.asTypedList(tmp2);
    tmp1_1.setAll(0, tmp0_0);
    tmp1 = tmp1_0.address;
    tmp3 = tmp2;
    final tmp4_0 = utf8.encode(tmp4);
    tmp6 = tmp4_0.length;
    final ffi.Pointer<ffi.Uint8> tmp5_0 = this.__allocate(tmp6 * 1, 1);
    final Uint8List tmp5_1 = tmp5_0.asTypedList(tmp6);
    tmp5_1.setAll(0, tmp4_0);
    tmp5 = tmp5_0.address;
    tmp7 = tmp6;
    final tmp8 = _loginWithToken(
      tmp1,
      tmp2,
      tmp3,
      tmp5,
      tmp6,
      tmp7,
    );
    final tmp10 = tmp8;
    final ffi.Pointer<ffi.Void> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
    final tmp10_1 = _Box(this, tmp10_0, "__login_with_token_future_drop");
    tmp10_1._finalizer = this._registerFinalizer(tmp10_1);
    final tmp9 = _nativeFuture(tmp10_1, this.__loginWithTokenFuturePoll);
    return tmp9;
  }

  /// Create a new client anonymous client connecting to the homeserver
  Future<Client> guestClient(
    String basepath,
    String homeserver,
  ) {
    final tmp0 = basepath;
    final tmp4 = homeserver;
    var tmp1 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    final tmp0_0 = utf8.encode(tmp0);
    tmp2 = tmp0_0.length;
    final ffi.Pointer<ffi.Uint8> tmp1_0 = this.__allocate(tmp2 * 1, 1);
    final Uint8List tmp1_1 = tmp1_0.asTypedList(tmp2);
    tmp1_1.setAll(0, tmp0_0);
    tmp1 = tmp1_0.address;
    tmp3 = tmp2;
    final tmp4_0 = utf8.encode(tmp4);
    tmp6 = tmp4_0.length;
    final ffi.Pointer<ffi.Uint8> tmp5_0 = this.__allocate(tmp6 * 1, 1);
    final Uint8List tmp5_1 = tmp5_0.asTypedList(tmp6);
    tmp5_1.setAll(0, tmp4_0);
    tmp5 = tmp5_0.address;
    tmp7 = tmp6;
    final tmp8 = _guestClient(
      tmp1,
      tmp2,
      tmp3,
      tmp5,
      tmp6,
      tmp7,
    );
    final tmp10 = tmp8;
    final ffi.Pointer<ffi.Void> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
    final tmp10_1 = _Box(this, tmp10_0, "__guest_client_future_drop");
    tmp10_1._finalizer = this._registerFinalizer(tmp10_1);
    final tmp9 = _nativeFuture(tmp10_1, this.__guestClientFuturePoll);
    return tmp9;
  }

  /// generate news mock items
  FfiListNews genMockNews() {
    final tmp0 = _genMockNews();
    final tmp2 = tmp0;
    final ffi.Pointer<ffi.Void> tmp2_0 = ffi.Pointer.fromAddress(tmp2);
    final tmp2_1 = _Box(this, tmp2_0, "drop_box_FfiListNews");
    tmp2_1._finalizer = this._registerFinalizer(tmp2_1);
    final tmp3 = FfiListNews._(this, tmp2_1);
    final tmp1 = tmp3;
    return tmp1;
  }

  /// Create a new client from the restore token
  Future<Client> registerWithRegistrationToken(
    String basepath,
    String username,
    String password,
    String registrationToken,
  ) {
    final tmp0 = basepath;
    final tmp4 = username;
    final tmp8 = password;
    final tmp12 = registrationToken;
    var tmp1 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp9 = 0;
    var tmp10 = 0;
    var tmp11 = 0;
    var tmp13 = 0;
    var tmp14 = 0;
    var tmp15 = 0;
    final tmp0_0 = utf8.encode(tmp0);
    tmp2 = tmp0_0.length;
    final ffi.Pointer<ffi.Uint8> tmp1_0 = this.__allocate(tmp2 * 1, 1);
    final Uint8List tmp1_1 = tmp1_0.asTypedList(tmp2);
    tmp1_1.setAll(0, tmp0_0);
    tmp1 = tmp1_0.address;
    tmp3 = tmp2;
    final tmp4_0 = utf8.encode(tmp4);
    tmp6 = tmp4_0.length;
    final ffi.Pointer<ffi.Uint8> tmp5_0 = this.__allocate(tmp6 * 1, 1);
    final Uint8List tmp5_1 = tmp5_0.asTypedList(tmp6);
    tmp5_1.setAll(0, tmp4_0);
    tmp5 = tmp5_0.address;
    tmp7 = tmp6;
    final tmp8_0 = utf8.encode(tmp8);
    tmp10 = tmp8_0.length;
    final ffi.Pointer<ffi.Uint8> tmp9_0 = this.__allocate(tmp10 * 1, 1);
    final Uint8List tmp9_1 = tmp9_0.asTypedList(tmp10);
    tmp9_1.setAll(0, tmp8_0);
    tmp9 = tmp9_0.address;
    tmp11 = tmp10;
    final tmp12_0 = utf8.encode(tmp12);
    tmp14 = tmp12_0.length;
    final ffi.Pointer<ffi.Uint8> tmp13_0 = this.__allocate(tmp14 * 1, 1);
    final Uint8List tmp13_1 = tmp13_0.asTypedList(tmp14);
    tmp13_1.setAll(0, tmp12_0);
    tmp13 = tmp13_0.address;
    tmp15 = tmp14;
    final tmp16 = _registerWithRegistrationToken(
      tmp1,
      tmp2,
      tmp3,
      tmp5,
      tmp6,
      tmp7,
      tmp9,
      tmp10,
      tmp11,
      tmp13,
      tmp14,
      tmp15,
    );
    final tmp18 = tmp16;
    final ffi.Pointer<ffi.Void> tmp18_0 = ffi.Pointer.fromAddress(tmp18);
    final tmp18_1 =
        _Box(this, tmp18_0, "__register_with_registration_token_future_drop");
    tmp18_1._finalizer = this._registerFinalizer(tmp18_1);
    final tmp17 =
        _nativeFuture(tmp18_1, this.__registerWithRegistrationTokenFuturePoll);
    return tmp17;
  }

  late final _allocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.IntPtr, ffi.IntPtr)>>("allocate");

  late final _allocate =
      _allocatePtr.asFunction<ffi.Pointer<ffi.Uint8> Function(int, int)>();

  late final _deallocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>, ffi.IntPtr, ffi.IntPtr)>>("deallocate");

  late final _deallocate = _deallocatePtr
      .asFunction<void Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  late final _ffiBufferAddressPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr)>>(
          "__ffi_buffer_address");

  late final _ffiBufferAddress =
      _ffiBufferAddressPtr.asFunction<int Function(int)>();

  late final _ffiBufferSizePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.IntPtr)>>(
          "__ffi_buffer_size");

  late final _ffiBufferSize = _ffiBufferSizePtr.asFunction<int Function(int)>();

  late final _ffiStringIntoPartsPtr =
      _lookup<ffi.NativeFunction<_FfiStringParts Function(ffi.IntPtr)>>(
          "__ffi_string_into_parts");

  late final _ffiStringIntoParts =
      _ffiStringIntoPartsPtr.asFunction<_FfiStringParts Function(int)>();

  Client? __loginNewClientFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _loginNewClientFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_Client");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = Client._(this, tmp13_1);
    return tmp7;
  }

  Client? __loginWithTokenFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _loginWithTokenFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_Client");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = Client._(this, tmp13_1);
    return tmp7;
  }

  Client? __guestClientFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _guestClientFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_Client");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = Client._(this, tmp13_1);
    return tmp7;
  }

  Client? __registerWithRegistrationTokenFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _registerWithRegistrationTokenFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_Client");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = Client._(this, tmp13_1);
    return tmp7;
  }

  RoomMessage? __timelineStreamNextFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _timelineStreamNextFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_RoomMessage");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = RoomMessage._(this, tmp13_1);
    return tmp7;
  }

  FfiListRoomMessage? __timelineStreamPaginateBackwardsFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _timelineStreamPaginateBackwardsFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListRoomMessage");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListRoomMessage._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  String? __conversationDisplayNameFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationDisplayNameFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    final tmp14 = tmp6.arg6;
    final tmp15 = tmp6.arg7;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Uint8> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp7 = utf8.decode(tmp13_0.asTypedList(tmp14));
    if (tmp15 > 0) {
      final ffi.Pointer<ffi.Void> tmp13_0;
      tmp13_0 = ffi.Pointer.fromAddress(tmp13);
      this.__deallocate(tmp13_0, tmp15 * 1, 1);
    }
    return tmp7;
  }

  FfiBufferUint8? __conversationAvatarFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationAvatarFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiBuffer");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiBufferUint8._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  FfiListMember? __conversationActiveMembersFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationActiveMembersFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListMember");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListMember._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  TimelineStream? __conversationTimelineFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationTimelineFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_TimelineStream");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = TimelineStream._(this, tmp13_1);
    return tmp7;
  }

  Member? __conversationGetMemberFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationGetMemberFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_Member");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = Member._(this, tmp13_1);
    return tmp7;
  }

  RoomMessage? __conversationLatestMessageFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationLatestMessageFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_RoomMessage");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = RoomMessage._(this, tmp13_1);
    return tmp7;
  }

  bool? __conversationTypingNoticeFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationTypingNoticeFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  bool? __conversationReadReceiptFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationReadReceiptFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  String? __conversationSendPlainMessageFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationSendPlainMessageFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    final tmp14 = tmp6.arg6;
    final tmp15 = tmp6.arg7;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Uint8> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp7 = utf8.decode(tmp13_0.asTypedList(tmp14));
    if (tmp15 > 0) {
      final ffi.Pointer<ffi.Void> tmp13_0;
      tmp13_0 = ffi.Pointer.fromAddress(tmp13);
      this.__deallocate(tmp13_0, tmp15 * 1, 1);
    }
    return tmp7;
  }

  String? __conversationSendImageMessageFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationSendImageMessageFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    final tmp14 = tmp6.arg6;
    final tmp15 = tmp6.arg7;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Uint8> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp7 = utf8.decode(tmp13_0.asTypedList(tmp14));
    if (tmp15 > 0) {
      final ffi.Pointer<ffi.Void> tmp13_0;
      tmp13_0 = ffi.Pointer.fromAddress(tmp13);
      this.__deallocate(tmp13_0, tmp15 * 1, 1);
    }
    return tmp7;
  }

  FfiBufferUint8? __conversationImageBinaryFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationImageBinaryFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiBuffer");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiBufferUint8._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  String? __conversationSendFileMessageFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationSendFileMessageFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    final tmp14 = tmp6.arg6;
    final tmp15 = tmp6.arg7;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Uint8> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp7 = utf8.decode(tmp13_0.asTypedList(tmp14));
    if (tmp15 > 0) {
      final ffi.Pointer<ffi.Void> tmp13_0;
      tmp13_0 = ffi.Pointer.fromAddress(tmp13);
      this.__deallocate(tmp13_0, tmp15 * 1, 1);
    }
    return tmp7;
  }

  String? __conversationSaveFileFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationSaveFileFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    final tmp14 = tmp6.arg6;
    final tmp15 = tmp6.arg7;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Uint8> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp7 = utf8.decode(tmp13_0.asTypedList(tmp14));
    if (tmp15 > 0) {
      final ffi.Pointer<ffi.Void> tmp13_0;
      tmp13_0 = ffi.Pointer.fromAddress(tmp13);
      this.__deallocate(tmp13_0, tmp15 * 1, 1);
    }
    return tmp7;
  }

  String? __conversationFilePathFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationFilePathFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    final tmp14 = tmp6.arg6;
    final tmp15 = tmp6.arg7;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Uint8> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp7 = utf8.decode(tmp13_0.asTypedList(tmp14));
    if (tmp15 > 0) {
      final ffi.Pointer<ffi.Void> tmp13_0;
      tmp13_0 = ffi.Pointer.fromAddress(tmp13);
      this.__deallocate(tmp13_0, tmp15 * 1, 1);
    }
    return tmp7;
  }

  String? __conversationGetInviterFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationGetInviterFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    final tmp14 = tmp6.arg6;
    final tmp15 = tmp6.arg7;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Uint8> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp7 = utf8.decode(tmp13_0.asTypedList(tmp14));
    if (tmp15 > 0) {
      final ffi.Pointer<ffi.Void> tmp13_0;
      tmp13_0 = ffi.Pointer.fromAddress(tmp13);
      this.__deallocate(tmp13_0, tmp15 * 1, 1);
    }
    return tmp7;
  }

  String? __groupDisplayNameFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _groupDisplayNameFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    final tmp14 = tmp6.arg6;
    final tmp15 = tmp6.arg7;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Uint8> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp7 = utf8.decode(tmp13_0.asTypedList(tmp14));
    if (tmp15 > 0) {
      final ffi.Pointer<ffi.Void> tmp13_0;
      tmp13_0 = ffi.Pointer.fromAddress(tmp13);
      this.__deallocate(tmp13_0, tmp15 * 1, 1);
    }
    return tmp7;
  }

  FfiBufferUint8? __groupAvatarFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _groupAvatarFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiBuffer");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiBufferUint8._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  FfiListMember? __groupActiveMembersFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _groupActiveMembersFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListMember");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListMember._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  Member? __groupGetMemberFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _groupGetMemberFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_Member");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = Member._(this, tmp13_1);
    return tmp7;
  }

  FfiBufferUint8? __memberAvatarFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _memberAvatarFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiBuffer");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiBufferUint8._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  String? __accountDisplayNameFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _accountDisplayNameFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    final tmp14 = tmp6.arg6;
    final tmp15 = tmp6.arg7;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Uint8> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp7 = utf8.decode(tmp13_0.asTypedList(tmp14));
    if (tmp15 > 0) {
      final ffi.Pointer<ffi.Void> tmp13_0;
      tmp13_0 = ffi.Pointer.fromAddress(tmp13);
      this.__deallocate(tmp13_0, tmp15 * 1, 1);
    }
    return tmp7;
  }

  bool? __accountSetDisplayNameFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _accountSetDisplayNameFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  FfiBufferUint8? __accountAvatarFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _accountAvatarFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiBuffer");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiBufferUint8._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  bool? __accountSetAvatarFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _accountSetAvatarFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  String? __clientRestoreTokenFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientRestoreTokenFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    final tmp14 = tmp6.arg6;
    final tmp15 = tmp6.arg7;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Uint8> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp7 = utf8.decode(tmp13_0.asTypedList(tmp14));
    if (tmp15 > 0) {
      final ffi.Pointer<ffi.Void> tmp13_0;
      tmp13_0 = ffi.Pointer.fromAddress(tmp13);
      this.__deallocate(tmp13_0, tmp15 * 1, 1);
    }
    return tmp7;
  }

  bool? __clientLoggedInFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientLoggedInFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    if (tmp8 == 0) {
      return null;
    }
    final tmp7 = tmp9 > 0;
    return tmp7;
  }

  Account? __clientAccountFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientAccountFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_Account");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = Account._(this, tmp13_1);
    return tmp7;
  }

  String? __clientDeviceIdFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientDeviceIdFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    final tmp14 = tmp6.arg6;
    final tmp15 = tmp6.arg7;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Uint8> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp7 = utf8.decode(tmp13_0.asTypedList(tmp14));
    if (tmp15 > 0) {
      final ffi.Pointer<ffi.Void> tmp13_0;
      tmp13_0 = ffi.Pointer.fromAddress(tmp13);
      this.__deallocate(tmp13_0, tmp15 * 1, 1);
    }
    return tmp7;
  }

  UserId? __clientUserIdFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientUserIdFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_UserId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = UserId._(this, tmp13_1);
    return tmp7;
  }

  String? __clientDisplayNameFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientDisplayNameFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    final tmp14 = tmp6.arg6;
    final tmp15 = tmp6.arg7;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Uint8> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp7 = utf8.decode(tmp13_0.asTypedList(tmp14));
    if (tmp15 > 0) {
      final ffi.Pointer<ffi.Void> tmp13_0;
      tmp13_0 = ffi.Pointer.fromAddress(tmp13);
      this.__deallocate(tmp13_0, tmp15 * 1, 1);
    }
    return tmp7;
  }

  FfiBufferUint8? __clientAvatarFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientAvatarFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiBuffer");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiBufferUint8._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  FfiListConversation? __clientConversationsFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientConversationsFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListConversation");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListConversation._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  FfiListGroup? __clientGroupsFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientGroupsFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListGroup");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListGroup._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  FfiListNews? __clientLatestNewsFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientLatestNewsFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListNews");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListNews._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  FfiListFaq? __clientFaqsFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientFaqsFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListFaq");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListFaq._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  late final _initLoggingPtr = _lookup<
      ffi.NativeFunction<
          _InitLoggingReturn Function(
    ffi.Uint8,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__init_logging");

  late final _initLogging = _initLoggingPtr.asFunction<
      _InitLoggingReturn Function(
    int,
    int,
    int,
    int,
  )>();
  late final _loginNewClientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__login_new_client");

  late final _loginNewClient = _loginNewClientPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _loginWithTokenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__login_with_token");

  late final _loginWithToken = _loginWithTokenPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _guestClientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__guest_client");

  late final _guestClient = _guestClientPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _genMockNewsPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>("__gen_mock_news");

  late final _genMockNews = _genMockNewsPtr.asFunction<int Function()>();
  late final _registerWithRegistrationTokenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__register_with_registration_token");

  late final _registerWithRegistrationToken =
      _registerWithRegistrationTokenPtr.asFunction<
          int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _colorRgbaU8Ptr = _lookup<
      ffi.NativeFunction<
          _ColorRgbaU8Return Function(
    ffi.Int64,
  )>>("__Color_rgba_u8");

  late final _colorRgbaU8 = _colorRgbaU8Ptr.asFunction<
      _ColorRgbaU8Return Function(
    int,
  )>();
  late final _newsTextPtr = _lookup<
      ffi.NativeFunction<
          _NewsTextReturn Function(
    ffi.Int64,
  )>>("__News_text");

  late final _newsText = _newsTextPtr.asFunction<
      _NewsTextReturn Function(
    int,
  )>();
  late final _newsTagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__News_tags");

  late final _newsTags = _newsTagsPtr.asFunction<
      int Function(
    int,
  )>();
  late final _newsLikesCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
    ffi.Int64,
  )>>("__News_likes_count");

  late final _newsLikesCount = _newsLikesCountPtr.asFunction<
      int Function(
    int,
  )>();
  late final _newsCommentsCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
    ffi.Int64,
  )>>("__News_comments_count");

  late final _newsCommentsCount = _newsCommentsCountPtr.asFunction<
      int Function(
    int,
  )>();
  late final _newsFgColorPtr = _lookup<
      ffi.NativeFunction<
          _NewsFgColorReturn Function(
    ffi.Int64,
  )>>("__News_fg_color");

  late final _newsFgColor = _newsFgColorPtr.asFunction<
      _NewsFgColorReturn Function(
    int,
  )>();
  late final _newsBgColorPtr = _lookup<
      ffi.NativeFunction<
          _NewsBgColorReturn Function(
    ffi.Int64,
  )>>("__News_bg_color");

  late final _newsBgColor = _newsBgColorPtr.asFunction<
      _NewsBgColorReturn Function(
    int,
  )>();
  late final _newsImagePtr = _lookup<
      ffi.NativeFunction<
          _NewsImageReturn Function(
    ffi.Int64,
  )>>("__News_image");

  late final _newsImage = _newsImagePtr.asFunction<
      _NewsImageReturn Function(
    int,
  )>();
  late final _tagTitlePtr = _lookup<
      ffi.NativeFunction<
          _TagTitleReturn Function(
    ffi.Int64,
  )>>("__Tag_title");

  late final _tagTitle = _tagTitlePtr.asFunction<
      _TagTitleReturn Function(
    int,
  )>();
  late final _tagHashTagPtr = _lookup<
      ffi.NativeFunction<
          _TagHashTagReturn Function(
    ffi.Int64,
  )>>("__Tag_hash_tag");

  late final _tagHashTag = _tagHashTagPtr.asFunction<
      _TagHashTagReturn Function(
    int,
  )>();
  late final _tagColorPtr = _lookup<
      ffi.NativeFunction<
          _TagColorReturn Function(
    ffi.Int64,
  )>>("__Tag_color");

  late final _tagColor = _tagColorPtr.asFunction<
      _TagColorReturn Function(
    int,
  )>();
  late final _faqTitlePtr = _lookup<
      ffi.NativeFunction<
          _FaqTitleReturn Function(
    ffi.Int64,
  )>>("__Faq_title");

  late final _faqTitle = _faqTitlePtr.asFunction<
      _FaqTitleReturn Function(
    int,
  )>();
  late final _faqBodyPtr = _lookup<
      ffi.NativeFunction<
          _FaqBodyReturn Function(
    ffi.Int64,
  )>>("__Faq_body");

  late final _faqBody = _faqBodyPtr.asFunction<
      _FaqBodyReturn Function(
    int,
  )>();
  late final _faqPinnedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
    ffi.Int64,
  )>>("__Faq_pinned");

  late final _faqPinned = _faqPinnedPtr.asFunction<
      int Function(
    int,
  )>();
  late final _faqTagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Faq_tags");

  late final _faqTags = _faqTagsPtr.asFunction<
      int Function(
    int,
  )>();
  late final _faqLikesCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
    ffi.Int64,
  )>>("__Faq_likes_count");

  late final _faqLikesCount = _faqLikesCountPtr.asFunction<
      int Function(
    int,
  )>();
  late final _faqCommentsCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
    ffi.Int64,
  )>>("__Faq_comments_count");

  late final _faqCommentsCount = _faqCommentsCountPtr.asFunction<
      int Function(
    int,
  )>();
  late final _userIdToStringPtr = _lookup<
      ffi.NativeFunction<
          _UserIdToStringReturn Function(
    ffi.Int64,
  )>>("__UserId_to_string");

  late final _userIdToString = _userIdToStringPtr.asFunction<
      _UserIdToStringReturn Function(
    int,
  )>();
  late final _roomMessageEventIdPtr = _lookup<
      ffi.NativeFunction<
          _RoomMessageEventIdReturn Function(
    ffi.Int64,
  )>>("__RoomMessage_event_id");

  late final _roomMessageEventId = _roomMessageEventIdPtr.asFunction<
      _RoomMessageEventIdReturn Function(
    int,
  )>();
  late final _roomMessageSenderPtr = _lookup<
      ffi.NativeFunction<
          _RoomMessageSenderReturn Function(
    ffi.Int64,
  )>>("__RoomMessage_sender");

  late final _roomMessageSender = _roomMessageSenderPtr.asFunction<
      _RoomMessageSenderReturn Function(
    int,
  )>();
  late final _roomMessageBodyPtr = _lookup<
      ffi.NativeFunction<
          _RoomMessageBodyReturn Function(
    ffi.Int64,
  )>>("__RoomMessage_body");

  late final _roomMessageBody = _roomMessageBodyPtr.asFunction<
      _RoomMessageBodyReturn Function(
    int,
  )>();
  late final _roomMessageOriginServerTsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
    ffi.Int64,
  )>>("__RoomMessage_origin_server_ts");

  late final _roomMessageOriginServerTs =
      _roomMessageOriginServerTsPtr.asFunction<
          int Function(
    int,
  )>();
  late final _roomMessageMsgtypePtr = _lookup<
      ffi.NativeFunction<
          _RoomMessageMsgtypeReturn Function(
    ffi.Int64,
  )>>("__RoomMessage_msgtype");

  late final _roomMessageMsgtype = _roomMessageMsgtypePtr.asFunction<
      _RoomMessageMsgtypeReturn Function(
    int,
  )>();
  late final _roomMessageImageDescriptionPtr = _lookup<
      ffi.NativeFunction<
          _RoomMessageImageDescriptionReturn Function(
    ffi.Int64,
  )>>("__RoomMessage_image_description");

  late final _roomMessageImageDescription =
      _roomMessageImageDescriptionPtr.asFunction<
          _RoomMessageImageDescriptionReturn Function(
    int,
  )>();
  late final _roomMessageFileDescriptionPtr = _lookup<
      ffi.NativeFunction<
          _RoomMessageFileDescriptionReturn Function(
    ffi.Int64,
  )>>("__RoomMessage_file_description");

  late final _roomMessageFileDescription =
      _roomMessageFileDescriptionPtr.asFunction<
          _RoomMessageFileDescriptionReturn Function(
    int,
  )>();
  late final _imageDescriptionNamePtr = _lookup<
      ffi.NativeFunction<
          _ImageDescriptionNameReturn Function(
    ffi.Int64,
  )>>("__ImageDescription_name");

  late final _imageDescriptionName = _imageDescriptionNamePtr.asFunction<
      _ImageDescriptionNameReturn Function(
    int,
  )>();
  late final _imageDescriptionMimetypePtr = _lookup<
      ffi.NativeFunction<
          _ImageDescriptionMimetypeReturn Function(
    ffi.Int64,
  )>>("__ImageDescription_mimetype");

  late final _imageDescriptionMimetype =
      _imageDescriptionMimetypePtr.asFunction<
          _ImageDescriptionMimetypeReturn Function(
    int,
  )>();
  late final _imageDescriptionSizePtr = _lookup<
      ffi.NativeFunction<
          _ImageDescriptionSizeReturn Function(
    ffi.Int64,
  )>>("__ImageDescription_size");

  late final _imageDescriptionSize = _imageDescriptionSizePtr.asFunction<
      _ImageDescriptionSizeReturn Function(
    int,
  )>();
  late final _imageDescriptionWidthPtr = _lookup<
      ffi.NativeFunction<
          _ImageDescriptionWidthReturn Function(
    ffi.Int64,
  )>>("__ImageDescription_width");

  late final _imageDescriptionWidth = _imageDescriptionWidthPtr.asFunction<
      _ImageDescriptionWidthReturn Function(
    int,
  )>();
  late final _imageDescriptionHeightPtr = _lookup<
      ffi.NativeFunction<
          _ImageDescriptionHeightReturn Function(
    ffi.Int64,
  )>>("__ImageDescription_height");

  late final _imageDescriptionHeight = _imageDescriptionHeightPtr.asFunction<
      _ImageDescriptionHeightReturn Function(
    int,
  )>();
  late final _fileDescriptionNamePtr = _lookup<
      ffi.NativeFunction<
          _FileDescriptionNameReturn Function(
    ffi.Int64,
  )>>("__FileDescription_name");

  late final _fileDescriptionName = _fileDescriptionNamePtr.asFunction<
      _FileDescriptionNameReturn Function(
    int,
  )>();
  late final _fileDescriptionMimetypePtr = _lookup<
      ffi.NativeFunction<
          _FileDescriptionMimetypeReturn Function(
    ffi.Int64,
  )>>("__FileDescription_mimetype");

  late final _fileDescriptionMimetype = _fileDescriptionMimetypePtr.asFunction<
      _FileDescriptionMimetypeReturn Function(
    int,
  )>();
  late final _fileDescriptionSizePtr = _lookup<
      ffi.NativeFunction<
          _FileDescriptionSizeReturn Function(
    ffi.Int64,
  )>>("__FileDescription_size");

  late final _fileDescriptionSize = _fileDescriptionSizePtr.asFunction<
      _FileDescriptionSizeReturn Function(
    int,
  )>();
  late final _timelineStreamNextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__TimelineStream_next");

  late final _timelineStreamNext = _timelineStreamNextPtr.asFunction<
      int Function(
    int,
  )>();
  late final _timelineStreamPaginateBackwardsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Uint64,
  )>>("__TimelineStream_paginate_backwards");

  late final _timelineStreamPaginateBackwards =
      _timelineStreamPaginateBackwardsPtr.asFunction<
          int Function(
    int,
    int,
  )>();
  late final _conversationDisplayNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Conversation_display_name");

  late final _conversationDisplayName = _conversationDisplayNamePtr.asFunction<
      int Function(
    int,
  )>();
  late final _conversationAvatarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Conversation_avatar");

  late final _conversationAvatar = _conversationAvatarPtr.asFunction<
      int Function(
    int,
  )>();
  late final _conversationActiveMembersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Conversation_active_members");

  late final _conversationActiveMembers =
      _conversationActiveMembersPtr.asFunction<
          int Function(
    int,
  )>();
  late final _conversationTimelinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Conversation_timeline");

  late final _conversationTimeline = _conversationTimelinePtr.asFunction<
      int Function(
    int,
  )>();
  late final _conversationGetMemberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_get_member");

  late final _conversationGetMember = _conversationGetMemberPtr.asFunction<
      int Function(
    int,
    int,
  )>();
  late final _conversationLatestMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Conversation_latest_message");

  late final _conversationLatestMessage =
      _conversationLatestMessagePtr.asFunction<
          int Function(
    int,
  )>();
  late final _conversationTypingNoticePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Uint8,
  )>>("__Conversation_typing_notice");

  late final _conversationTypingNotice =
      _conversationTypingNoticePtr.asFunction<
          int Function(
    int,
    int,
  )>();
  late final _conversationReadReceiptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Conversation_read_receipt");

  late final _conversationReadReceipt = _conversationReadReceiptPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _conversationSendPlainMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Conversation_send_plain_message");

  late final _conversationSendPlainMessage =
      _conversationSendPlainMessagePtr.asFunction<
          int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _conversationSendImageMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Uint32,
  )>>("__Conversation_send_image_message");

  late final _conversationSendImageMessage =
      _conversationSendImageMessagePtr.asFunction<
          int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _conversationImageBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Conversation_image_binary");

  late final _conversationImageBinary = _conversationImageBinaryPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _conversationSendFileMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint32,
  )>>("__Conversation_send_file_message");

  late final _conversationSendFileMessage =
      _conversationSendFileMessagePtr.asFunction<
          int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _conversationSaveFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Conversation_save_file");

  late final _conversationSaveFile = _conversationSaveFilePtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _conversationFilePathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Conversation_file_path");

  late final _conversationFilePath = _conversationFilePathPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _conversationGetInviterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Conversation_get_inviter");

  late final _conversationGetInviter = _conversationGetInviterPtr.asFunction<
      int Function(
    int,
  )>();
  late final _groupDisplayNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Group_display_name");

  late final _groupDisplayName = _groupDisplayNamePtr.asFunction<
      int Function(
    int,
  )>();
  late final _groupAvatarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Group_avatar");

  late final _groupAvatar = _groupAvatarPtr.asFunction<
      int Function(
    int,
  )>();
  late final _groupActiveMembersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Group_active_members");

  late final _groupActiveMembers = _groupActiveMembersPtr.asFunction<
      int Function(
    int,
  )>();
  late final _groupGetMemberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
  )>>("__Group_get_member");

  late final _groupGetMember = _groupGetMemberPtr.asFunction<
      int Function(
    int,
    int,
  )>();
  late final _memberAvatarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Member_avatar");

  late final _memberAvatar = _memberAvatarPtr.asFunction<
      int Function(
    int,
  )>();
  late final _memberDisplayNamePtr = _lookup<
      ffi.NativeFunction<
          _MemberDisplayNameReturn Function(
    ffi.Int64,
  )>>("__Member_display_name");

  late final _memberDisplayName = _memberDisplayNamePtr.asFunction<
      _MemberDisplayNameReturn Function(
    int,
  )>();
  late final _memberUserIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Member_user_id");

  late final _memberUserId = _memberUserIdPtr.asFunction<
      int Function(
    int,
  )>();
  late final _accountDisplayNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Account_display_name");

  late final _accountDisplayName = _accountDisplayNamePtr.asFunction<
      int Function(
    int,
  )>();
  late final _accountSetDisplayNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Account_set_display_name");

  late final _accountSetDisplayName = _accountSetDisplayNamePtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _accountAvatarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Account_avatar");

  late final _accountAvatar = _accountAvatarPtr.asFunction<
      int Function(
    int,
  )>();
  late final _accountSetAvatarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Account_set_avatar");

  late final _accountSetAvatar = _accountSetAvatarPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _clientRestoreTokenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_restore_token");

  late final _clientRestoreToken = _clientRestoreTokenPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientIsGuestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
    ffi.Int64,
  )>>("__Client_is_guest");

  late final _clientIsGuest = _clientIsGuestPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientHasFirstSyncedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
    ffi.Int64,
  )>>("__Client_has_first_synced");

  late final _clientHasFirstSynced = _clientHasFirstSyncedPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientIsSyncingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
    ffi.Int64,
  )>>("__Client_is_syncing");

  late final _clientIsSyncing = _clientIsSyncingPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientLoggedInPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_logged_in");

  late final _clientLoggedIn = _clientLoggedInPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientAccountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_account");

  late final _clientAccount = _clientAccountPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientDeviceIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_device_id");

  late final _clientDeviceId = _clientDeviceIdPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientUserIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_user_id");

  late final _clientUserId = _clientUserIdPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientDisplayNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_display_name");

  late final _clientDisplayName = _clientDisplayNamePtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientAvatarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_avatar");

  late final _clientAvatar = _clientAvatarPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientConversationsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_conversations");

  late final _clientConversations = _clientConversationsPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientGroupsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_groups");

  late final _clientGroups = _clientGroupsPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientLatestNewsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_latest_news");

  late final _clientLatestNews = _clientLatestNewsPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientFaqsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_faqs");

  late final _clientFaqs = _clientFaqsPtr.asFunction<
      int Function(
    int,
  )>();
  late final _loginNewClientFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _LoginNewClientFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__login_new_client_future_poll");

  late final _loginNewClientFuturePoll =
      _loginNewClientFuturePollPtr.asFunction<
          _LoginNewClientFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _loginWithTokenFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _LoginWithTokenFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__login_with_token_future_poll");

  late final _loginWithTokenFuturePoll =
      _loginWithTokenFuturePollPtr.asFunction<
          _LoginWithTokenFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _guestClientFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _GuestClientFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__guest_client_future_poll");

  late final _guestClientFuturePoll = _guestClientFuturePollPtr.asFunction<
      _GuestClientFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _registerWithRegistrationTokenFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _RegisterWithRegistrationTokenFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__register_with_registration_token_future_poll");

  late final _registerWithRegistrationTokenFuturePoll =
      _registerWithRegistrationTokenFuturePollPtr.asFunction<
          _RegisterWithRegistrationTokenFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _timelineStreamNextFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _TimelineStreamNextFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__TimelineStream_next_future_poll");

  late final _timelineStreamNextFuturePoll =
      _timelineStreamNextFuturePollPtr.asFunction<
          _TimelineStreamNextFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _timelineStreamPaginateBackwardsFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _TimelineStreamPaginateBackwardsFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__TimelineStream_paginate_backwards_future_poll");

  late final _timelineStreamPaginateBackwardsFuturePoll =
      _timelineStreamPaginateBackwardsFuturePollPtr.asFunction<
          _TimelineStreamPaginateBackwardsFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationDisplayNameFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationDisplayNameFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_display_name_future_poll");

  late final _conversationDisplayNameFuturePoll =
      _conversationDisplayNameFuturePollPtr.asFunction<
          _ConversationDisplayNameFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationAvatarFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationAvatarFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_avatar_future_poll");

  late final _conversationAvatarFuturePoll =
      _conversationAvatarFuturePollPtr.asFunction<
          _ConversationAvatarFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationActiveMembersFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationActiveMembersFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_active_members_future_poll");

  late final _conversationActiveMembersFuturePoll =
      _conversationActiveMembersFuturePollPtr.asFunction<
          _ConversationActiveMembersFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationTimelineFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationTimelineFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_timeline_future_poll");

  late final _conversationTimelineFuturePoll =
      _conversationTimelineFuturePollPtr.asFunction<
          _ConversationTimelineFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationGetMemberFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationGetMemberFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_get_member_future_poll");

  late final _conversationGetMemberFuturePoll =
      _conversationGetMemberFuturePollPtr.asFunction<
          _ConversationGetMemberFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationLatestMessageFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationLatestMessageFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_latest_message_future_poll");

  late final _conversationLatestMessageFuturePoll =
      _conversationLatestMessageFuturePollPtr.asFunction<
          _ConversationLatestMessageFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationTypingNoticeFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationTypingNoticeFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_typing_notice_future_poll");

  late final _conversationTypingNoticeFuturePoll =
      _conversationTypingNoticeFuturePollPtr.asFunction<
          _ConversationTypingNoticeFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationReadReceiptFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationReadReceiptFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_read_receipt_future_poll");

  late final _conversationReadReceiptFuturePoll =
      _conversationReadReceiptFuturePollPtr.asFunction<
          _ConversationReadReceiptFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationSendPlainMessageFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationSendPlainMessageFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_send_plain_message_future_poll");

  late final _conversationSendPlainMessageFuturePoll =
      _conversationSendPlainMessageFuturePollPtr.asFunction<
          _ConversationSendPlainMessageFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationSendImageMessageFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationSendImageMessageFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_send_image_message_future_poll");

  late final _conversationSendImageMessageFuturePoll =
      _conversationSendImageMessageFuturePollPtr.asFunction<
          _ConversationSendImageMessageFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationImageBinaryFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationImageBinaryFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_image_binary_future_poll");

  late final _conversationImageBinaryFuturePoll =
      _conversationImageBinaryFuturePollPtr.asFunction<
          _ConversationImageBinaryFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationSendFileMessageFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationSendFileMessageFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_send_file_message_future_poll");

  late final _conversationSendFileMessageFuturePoll =
      _conversationSendFileMessageFuturePollPtr.asFunction<
          _ConversationSendFileMessageFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationSaveFileFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationSaveFileFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_save_file_future_poll");

  late final _conversationSaveFileFuturePoll =
      _conversationSaveFileFuturePollPtr.asFunction<
          _ConversationSaveFileFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationFilePathFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationFilePathFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_file_path_future_poll");

  late final _conversationFilePathFuturePoll =
      _conversationFilePathFuturePollPtr.asFunction<
          _ConversationFilePathFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationGetInviterFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationGetInviterFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_get_inviter_future_poll");

  late final _conversationGetInviterFuturePoll =
      _conversationGetInviterFuturePollPtr.asFunction<
          _ConversationGetInviterFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _groupDisplayNameFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _GroupDisplayNameFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Group_display_name_future_poll");

  late final _groupDisplayNameFuturePoll =
      _groupDisplayNameFuturePollPtr.asFunction<
          _GroupDisplayNameFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _groupAvatarFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _GroupAvatarFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Group_avatar_future_poll");

  late final _groupAvatarFuturePoll = _groupAvatarFuturePollPtr.asFunction<
      _GroupAvatarFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _groupActiveMembersFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _GroupActiveMembersFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Group_active_members_future_poll");

  late final _groupActiveMembersFuturePoll =
      _groupActiveMembersFuturePollPtr.asFunction<
          _GroupActiveMembersFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _groupGetMemberFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _GroupGetMemberFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Group_get_member_future_poll");

  late final _groupGetMemberFuturePoll =
      _groupGetMemberFuturePollPtr.asFunction<
          _GroupGetMemberFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _memberAvatarFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _MemberAvatarFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Member_avatar_future_poll");

  late final _memberAvatarFuturePoll = _memberAvatarFuturePollPtr.asFunction<
      _MemberAvatarFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _accountDisplayNameFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _AccountDisplayNameFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Account_display_name_future_poll");

  late final _accountDisplayNameFuturePoll =
      _accountDisplayNameFuturePollPtr.asFunction<
          _AccountDisplayNameFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _accountSetDisplayNameFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _AccountSetDisplayNameFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Account_set_display_name_future_poll");

  late final _accountSetDisplayNameFuturePoll =
      _accountSetDisplayNameFuturePollPtr.asFunction<
          _AccountSetDisplayNameFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _accountAvatarFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _AccountAvatarFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Account_avatar_future_poll");

  late final _accountAvatarFuturePoll = _accountAvatarFuturePollPtr.asFunction<
      _AccountAvatarFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _accountSetAvatarFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _AccountSetAvatarFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Account_set_avatar_future_poll");

  late final _accountSetAvatarFuturePoll =
      _accountSetAvatarFuturePollPtr.asFunction<
          _AccountSetAvatarFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientRestoreTokenFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientRestoreTokenFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_restore_token_future_poll");

  late final _clientRestoreTokenFuturePoll =
      _clientRestoreTokenFuturePollPtr.asFunction<
          _ClientRestoreTokenFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientLoggedInFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientLoggedInFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_logged_in_future_poll");

  late final _clientLoggedInFuturePoll =
      _clientLoggedInFuturePollPtr.asFunction<
          _ClientLoggedInFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientAccountFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientAccountFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_account_future_poll");

  late final _clientAccountFuturePoll = _clientAccountFuturePollPtr.asFunction<
      _ClientAccountFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientDeviceIdFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientDeviceIdFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_device_id_future_poll");

  late final _clientDeviceIdFuturePoll =
      _clientDeviceIdFuturePollPtr.asFunction<
          _ClientDeviceIdFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientUserIdFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientUserIdFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_user_id_future_poll");

  late final _clientUserIdFuturePoll = _clientUserIdFuturePollPtr.asFunction<
      _ClientUserIdFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientDisplayNameFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientDisplayNameFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_display_name_future_poll");

  late final _clientDisplayNameFuturePoll =
      _clientDisplayNameFuturePollPtr.asFunction<
          _ClientDisplayNameFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientAvatarFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientAvatarFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_avatar_future_poll");

  late final _clientAvatarFuturePoll = _clientAvatarFuturePollPtr.asFunction<
      _ClientAvatarFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientConversationsFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientConversationsFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_conversations_future_poll");

  late final _clientConversationsFuturePoll =
      _clientConversationsFuturePollPtr.asFunction<
          _ClientConversationsFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientGroupsFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientGroupsFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_groups_future_poll");

  late final _clientGroupsFuturePoll = _clientGroupsFuturePollPtr.asFunction<
      _ClientGroupsFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientLatestNewsFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientLatestNewsFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_latest_news_future_poll");

  late final _clientLatestNewsFuturePoll =
      _clientLatestNewsFuturePollPtr.asFunction<
          _ClientLatestNewsFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientFaqsFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientFaqsFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_faqs_future_poll");

  late final _clientFaqsFuturePoll = _clientFaqsFuturePollPtr.asFunction<
      _ClientFaqsFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  FfiListConversation createFfiListConversation() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListConversationCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListConversation");
    return FfiListConversation._(this, list_box);
  }

  late final _ffiListConversationCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>(
          "__FfiListConversationCreate");

  late final _ffiListConversationCreate =
      _ffiListConversationCreatePtr.asFunction<int Function()>();

  late final _ffiListConversationLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListConversationLen");

  late final _ffiListConversationLen =
      _ffiListConversationLenPtr.asFunction<int Function(int)>();

  late final _ffiListConversationElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListConversationElementAt");

  late final _ffiListConversationElementAt =
      _ffiListConversationElementAtPtr.asFunction<int Function(int, int)>();

  late final _ffiListConversationRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListConversationRemove");

  late final _ffiListConversationRemove =
      _ffiListConversationRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListConversationAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListConversationAdd");

  late final _ffiListConversationAdd =
      _ffiListConversationAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListConversationInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.IntPtr, ffi.Uint32,
              ffi.IntPtr)>>("__FfiListConversationInsert");

  late final _ffiListConversationInsert =
      _ffiListConversationInsertPtr.asFunction<void Function(int, int, int)>();
  FfiListFaq createFfiListFaq() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListFaqCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListFaq");
    return FfiListFaq._(this, list_box);
  }

  late final _ffiListFaqCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>("__FfiListFaqCreate");

  late final _ffiListFaqCreate =
      _ffiListFaqCreatePtr.asFunction<int Function()>();

  late final _ffiListFaqLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListFaqLen");

  late final _ffiListFaqLen = _ffiListFaqLenPtr.asFunction<int Function(int)>();

  late final _ffiListFaqElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListFaqElementAt");

  late final _ffiListFaqElementAt =
      _ffiListFaqElementAtPtr.asFunction<int Function(int, int)>();

  late final _ffiListFaqRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListFaqRemove");

  late final _ffiListFaqRemove =
      _ffiListFaqRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListFaqAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListFaqAdd");

  late final _ffiListFaqAdd =
      _ffiListFaqAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListFaqInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.IntPtr, ffi.Uint32, ffi.IntPtr)>>("__FfiListFaqInsert");

  late final _ffiListFaqInsert =
      _ffiListFaqInsertPtr.asFunction<void Function(int, int, int)>();
  FfiListGroup createFfiListGroup() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListGroupCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListGroup");
    return FfiListGroup._(this, list_box);
  }

  late final _ffiListGroupCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>(
          "__FfiListGroupCreate");

  late final _ffiListGroupCreate =
      _ffiListGroupCreatePtr.asFunction<int Function()>();

  late final _ffiListGroupLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListGroupLen");

  late final _ffiListGroupLen =
      _ffiListGroupLenPtr.asFunction<int Function(int)>();

  late final _ffiListGroupElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListGroupElementAt");

  late final _ffiListGroupElementAt =
      _ffiListGroupElementAtPtr.asFunction<int Function(int, int)>();

  late final _ffiListGroupRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListGroupRemove");

  late final _ffiListGroupRemove =
      _ffiListGroupRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListGroupAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListGroupAdd");

  late final _ffiListGroupAdd =
      _ffiListGroupAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListGroupInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.IntPtr, ffi.Uint32, ffi.IntPtr)>>("__FfiListGroupInsert");

  late final _ffiListGroupInsert =
      _ffiListGroupInsertPtr.asFunction<void Function(int, int, int)>();
  FfiListMember createFfiListMember() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListMemberCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListMember");
    return FfiListMember._(this, list_box);
  }

  late final _ffiListMemberCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>(
          "__FfiListMemberCreate");

  late final _ffiListMemberCreate =
      _ffiListMemberCreatePtr.asFunction<int Function()>();

  late final _ffiListMemberLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListMemberLen");

  late final _ffiListMemberLen =
      _ffiListMemberLenPtr.asFunction<int Function(int)>();

  late final _ffiListMemberElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListMemberElementAt");

  late final _ffiListMemberElementAt =
      _ffiListMemberElementAtPtr.asFunction<int Function(int, int)>();

  late final _ffiListMemberRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListMemberRemove");

  late final _ffiListMemberRemove =
      _ffiListMemberRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListMemberAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListMemberAdd");

  late final _ffiListMemberAdd =
      _ffiListMemberAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListMemberInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.IntPtr, ffi.Uint32, ffi.IntPtr)>>("__FfiListMemberInsert");

  late final _ffiListMemberInsert =
      _ffiListMemberInsertPtr.asFunction<void Function(int, int, int)>();
  FfiListNews createFfiListNews() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListNewsCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListNews");
    return FfiListNews._(this, list_box);
  }

  late final _ffiListNewsCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>("__FfiListNewsCreate");

  late final _ffiListNewsCreate =
      _ffiListNewsCreatePtr.asFunction<int Function()>();

  late final _ffiListNewsLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListNewsLen");

  late final _ffiListNewsLen =
      _ffiListNewsLenPtr.asFunction<int Function(int)>();

  late final _ffiListNewsElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListNewsElementAt");

  late final _ffiListNewsElementAt =
      _ffiListNewsElementAtPtr.asFunction<int Function(int, int)>();

  late final _ffiListNewsRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListNewsRemove");

  late final _ffiListNewsRemove =
      _ffiListNewsRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListNewsAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListNewsAdd");

  late final _ffiListNewsAdd =
      _ffiListNewsAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListNewsInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.IntPtr, ffi.Uint32, ffi.IntPtr)>>("__FfiListNewsInsert");

  late final _ffiListNewsInsert =
      _ffiListNewsInsertPtr.asFunction<void Function(int, int, int)>();
  FfiListRoomMessage createFfiListRoomMessage() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListRoomMessageCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListRoomMessage");
    return FfiListRoomMessage._(this, list_box);
  }

  late final _ffiListRoomMessageCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>(
          "__FfiListRoomMessageCreate");

  late final _ffiListRoomMessageCreate =
      _ffiListRoomMessageCreatePtr.asFunction<int Function()>();

  late final _ffiListRoomMessageLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListRoomMessageLen");

  late final _ffiListRoomMessageLen =
      _ffiListRoomMessageLenPtr.asFunction<int Function(int)>();

  late final _ffiListRoomMessageElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListRoomMessageElementAt");

  late final _ffiListRoomMessageElementAt =
      _ffiListRoomMessageElementAtPtr.asFunction<int Function(int, int)>();

  late final _ffiListRoomMessageRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListRoomMessageRemove");

  late final _ffiListRoomMessageRemove =
      _ffiListRoomMessageRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListRoomMessageAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListRoomMessageAdd");

  late final _ffiListRoomMessageAdd =
      _ffiListRoomMessageAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListRoomMessageInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.IntPtr, ffi.Uint32,
              ffi.IntPtr)>>("__FfiListRoomMessageInsert");

  late final _ffiListRoomMessageInsert =
      _ffiListRoomMessageInsertPtr.asFunction<void Function(int, int, int)>();
  FfiListTag createFfiListTag() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListTagCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListTag");
    return FfiListTag._(this, list_box);
  }

  late final _ffiListTagCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>("__FfiListTagCreate");

  late final _ffiListTagCreate =
      _ffiListTagCreatePtr.asFunction<int Function()>();

  late final _ffiListTagLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListTagLen");

  late final _ffiListTagLen = _ffiListTagLenPtr.asFunction<int Function(int)>();

  late final _ffiListTagElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListTagElementAt");

  late final _ffiListTagElementAt =
      _ffiListTagElementAtPtr.asFunction<int Function(int, int)>();

  late final _ffiListTagRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListTagRemove");

  late final _ffiListTagRemove =
      _ffiListTagRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListTagAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListTagAdd");

  late final _ffiListTagAdd =
      _ffiListTagAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListTagInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.IntPtr, ffi.Uint32, ffi.IntPtr)>>("__FfiListTagInsert");

  late final _ffiListTagInsert =
      _ffiListTagInsertPtr.asFunction<void Function(int, int, int)>();
}

/// Representing a color
class Color {
  final Api _api;
  final _Box _box;

  Color._(this._api, this._box);

  /// as rgba in u8
  List<dynamic> rgbaU8() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._colorRgbaU8(
      tmp0,
    );
    final tmp4 = tmp1.arg0;
    final tmp6 = tmp1.arg1;
    final tmp8 = tmp1.arg2;
    final tmp10 = tmp1.arg3;
    final tmp3 = tmp4;
    final tmp5 = tmp6;
    final tmp7 = tmp8;
    final tmp9 = tmp10;
    final List tmp2 = [];
    tmp2.add(tmp3);
    tmp2.add(tmp5);
    tmp2.add(tmp7);
    tmp2.add(tmp9);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

/// A news object
class News {
  final Api _api;
  final _Box _box;

  News._(this._api, this._box);

  /// get the text of the news item
  String? text() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._newsText(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// the tags on this item
  FfiListTag tags() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._newsTags(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_FfiListTag");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp4 = FfiListTag._(_api, tmp3_1);
    final tmp2 = tmp4;
    return tmp2;
  }

  /// the number of likes on this item
  int likesCount() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._newsLikesCount(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3;
    return tmp2;
  }

  /// the number of comments on this item
  int commentsCount() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._newsCommentsCount(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3;
    return tmp2;
  }

  /// if given, the specific foreground color
  Color? fgColor() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._newsFgColor(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_Color");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = Color._(_api, tmp4_1);
    return tmp2;
  }

  /// if given, the specific background color
  Color? bgColor() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._newsBgColor(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_Color");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = Color._(_api, tmp4_1);
    return tmp2;
  }

  /// if given, the image
  List<int>? image() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._newsImage(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = tmp4_0.asTypedList(tmp5).toList();
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class Tag {
  final Api _api;
  final _Box _box;

  Tag._(this._api, this._box);

  /// the title of the tag
  String title() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._tagTitle(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// dash-cased-ascii-version for usage in hashtags (no `#` at the front)
  String hashTag() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._tagHashTag(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// if given, the specific color for this tag
  Color? color() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._tagColor(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_Color");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = Color._(_api, tmp4_1);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

/// A news object
class Faq {
  final Api _api;
  final _Box _box;

  Faq._(this._api, this._box);

  /// get the title of the news item
  String title() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._faqTitle(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// get the body of the news item
  String body() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._faqBody(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// whether this object is pinned
  bool pinned() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._faqPinned(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3 > 0;
    return tmp2;
  }

  /// the tags on this item
  FfiListTag tags() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._faqTags(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_FfiListTag");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp4 = FfiListTag._(_api, tmp3_1);
    final tmp2 = tmp4;
    return tmp2;
  }

  /// the number of likes on this item
  int likesCount() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._faqLikesCount(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3;
    return tmp2;
  }

  /// the number of comments on this item
  int commentsCount() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._faqCommentsCount(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3;
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class UserId {
  final Api _api;
  final _Box _box;

  UserId._(this._api, this._box);

  String toString() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._userIdToString(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class EventId {
  final Api _api;
  final _Box _box;

  EventId._(this._api, this._box);

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

/// A room Message metadata and content
class RoomMessage {
  final Api _api;
  final _Box _box;

  RoomMessage._(this._api, this._box);

  /// Unique ID of this event
  String eventId() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomMessageEventId(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// The User, who sent that event
  String sender() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomMessageSender(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// the body of the massage - fallback string reprensentation
  String body() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomMessageBody(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// the server receiving timestamp
  int originServerTs() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomMessageOriginServerTs(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3;
    return tmp2;
  }

  /// the type of massage, like audio, text, image, file, etc
  String msgtype() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomMessageMsgtype(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// contains source data, name, mimetype, size, width and height
  ImageDescription? imageDescription() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomMessageImageDescription(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_ImageDescription");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = ImageDescription._(_api, tmp4_1);
    return tmp2;
  }

  /// contains source data, name, mimetype and size
  FileDescription? fileDescription() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomMessageFileDescription(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_FileDescription");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = FileDescription._(_api, tmp4_1);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class ImageDescription {
  final Api _api;
  final _Box _box;

  ImageDescription._(this._api, this._box);

  /// file name
  String name() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._imageDescriptionName(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// MIME
  String? mimetype() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._imageDescriptionMimetype(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// file size in bytes
  int? size() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._imageDescriptionSize(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final tmp2 = tmp4;
    return tmp2;
  }

  /// image width
  int? width() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._imageDescriptionWidth(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final tmp2 = tmp4;
    return tmp2;
  }

  /// image height
  int? height() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._imageDescriptionHeight(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final tmp2 = tmp4;
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class FileDescription {
  final Api _api;
  final _Box _box;

  FileDescription._(this._api, this._box);

  /// file name
  String name() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._fileDescriptionName(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// MIME
  String? mimetype() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._fileDescriptionMimetype(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// file size in bytes
  int? size() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._fileDescriptionSize(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final tmp2 = tmp4;
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

/// Timeline with Room Events
class TimelineStream {
  final Api _api;
  final _Box _box;

  TimelineStream._(this._api, this._box);

  /// Fires whenever a new event arrived
  Future<RoomMessage> next() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._timelineStreamNext(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__TimelineStream_next_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__timelineStreamNextFuturePoll);
    return tmp2;
  }

  /// Get the next count messages backwards,
  Future<FfiListRoomMessage> paginateBackwards(
    int count,
  ) {
    final tmp1 = count;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1;
    final tmp3 = _api._timelineStreamPaginateBackwards(
      tmp0,
      tmp2,
    );
    final tmp5 = tmp3;
    final ffi.Pointer<ffi.Void> tmp5_0 = ffi.Pointer.fromAddress(tmp5);
    final tmp5_1 =
        _Box(_api, tmp5_0, "__TimelineStream_paginate_backwards_future_drop");
    tmp5_1._finalizer = _api._registerFinalizer(tmp5_1);
    final tmp4 =
        _nativeFuture(tmp5_1, _api.__timelineStreamPaginateBackwardsFuturePoll);
    return tmp4;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class Conversation {
  final Api _api;
  final _Box _box;

  Conversation._(this._api, this._box);

  /// Calculate the display name
  Future<String> displayName() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._conversationDisplayName(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 =
        _Box(_api, tmp3_0, "__Conversation_display_name_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 =
        _nativeFuture(tmp3_1, _api.__conversationDisplayNameFuturePoll);
    return tmp2;
  }

  /// The avatar of the room
  Future<FfiBufferUint8> avatar() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._conversationAvatar(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Conversation_avatar_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__conversationAvatarFuturePoll);
    return tmp2;
  }

  /// the members currently in the room
  Future<FfiListMember> activeMembers() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._conversationActiveMembers(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 =
        _Box(_api, tmp3_0, "__Conversation_active_members_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 =
        _nativeFuture(tmp3_1, _api.__conversationActiveMembersFuturePoll);
    return tmp2;
  }

  /// Get the timeline for the room
  Future<TimelineStream> timeline() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._conversationTimeline(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Conversation_timeline_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__conversationTimelineFuturePoll);
    return tmp2;
  }

  Future<Member> getMember(
    UserId userId,
  ) {
    final tmp1 = userId;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1._box.move();
    final tmp3 = _api._conversationGetMember(
      tmp0,
      tmp2,
    );
    final tmp5 = tmp3;
    final ffi.Pointer<ffi.Void> tmp5_0 = ffi.Pointer.fromAddress(tmp5);
    final tmp5_1 = _Box(_api, tmp5_0, "__Conversation_get_member_future_drop");
    tmp5_1._finalizer = _api._registerFinalizer(tmp5_1);
    final tmp4 = _nativeFuture(tmp5_1, _api.__conversationGetMemberFuturePoll);
    return tmp4;
  }

  /// The last message sent to the room
  Future<RoomMessage> latestMessage() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._conversationLatestMessage(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 =
        _Box(_api, tmp3_0, "__Conversation_latest_message_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 =
        _nativeFuture(tmp3_1, _api.__conversationLatestMessageFuturePoll);
    return tmp2;
  }

  /// Activate typing notice for this room
  /// The typing notice remains active for 4s. It can be deactivate at any
  /// point by setting typing to false. If this method is called while the
  /// typing notice is active nothing will happen. This method can be called
  /// on every key stroke, since it will do nothing while typing is active.
  Future<bool> typingNotice(
    bool typing,
  ) {
    final tmp1 = typing;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1 ? 1 : 0;
    final tmp3 = _api._conversationTypingNotice(
      tmp0,
      tmp2,
    );
    final tmp5 = tmp3;
    final ffi.Pointer<ffi.Void> tmp5_0 = ffi.Pointer.fromAddress(tmp5);
    final tmp5_1 =
        _Box(_api, tmp5_0, "__Conversation_typing_notice_future_drop");
    tmp5_1._finalizer = _api._registerFinalizer(tmp5_1);
    final tmp4 =
        _nativeFuture(tmp5_1, _api.__conversationTypingNoticeFuturePoll);
    return tmp4;
  }

  /// Send a request to notify this room that the user has read specific event.
  Future<bool> readReceipt(
    String eventId,
  ) {
    final tmp1 = eventId;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._conversationReadReceipt(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 =
        _Box(_api, tmp7_0, "__Conversation_read_receipt_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 =
        _nativeFuture(tmp7_1, _api.__conversationReadReceiptFuturePoll);
    return tmp6;
  }

  /// Send a simple plain text message to the room
  /// returns the event_id as given by the server of the event soon after
  /// received over timeline().next()
  Future<String> sendPlainMessage(
    String textMessage,
  ) {
    final tmp1 = textMessage;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._conversationSendPlainMessage(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 =
        _Box(_api, tmp7_0, "__Conversation_send_plain_message_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 =
        _nativeFuture(tmp7_1, _api.__conversationSendPlainMessageFuturePoll);
    return tmp6;
  }

  Future<String> sendImageMessage(
    String uri,
    String name,
    String mimetype,
    int? size,
    int? width,
    int? height,
  ) {
    final tmp1 = uri;
    final tmp5 = name;
    final tmp9 = mimetype;
    final tmp13 = size;
    final tmp17 = width;
    final tmp21 = height;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    var tmp10 = 0;
    var tmp11 = 0;
    var tmp12 = 0;
    var tmp14 = 0;
    var tmp16 = 0;
    var tmp18 = 0;
    var tmp20 = 0;
    var tmp22 = 0;
    var tmp24 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    final tmp9_0 = utf8.encode(tmp9);
    tmp11 = tmp9_0.length;
    final ffi.Pointer<ffi.Uint8> tmp10_0 = _api.__allocate(tmp11 * 1, 1);
    final Uint8List tmp10_1 = tmp10_0.asTypedList(tmp11);
    tmp10_1.setAll(0, tmp9_0);
    tmp10 = tmp10_0.address;
    tmp12 = tmp11;
    if (tmp13 == null) {
      tmp14 = 0;
    } else {
      tmp14 = 1;
      final tmp15 = tmp13;
      tmp16 = tmp15;
    }
    if (tmp17 == null) {
      tmp18 = 0;
    } else {
      tmp18 = 1;
      final tmp19 = tmp17;
      tmp20 = tmp19;
    }
    if (tmp21 == null) {
      tmp22 = 0;
    } else {
      tmp22 = 1;
      final tmp23 = tmp21;
      tmp24 = tmp23;
    }
    final tmp25 = _api._conversationSendImageMessage(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
      tmp10,
      tmp11,
      tmp12,
      tmp14,
      tmp16,
      tmp18,
      tmp20,
      tmp22,
      tmp24,
    );
    final tmp27 = tmp25;
    final ffi.Pointer<ffi.Void> tmp27_0 = ffi.Pointer.fromAddress(tmp27);
    final tmp27_1 =
        _Box(_api, tmp27_0, "__Conversation_send_image_message_future_drop");
    tmp27_1._finalizer = _api._registerFinalizer(tmp27_1);
    final tmp26 =
        _nativeFuture(tmp27_1, _api.__conversationSendImageMessageFuturePoll);
    return tmp26;
  }

  /// decrypted image file data
  /// The reason that this function belongs to room object is because ChatScreen keeps it as member variable
  /// If this function belongs to message object, we may have to load too many message objects in ChatScreen
  Future<FfiBufferUint8> imageBinary(
    String eventId,
  ) {
    final tmp1 = eventId;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._conversationImageBinary(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 =
        _Box(_api, tmp7_0, "__Conversation_image_binary_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 =
        _nativeFuture(tmp7_1, _api.__conversationImageBinaryFuturePoll);
    return tmp6;
  }

  Future<String> sendFileMessage(
    String uri,
    String name,
    String mimetype,
    int size,
  ) {
    final tmp1 = uri;
    final tmp5 = name;
    final tmp9 = mimetype;
    final tmp13 = size;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    var tmp10 = 0;
    var tmp11 = 0;
    var tmp12 = 0;
    var tmp14 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    final tmp9_0 = utf8.encode(tmp9);
    tmp11 = tmp9_0.length;
    final ffi.Pointer<ffi.Uint8> tmp10_0 = _api.__allocate(tmp11 * 1, 1);
    final Uint8List tmp10_1 = tmp10_0.asTypedList(tmp11);
    tmp10_1.setAll(0, tmp9_0);
    tmp10 = tmp10_0.address;
    tmp12 = tmp11;
    tmp14 = tmp13;
    final tmp15 = _api._conversationSendFileMessage(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
      tmp10,
      tmp11,
      tmp12,
      tmp14,
    );
    final tmp17 = tmp15;
    final ffi.Pointer<ffi.Void> tmp17_0 = ffi.Pointer.fromAddress(tmp17);
    final tmp17_1 =
        _Box(_api, tmp17_0, "__Conversation_send_file_message_future_drop");
    tmp17_1._finalizer = _api._registerFinalizer(tmp17_1);
    final tmp16 =
        _nativeFuture(tmp17_1, _api.__conversationSendFileMessageFuturePoll);
    return tmp16;
  }

  /// save file in specified path
  Future<String> saveFile(
    String eventId,
    String dirPath,
  ) {
    final tmp1 = eventId;
    final tmp5 = dirPath;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    final tmp9 = _api._conversationSaveFile(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
    );
    final tmp11 = tmp9;
    final ffi.Pointer<ffi.Void> tmp11_0 = ffi.Pointer.fromAddress(tmp11);
    final tmp11_1 = _Box(_api, tmp11_0, "__Conversation_save_file_future_drop");
    tmp11_1._finalizer = _api._registerFinalizer(tmp11_1);
    final tmp10 = _nativeFuture(tmp11_1, _api.__conversationSaveFileFuturePoll);
    return tmp10;
  }

  /// get the path that file was saved
  Future<String> filePath(
    String eventId,
  ) {
    final tmp1 = eventId;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._conversationFilePath(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "__Conversation_file_path_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 = _nativeFuture(tmp7_1, _api.__conversationFilePathFuturePoll);
    return tmp6;
  }

  /// get the id of user that invited user at past
  Future<String> getInviter() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._conversationGetInviter(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Conversation_get_inviter_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__conversationGetInviterFuturePoll);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class Group {
  final Api _api;
  final _Box _box;

  Group._(this._api, this._box);

  /// Calculate the display name
  Future<String> displayName() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._groupDisplayName(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Group_display_name_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__groupDisplayNameFuturePoll);
    return tmp2;
  }

  /// The avatar of the Group
  Future<FfiBufferUint8> avatar() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._groupAvatar(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Group_avatar_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__groupAvatarFuturePoll);
    return tmp2;
  }

  /// the members currently in the group
  Future<FfiListMember> activeMembers() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._groupActiveMembers(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Group_active_members_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__groupActiveMembersFuturePoll);
    return tmp2;
  }

  Future<Member> getMember(
    UserId user,
  ) {
    final tmp1 = user;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1._box.move();
    final tmp3 = _api._groupGetMember(
      tmp0,
      tmp2,
    );
    final tmp5 = tmp3;
    final ffi.Pointer<ffi.Void> tmp5_0 = ffi.Pointer.fromAddress(tmp5);
    final tmp5_1 = _Box(_api, tmp5_0, "__Group_get_member_future_drop");
    tmp5_1._finalizer = _api._registerFinalizer(tmp5_1);
    final tmp4 = _nativeFuture(tmp5_1, _api.__groupGetMemberFuturePoll);
    return tmp4;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class Member {
  final Api _api;
  final _Box _box;

  Member._(this._api, this._box);

  /// The avatar of the member
  Future<FfiBufferUint8> avatar() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._memberAvatar(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Member_avatar_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__memberAvatarFuturePoll);
    return tmp2;
  }

  /// Calculate the display name
  String? displayName() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._memberDisplayName(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// Full user_id
  UserId userId() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._memberUserId(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_UserId");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = UserId._(_api, tmp3_1);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class Account {
  final Api _api;
  final _Box _box;

  Account._(this._api, this._box);

  /// The display_name of the account
  Future<String> displayName() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._accountDisplayName(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Account_display_name_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__accountDisplayNameFuturePoll);
    return tmp2;
  }

  /// Change the display name of the account
  Future<bool> setDisplayName(
    String name,
  ) {
    final tmp1 = name;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._accountSetDisplayName(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "__Account_set_display_name_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 = _nativeFuture(tmp7_1, _api.__accountSetDisplayNameFuturePoll);
    return tmp6;
  }

  /// The avatar of the client
  Future<FfiBufferUint8> avatar() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._accountAvatar(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Account_avatar_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__accountAvatarFuturePoll);
    return tmp2;
  }

  /// Change the avatar of the account
  /// provide the c_type as MIME, e.g. `image/jpeg`
  Future<bool> setAvatar(
    String cType,
    List<int> data,
  ) {
    final tmp1 = cType;
    final tmp5 = data;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    tmp7 = tmp5.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    final tmp9 = _api._accountSetAvatar(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
    );
    final tmp11 = tmp9;
    final ffi.Pointer<ffi.Void> tmp11_0 = ffi.Pointer.fromAddress(tmp11);
    final tmp11_1 = _Box(_api, tmp11_0, "__Account_set_avatar_future_drop");
    tmp11_1._finalizer = _api._registerFinalizer(tmp11_1);
    final tmp10 = _nativeFuture(tmp11_1, _api.__accountSetAvatarFuturePoll);
    return tmp10;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

/// Main entry point for `effektio`.
class Client {
  final Api _api;
  final _Box _box;

  Client._(this._api, this._box);

  /// Get the restore token for this session
  Future<String> restoreToken() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientRestoreToken(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Client_restore_token_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__clientRestoreTokenFuturePoll);
    return tmp2;
  }

  /// Whether the client is registered as a guest account
  bool isGuest() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientIsGuest(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3 > 0;
    return tmp2;
  }

  /// Whether the client has finished a first sync run
  bool hasFirstSynced() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientHasFirstSynced(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3 > 0;
    return tmp2;
  }

  /// Whether the client is syncing
  bool isSyncing() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientIsSyncing(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3 > 0;
    return tmp2;
  }

  /// Whether the client is logged in
  Future<bool> loggedIn() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientLoggedIn(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Client_logged_in_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__clientLoggedInFuturePoll);
    return tmp2;
  }

  /// return the account of the logged in user, if given
  Future<Account> account() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientAccount(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Client_account_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__clientAccountFuturePoll);
    return tmp2;
  }

  Future<String> deviceId() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientDeviceId(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Client_device_id_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__clientDeviceIdFuturePoll);
    return tmp2;
  }

  /// The user_id of the client
  /// deprecated, please use account() instead.
  Future<UserId> userId() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientUserId(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Client_user_id_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__clientUserIdFuturePoll);
    return tmp2;
  }

  /// The display_name of the client
  /// deprecated, please use account() instead.
  Future<String> displayName() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientDisplayName(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Client_display_name_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__clientDisplayNameFuturePoll);
    return tmp2;
  }

  /// The avatar of the client
  /// deprecated, please use account() instead.
  Future<FfiBufferUint8> avatar() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientAvatar(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Client_avatar_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__clientAvatarFuturePoll);
    return tmp2;
  }

  /// The conversations the user is involved in
  Future<FfiListConversation> conversations() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientConversations(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Client_conversations_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__clientConversationsFuturePoll);
    return tmp2;
  }

  /// The groups the user is part of
  Future<FfiListGroup> groups() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientGroups(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Client_groups_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__clientGroupsFuturePoll);
    return tmp2;
  }

  /// Get the latest News for the client
  Future<FfiListNews> latestNews() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientLatestNews(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Client_latest_news_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__clientLatestNewsFuturePoll);
    return tmp2;
  }

  /// Get the FAQs for the client
  Future<FfiListFaq> faqs() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientFaqs(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Client_faqs_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__clientFaqsFuturePoll);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class _InitLoggingReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _ColorRgbaU8Return extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Uint8()
  external int arg2;
  @ffi.Uint8()
  external int arg3;
}

class _NewsTextReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _NewsFgColorReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _NewsBgColorReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _NewsImageReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _TagTitleReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _TagHashTagReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _TagColorReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _FaqTitleReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _FaqBodyReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _UserIdToStringReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _RoomMessageEventIdReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _RoomMessageSenderReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _RoomMessageBodyReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _RoomMessageMsgtypeReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _RoomMessageImageDescriptionReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _RoomMessageFileDescriptionReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _ImageDescriptionNameReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _ImageDescriptionMimetypeReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _ImageDescriptionSizeReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
}

class _ImageDescriptionWidthReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
}

class _ImageDescriptionHeightReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
}

class _FileDescriptionNameReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _FileDescriptionMimetypeReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _FileDescriptionSizeReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
}

class _MemberDisplayNameReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _LoginNewClientFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _LoginWithTokenFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _GuestClientFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _RegisterWithRegistrationTokenFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _TimelineStreamNextFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _TimelineStreamPaginateBackwardsFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationDisplayNameFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
  @ffi.Uint64()
  external int arg6;
  @ffi.Uint64()
  external int arg7;
}

class _ConversationAvatarFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationActiveMembersFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationTimelineFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationGetMemberFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationLatestMessageFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationTypingNoticeFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _ConversationReadReceiptFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _ConversationSendPlainMessageFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
  @ffi.Uint64()
  external int arg6;
  @ffi.Uint64()
  external int arg7;
}

class _ConversationSendImageMessageFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
  @ffi.Uint64()
  external int arg6;
  @ffi.Uint64()
  external int arg7;
}

class _ConversationImageBinaryFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationSendFileMessageFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
  @ffi.Uint64()
  external int arg6;
  @ffi.Uint64()
  external int arg7;
}

class _ConversationSaveFileFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
  @ffi.Uint64()
  external int arg6;
  @ffi.Uint64()
  external int arg7;
}

class _ConversationFilePathFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
  @ffi.Uint64()
  external int arg6;
  @ffi.Uint64()
  external int arg7;
}

class _ConversationGetInviterFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
  @ffi.Uint64()
  external int arg6;
  @ffi.Uint64()
  external int arg7;
}

class _GroupDisplayNameFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
  @ffi.Uint64()
  external int arg6;
  @ffi.Uint64()
  external int arg7;
}

class _GroupAvatarFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _GroupActiveMembersFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _GroupGetMemberFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _MemberAvatarFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _AccountDisplayNameFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
  @ffi.Uint64()
  external int arg6;
  @ffi.Uint64()
  external int arg7;
}

class _AccountSetDisplayNameFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _AccountAvatarFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _AccountSetAvatarFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _ClientRestoreTokenFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
  @ffi.Uint64()
  external int arg6;
  @ffi.Uint64()
  external int arg7;
}

class _ClientLoggedInFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
}

class _ClientAccountFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ClientDeviceIdFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
  @ffi.Uint64()
  external int arg6;
  @ffi.Uint64()
  external int arg7;
}

class _ClientUserIdFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ClientDisplayNameFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
  @ffi.Uint64()
  external int arg6;
  @ffi.Uint64()
  external int arg7;
}

class _ClientAvatarFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ClientConversationsFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ClientGroupsFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ClientLatestNewsFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ClientFaqsFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class FfiListConversation extends Iterable<Conversation>
    implements CustomIterable<Conversation> {
  final Api _api;
  final _Box _box;

  FfiListConversation._(this._api, this._box);

  @override
  Iterator<Conversation> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListConversationLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  Conversation elementAt(int index) {
    final address = _api._ffiListConversationElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return Conversation._(_api, reference);
  }

  Conversation operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  Conversation remove(int index) {
    final address = _api._ffiListConversationRemove(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_Conversation");
    reference._finalizer = _api._registerFinalizer(reference);
    return Conversation._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(Conversation element) {
    _api._ffiListConversationAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, Conversation element) {
    _api._ffiListConversationInsert(
        _box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}

class FfiListFaq extends Iterable<Faq> implements CustomIterable<Faq> {
  final Api _api;
  final _Box _box;

  FfiListFaq._(this._api, this._box);

  @override
  Iterator<Faq> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListFaqLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  Faq elementAt(int index) {
    final address = _api._ffiListFaqElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return Faq._(_api, reference);
  }

  Faq operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  Faq remove(int index) {
    final address = _api._ffiListFaqRemove(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_Faq");
    reference._finalizer = _api._registerFinalizer(reference);
    return Faq._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(Faq element) {
    _api._ffiListFaqAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, Faq element) {
    _api._ffiListFaqInsert(_box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}

class FfiListGroup extends Iterable<Group> implements CustomIterable<Group> {
  final Api _api;
  final _Box _box;

  FfiListGroup._(this._api, this._box);

  @override
  Iterator<Group> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListGroupLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  Group elementAt(int index) {
    final address = _api._ffiListGroupElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return Group._(_api, reference);
  }

  Group operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  Group remove(int index) {
    final address = _api._ffiListGroupRemove(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_Group");
    reference._finalizer = _api._registerFinalizer(reference);
    return Group._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(Group element) {
    _api._ffiListGroupAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, Group element) {
    _api._ffiListGroupInsert(_box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}

class FfiListMember extends Iterable<Member> implements CustomIterable<Member> {
  final Api _api;
  final _Box _box;

  FfiListMember._(this._api, this._box);

  @override
  Iterator<Member> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListMemberLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  Member elementAt(int index) {
    final address = _api._ffiListMemberElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return Member._(_api, reference);
  }

  Member operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  Member remove(int index) {
    final address = _api._ffiListMemberRemove(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_Member");
    reference._finalizer = _api._registerFinalizer(reference);
    return Member._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(Member element) {
    _api._ffiListMemberAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, Member element) {
    _api._ffiListMemberInsert(_box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}

class FfiListNews extends Iterable<News> implements CustomIterable<News> {
  final Api _api;
  final _Box _box;

  FfiListNews._(this._api, this._box);

  @override
  Iterator<News> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListNewsLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  News elementAt(int index) {
    final address = _api._ffiListNewsElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return News._(_api, reference);
  }

  News operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  News remove(int index) {
    final address = _api._ffiListNewsRemove(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_News");
    reference._finalizer = _api._registerFinalizer(reference);
    return News._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(News element) {
    _api._ffiListNewsAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, News element) {
    _api._ffiListNewsInsert(_box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}

class FfiListRoomMessage extends Iterable<RoomMessage>
    implements CustomIterable<RoomMessage> {
  final Api _api;
  final _Box _box;

  FfiListRoomMessage._(this._api, this._box);

  @override
  Iterator<RoomMessage> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListRoomMessageLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  RoomMessage elementAt(int index) {
    final address = _api._ffiListRoomMessageElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return RoomMessage._(_api, reference);
  }

  RoomMessage operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  RoomMessage remove(int index) {
    final address = _api._ffiListRoomMessageRemove(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_RoomMessage");
    reference._finalizer = _api._registerFinalizer(reference);
    return RoomMessage._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(RoomMessage element) {
    _api._ffiListRoomMessageAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, RoomMessage element) {
    _api._ffiListRoomMessageInsert(_box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}

class FfiListTag extends Iterable<Tag> implements CustomIterable<Tag> {
  final Api _api;
  final _Box _box;

  FfiListTag._(this._api, this._box);

  @override
  Iterator<Tag> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListTagLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  Tag elementAt(int index) {
    final address = _api._ffiListTagElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return Tag._(_api, reference);
  }

  Tag operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  Tag remove(int index) {
    final address = _api._ffiListTagRemove(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_Tag");
    reference._finalizer = _api._registerFinalizer(reference);
    return Tag._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(Tag element) {
    _api._ffiListTagAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, Tag element) {
    _api._ffiListTagInsert(_box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}
