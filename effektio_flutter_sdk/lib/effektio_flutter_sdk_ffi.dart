// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by "ffi-gen".

library effektio;

import "dart:async";
import "dart:convert";
import "dart:ffi" as ffi;
import "dart:io" show Platform;
import "dart:isolate";
import "dart:typed_data";

class _DartApiEntry extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> name;
  external ffi.Pointer<ffi.Void> ptr;
}

class _DartApi extends ffi.Struct {
  @ffi.Int32()
  external int major;

  @ffi.Int32()
  external int minor;

  external ffi.Pointer<_DartApiEntry> functions;
}

ffi.Pointer<T> _lookupDartSymbol<T extends ffi.NativeType>(String symbol) {
  final ffi.Pointer<_DartApi> api = ffi.NativeApi.initializeApiDLData.cast();
  final ffi.Pointer<_DartApiEntry> functions = api.ref.functions;
  for (var i = 0; i < 100; i++) {
    final func = functions.elementAt(i).ref;
    var symbol2 = "";
    var j = 0;
    while (func.name.elementAt(j).value != 0) {
      symbol2 += String.fromCharCode(func.name.elementAt(j).value);
      j += 1;
    }
    if (symbol == symbol2) {
      return func.ptr.cast();
    }
  }
  throw "symbol not found";
}

class _Box {
  final Api _api;
  final ffi.Pointer<ffi.Void> _ptr;
  final String _dropSymbol;
  bool _dropped;
  bool _moved;
  ffi.Pointer<ffi.Void> _finalizer = ffi.Pointer.fromAddress(0);

  _Box(this._api, this._ptr, this._dropSymbol)
      : _dropped = false,
        _moved = false;

  late final _dropPtr = _api._lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(_dropSymbol);

  late final _drop = _dropPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  int borrow() {
    if (_dropped) {
      throw StateError("use after free");
    }
    if (_moved) {
      throw StateError("use after move");
    }
    return _ptr.address;
  }

  int move() {
    if (_dropped) {
      throw StateError("use after free");
    }
    if (_moved) {
      throw StateError("can't move value twice");
    }
    _moved = true;
    _api._unregisterFinalizer(this);
    return _ptr.address;
  }

  void drop() {
    if (_dropped) {
      throw StateError("double free");
    }
    if (_moved) {
      throw StateError("can't drop moved value");
    }
    _dropped = true;
    _api._unregisterFinalizer(this);
    _drop(ffi.Pointer.fromAddress(0), _ptr);
  }
}

class FfiBufferInt8 {
  final Api _api;
  final _Box _box;

  FfiBufferInt8._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  Int8List toInt8List() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer).address;
    final size = _api._ffiBufferSize(buffer) ~/ 1;
    return ffi.Pointer<ffi.Int8>.fromAddress(addressRaw).asTypedList(size);
  }
}

class FfiBufferUint8 {
  final Api _api;
  final _Box _box;

  FfiBufferUint8._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  Uint8List toUint8List() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer).address;
    final size = _api._ffiBufferSize(buffer) ~/ 1;
    return ffi.Pointer<ffi.Uint8>.fromAddress(addressRaw).asTypedList(size);
  }
}

class FfiBufferInt16 {
  final Api _api;
  final _Box _box;

  FfiBufferInt16._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  Int16List toInt16List() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer).address;
    final size = _api._ffiBufferSize(buffer) ~/ 2;
    return ffi.Pointer<ffi.Int16>.fromAddress(addressRaw).asTypedList(size);
  }
}

class FfiBufferUint16 {
  final Api _api;
  final _Box _box;

  FfiBufferUint16._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  Uint16List toUint16List() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer).address;
    final size = _api._ffiBufferSize(buffer) ~/ 2;
    return ffi.Pointer<ffi.Uint16>.fromAddress(addressRaw).asTypedList(size);
  }
}

class FfiBufferInt32 {
  final Api _api;
  final _Box _box;

  FfiBufferInt32._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  Int32List toInt32List() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer).address;
    final size = _api._ffiBufferSize(buffer) ~/ 4;
    return ffi.Pointer<ffi.Int32>.fromAddress(addressRaw).asTypedList(size);
  }
}

class FfiBufferUint32 {
  final Api _api;
  final _Box _box;

  FfiBufferUint32._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  Uint32List toUint32List() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer).address;
    final size = _api._ffiBufferSize(buffer) ~/ 4;
    return ffi.Pointer<ffi.Uint32>.fromAddress(addressRaw).asTypedList(size);
  }
}

class FfiBufferInt64 {
  final Api _api;
  final _Box _box;

  FfiBufferInt64._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  Int64List toInt64List() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer).address;
    final size = _api._ffiBufferSize(buffer) ~/ 8;
    return ffi.Pointer<ffi.Int64>.fromAddress(addressRaw).asTypedList(size);
  }
}

class FfiBufferUint64 {
  final Api _api;
  final _Box _box;

  FfiBufferUint64._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  Uint64List toUint64List() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer).address;
    final size = _api._ffiBufferSize(buffer) ~/ 8;
    return ffi.Pointer<ffi.Uint64>.fromAddress(addressRaw).asTypedList(size);
  }
}

class FfiBufferFloat32 {
  final Api _api;
  final _Box _box;

  FfiBufferFloat32._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  Float32List toFloat32List() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer).address;
    final size = _api._ffiBufferSize(buffer) ~/ 4;
    return ffi.Pointer<ffi.Float>.fromAddress(addressRaw).asTypedList(size);
  }
}

class FfiBufferFloat64 {
  final Api _api;
  final _Box _box;

  FfiBufferFloat64._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  Float64List toFloat64List() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer).address;
    final size = _api._ffiBufferSize(buffer) ~/ 8;
    return ffi.Pointer<ffi.Double>.fromAddress(addressRaw).asTypedList(size);
  }
}

/// Implements Iterable and Iterator for a rust iterator.
class Iter<T> extends Iterable<T> implements Iterator<T> {
  final _Box _box;
  final T? Function(int) _next;

  Iter._(this._box, this._next);

  @override
  Iterator<T> get iterator => this;

  T? _current;

  @override
  T get current => _current!;

  @override
  bool moveNext() {
    final next = _next(_box.borrow());
    if (next == null) {
      return false;
    } else {
      _current = next;
      return true;
    }
  }

  void drop() {
    _box.drop();
  }
}

abstract class CustomIterable<T> {
  int get length;
  T elementAt(int index);
}

class CustomIterator<T, U extends CustomIterable<T>> implements Iterator<T> {
  final U _iterable;
  int _currentIndex = -1;

  CustomIterator(this._iterable);

  @override
  T get current => _iterable.elementAt(_currentIndex);

  @override
  bool moveNext() {
    _currentIndex++;
    return _currentIndex < _iterable.length;
  }
}

Future<T> _nativeFuture<T>(_Box box, T? Function(int, int, int) nativePoll) {
  final completer = Completer<T>();
  final rx = ReceivePort();
  void poll() {
    try {
      final ret = nativePoll(box.borrow(), ffi.NativeApi.postCObject.address,
          rx.sendPort.nativePort);
      if (ret == null) {
        return;
      }
      completer.complete(ret);
    } catch (err) {
      completer.completeError(err);
    }
    rx.close();
    box.drop();
  }

  rx.listen((dynamic _message) => poll());
  poll();
  return completer.future;
}

Stream<T> _nativeStream<T>(
    _Box box, T? Function(int, int, int, int) nativePoll) {
  final controller = StreamController<T>();
  final rx = ReceivePort();
  final done = ReceivePort();
  void poll() {
    try {
      final ret = nativePoll(
        box.borrow(),
        ffi.NativeApi.postCObject.address,
        rx.sendPort.nativePort,
        done.sendPort.nativePort,
      );
      if (ret != null) {
        controller.add(ret);
      }
    } catch (err) {
      controller.addError(err);
    }
  }

  void close() {
    rx.close();
    done.close();
    box.drop();
  }

  controller.onCancel = close;
  rx.listen((dynamic _message) => poll());
  done.listen((dynamic _message) => controller.close());
  poll();
  return controller.stream;
}

/// Main entry point to library.
class Api {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Api(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Api.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// The library is loaded from the executable.
  factory Api.loadStatic() {
    return Api(ffi.DynamicLibrary.executable());
  }

  /// The library is dynamically loaded.
  factory Api.loadDynamic(String name) {
    return Api(ffi.DynamicLibrary.open(name));
  }

  /// The library is loaded based on platform conventions.
  factory Api.load() {
    String? name;
    if (Platform.isLinux) name = "libeffektio.so";
    if (Platform.isAndroid) name = "libeffektio.so";
    if (Platform.isMacOS) name = "libeffektio.dylib";
    if (Platform.isIOS) name = "";
    if (Platform.isWindows) name = "effektio.dll";
    if (name == null) {
      throw UnsupportedError("\"This platform is not supported.\"");
    }
    if (name == "") {
      return Api.loadStatic();
    } else {
      return Api.loadDynamic(name);
    }
  }

  late final _registerPtr = _lookupDartSymbol<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Handle, ffi.Pointer<ffi.Void>,
              ffi.IntPtr, ffi.Pointer<ffi.Void>)>>("Dart_NewFinalizableHandle");

  late final _register = _registerPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          Object, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> _registerFinalizer(_Box boxed) {
    return _register(boxed, boxed._ptr, 42, boxed._dropPtr.cast());
  }

  late final _unregisterPtr = _lookupDartSymbol<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Handle)>>("Dart_DeleteFinalizableHandle");

  late final _unregister =
      _unregisterPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, _Box)>();

  void _unregisterFinalizer(_Box boxed) {
    _unregister(boxed._finalizer, boxed);
  }

  ffi.Pointer<T> __allocate<T extends ffi.NativeType>(
      int byteCount, int alignment) {
    return _allocate(byteCount, alignment).cast();
  }

  void __deallocate<T extends ffi.NativeType>(
      ffi.Pointer pointer, int byteCount, int alignment) {
    _deallocate(pointer.cast(), byteCount, alignment);
  }

  /// Initialize logging
  void initLogging(
    String? filter,
  ) {
    final tmp0 = filter;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp5 = 0;
    if (tmp0 == null) {
      tmp1 = 0;
    } else {
      tmp1 = 1;
      final tmp2 = tmp0;
      final tmp2_0 = utf8.encode(tmp2);
      tmp4 = tmp2_0.length;
      final ffi.Pointer<ffi.Uint8> tmp3_0 = this.__allocate(tmp4 * 1, 1);
      final Uint8List tmp3_1 = tmp3_0.asTypedList(tmp4);
      tmp3_1.setAll(0, tmp2_0);
      tmp3 = tmp3_0.address;
      tmp5 = tmp4;
    }
    final tmp6 = _initLogging(
      tmp1,
      tmp3,
      tmp4,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    if (tmp8 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp9_0 = ffi.Pointer.fromAddress(tmp9);
      final tmp8_0 = utf8.decode(tmp9_0.asTypedList(tmp10));
      if (tmp10 > 0) {
        final ffi.Pointer<ffi.Void> tmp9_0;
        tmp9_0 = ffi.Pointer.fromAddress(tmp9);
        this.__deallocate(tmp9_0, tmp11, 1);
      }
      throw tmp8_0;
    }
    return;
  }

  /// Create a new client for homeserver at url with storage at data_path
  Future<Client> loginNewClient(
    String basepath,
    String username,
    String password,
  ) {
    final tmp0 = basepath;
    final tmp4 = username;
    final tmp8 = password;
    var tmp1 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp9 = 0;
    var tmp10 = 0;
    var tmp11 = 0;
    final tmp0_0 = utf8.encode(tmp0);
    tmp2 = tmp0_0.length;
    final ffi.Pointer<ffi.Uint8> tmp1_0 = this.__allocate(tmp2 * 1, 1);
    final Uint8List tmp1_1 = tmp1_0.asTypedList(tmp2);
    tmp1_1.setAll(0, tmp0_0);
    tmp1 = tmp1_0.address;
    tmp3 = tmp2;
    final tmp4_0 = utf8.encode(tmp4);
    tmp6 = tmp4_0.length;
    final ffi.Pointer<ffi.Uint8> tmp5_0 = this.__allocate(tmp6 * 1, 1);
    final Uint8List tmp5_1 = tmp5_0.asTypedList(tmp6);
    tmp5_1.setAll(0, tmp4_0);
    tmp5 = tmp5_0.address;
    tmp7 = tmp6;
    final tmp8_0 = utf8.encode(tmp8);
    tmp10 = tmp8_0.length;
    final ffi.Pointer<ffi.Uint8> tmp9_0 = this.__allocate(tmp10 * 1, 1);
    final Uint8List tmp9_1 = tmp9_0.asTypedList(tmp10);
    tmp9_1.setAll(0, tmp8_0);
    tmp9 = tmp9_0.address;
    tmp11 = tmp10;
    final tmp12 = _loginNewClient(
      tmp1,
      tmp2,
      tmp3,
      tmp5,
      tmp6,
      tmp7,
      tmp9,
      tmp10,
      tmp11,
    );
    final tmp14 = tmp12;
    final ffi.Pointer<ffi.Void> tmp14_0 = ffi.Pointer.fromAddress(tmp14);
    final tmp14_1 = _Box(this, tmp14_0, "__login_new_client_future_drop");
    tmp14_1._finalizer = this._registerFinalizer(tmp14_1);
    final tmp13 = _nativeFuture(tmp14_1, this.__loginNewClientFuturePoll);
    return tmp13;
  }

  /// Create a new client from the restore token
  Future<Client> loginWithToken(
    String basepath,
    String restoreToken,
  ) {
    final tmp0 = basepath;
    final tmp4 = restoreToken;
    var tmp1 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    final tmp0_0 = utf8.encode(tmp0);
    tmp2 = tmp0_0.length;
    final ffi.Pointer<ffi.Uint8> tmp1_0 = this.__allocate(tmp2 * 1, 1);
    final Uint8List tmp1_1 = tmp1_0.asTypedList(tmp2);
    tmp1_1.setAll(0, tmp0_0);
    tmp1 = tmp1_0.address;
    tmp3 = tmp2;
    final tmp4_0 = utf8.encode(tmp4);
    tmp6 = tmp4_0.length;
    final ffi.Pointer<ffi.Uint8> tmp5_0 = this.__allocate(tmp6 * 1, 1);
    final Uint8List tmp5_1 = tmp5_0.asTypedList(tmp6);
    tmp5_1.setAll(0, tmp4_0);
    tmp5 = tmp5_0.address;
    tmp7 = tmp6;
    final tmp8 = _loginWithToken(
      tmp1,
      tmp2,
      tmp3,
      tmp5,
      tmp6,
      tmp7,
    );
    final tmp10 = tmp8;
    final ffi.Pointer<ffi.Void> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
    final tmp10_1 = _Box(this, tmp10_0, "__login_with_token_future_drop");
    tmp10_1._finalizer = this._registerFinalizer(tmp10_1);
    final tmp9 = _nativeFuture(tmp10_1, this.__loginWithTokenFuturePoll);
    return tmp9;
  }

  /// Create a new client anonymous client connecting to the homeserver
  Future<Client> guestClient(
    String basepath,
    String homeserver,
  ) {
    final tmp0 = basepath;
    final tmp4 = homeserver;
    var tmp1 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    final tmp0_0 = utf8.encode(tmp0);
    tmp2 = tmp0_0.length;
    final ffi.Pointer<ffi.Uint8> tmp1_0 = this.__allocate(tmp2 * 1, 1);
    final Uint8List tmp1_1 = tmp1_0.asTypedList(tmp2);
    tmp1_1.setAll(0, tmp0_0);
    tmp1 = tmp1_0.address;
    tmp3 = tmp2;
    final tmp4_0 = utf8.encode(tmp4);
    tmp6 = tmp4_0.length;
    final ffi.Pointer<ffi.Uint8> tmp5_0 = this.__allocate(tmp6 * 1, 1);
    final Uint8List tmp5_1 = tmp5_0.asTypedList(tmp6);
    tmp5_1.setAll(0, tmp4_0);
    tmp5 = tmp5_0.address;
    tmp7 = tmp6;
    final tmp8 = _guestClient(
      tmp1,
      tmp2,
      tmp3,
      tmp5,
      tmp6,
      tmp7,
    );
    final tmp10 = tmp8;
    final ffi.Pointer<ffi.Void> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
    final tmp10_1 = _Box(this, tmp10_0, "__guest_client_future_drop");
    tmp10_1._finalizer = this._registerFinalizer(tmp10_1);
    final tmp9 = _nativeFuture(tmp10_1, this.__guestClientFuturePoll);
    return tmp9;
  }

  String echo(
    String inp,
  ) {
    final tmp0 = inp;
    var tmp1 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    final tmp0_0 = utf8.encode(tmp0);
    tmp2 = tmp0_0.length;
    final ffi.Pointer<ffi.Uint8> tmp1_0 = this.__allocate(tmp2 * 1, 1);
    final Uint8List tmp1_1 = tmp1_0.asTypedList(tmp2);
    tmp1_1.setAll(0, tmp0_0);
    tmp1 = tmp1_0.address;
    tmp3 = tmp2;
    final tmp4 = _echo(
      tmp1,
      tmp2,
      tmp3,
    );
    final tmp6 = tmp4.arg0;
    final tmp7 = tmp4.arg1;
    final tmp8 = tmp4.arg2;
    final tmp9 = tmp4.arg3;
    final tmp10 = tmp4.arg4;
    final tmp11 = tmp4.arg5;
    final tmp12 = tmp4.arg6;
    if (tmp6 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
      final tmp6_0 = utf8.decode(tmp7_0.asTypedList(tmp8));
      if (tmp8 > 0) {
        final ffi.Pointer<ffi.Void> tmp7_0;
        tmp7_0 = ffi.Pointer.fromAddress(tmp7);
        this.__deallocate(tmp7_0, tmp9, 1);
      }
      throw tmp6_0;
    }
    final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
    final tmp5 = utf8.decode(tmp10_0.asTypedList(tmp11));
    if (tmp12 > 0) {
      final ffi.Pointer<ffi.Void> tmp10_0;
      tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      this.__deallocate(tmp10_0, tmp12 * 1, 1);
    }
    return tmp5;
  }

  late final _allocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.IntPtr, ffi.IntPtr)>>("allocate");

  late final _allocate =
      _allocatePtr.asFunction<ffi.Pointer<ffi.Uint8> Function(int, int)>();

  late final _deallocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>, ffi.IntPtr, ffi.IntPtr)>>("deallocate");

  late final _deallocate = _deallocatePtr
      .asFunction<void Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  late final _ffiBufferAddressPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.IntPtr)>>(
          "__ffi_buffer_address");

  late final _ffiBufferAddress =
      _ffiBufferAddressPtr.asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  late final _ffiBufferSizePtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__ffi_buffer_size");

  late final _ffiBufferSize = _ffiBufferSizePtr.asFunction<int Function(int)>();

  Client? __loginNewClientFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _loginNewClientFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_Client");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = Client._(this, tmp13_1);
    return tmp7;
  }

  Client? __loginWithTokenFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _loginWithTokenFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_Client");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = Client._(this, tmp13_1);
    return tmp7;
  }

  Client? __guestClientFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _guestClientFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_Client");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = Client._(this, tmp13_1);
    return tmp7;
  }

  String? __roomDisplayNameFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _roomDisplayNameFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    final tmp14 = tmp6.arg6;
    final tmp15 = tmp6.arg7;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Uint8> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp7 = utf8.decode(tmp13_0.asTypedList(tmp14));
    if (tmp15 > 0) {
      final ffi.Pointer<ffi.Void> tmp13_0;
      tmp13_0 = ffi.Pointer.fromAddress(tmp13);
      this.__deallocate(tmp13_0, tmp15 * 1, 1);
    }
    return tmp7;
  }

  FfiBufferUint8? __roomAvatarFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _roomAvatarFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiBuffer");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiBufferUint8._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  String? __clientRestoreTokenFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientRestoreTokenFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    final tmp14 = tmp6.arg6;
    final tmp15 = tmp6.arg7;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Uint8> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp7 = utf8.decode(tmp13_0.asTypedList(tmp14));
    if (tmp15 > 0) {
      final ffi.Pointer<ffi.Void> tmp13_0;
      tmp13_0 = ffi.Pointer.fromAddress(tmp13);
      this.__deallocate(tmp13_0, tmp15 * 1, 1);
    }
    return tmp7;
  }

  bool? __clientLoggedInFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientLoggedInFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    if (tmp8 == 0) {
      return null;
    }
    final tmp7 = tmp9 > 0;
    return tmp7;
  }

  String? __clientUserIdFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientUserIdFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    final tmp14 = tmp6.arg6;
    final tmp15 = tmp6.arg7;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Uint8> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp7 = utf8.decode(tmp13_0.asTypedList(tmp14));
    if (tmp15 > 0) {
      final ffi.Pointer<ffi.Void> tmp13_0;
      tmp13_0 = ffi.Pointer.fromAddress(tmp13);
      this.__deallocate(tmp13_0, tmp15 * 1, 1);
    }
    return tmp7;
  }

  String? __clientDeviceIdFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientDeviceIdFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    final tmp14 = tmp6.arg6;
    final tmp15 = tmp6.arg7;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Uint8> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp7 = utf8.decode(tmp13_0.asTypedList(tmp14));
    if (tmp15 > 0) {
      final ffi.Pointer<ffi.Void> tmp13_0;
      tmp13_0 = ffi.Pointer.fromAddress(tmp13);
      this.__deallocate(tmp13_0, tmp15 * 1, 1);
    }
    return tmp7;
  }

  String? __clientDisplayNameFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientDisplayNameFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    final tmp14 = tmp6.arg6;
    final tmp15 = tmp6.arg7;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Uint8> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp7 = utf8.decode(tmp13_0.asTypedList(tmp14));
    if (tmp15 > 0) {
      final ffi.Pointer<ffi.Void> tmp13_0;
      tmp13_0 = ffi.Pointer.fromAddress(tmp13);
      this.__deallocate(tmp13_0, tmp15 * 1, 1);
    }
    return tmp7;
  }

  FfiBufferUint8? __clientAvatarFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientAvatarFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiBuffer");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiBufferUint8._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  late final _initLoggingPtr = _lookup<
      ffi.NativeFunction<
          _InitLoggingReturn Function(
    ffi.Uint8,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__init_logging");

  late final _initLogging = _initLoggingPtr.asFunction<
      _InitLoggingReturn Function(
    int,
    int,
    int,
    int,
  )>();
  late final _loginNewClientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__login_new_client");

  late final _loginNewClient = _loginNewClientPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _loginWithTokenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__login_with_token");

  late final _loginWithToken = _loginWithTokenPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _guestClientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__guest_client");

  late final _guestClient = _guestClientPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _echoPtr = _lookup<
      ffi.NativeFunction<
          _EchoReturn Function(
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__echo");

  late final _echo = _echoPtr.asFunction<
      _EchoReturn Function(
    int,
    int,
    int,
  )>();
  late final _roomDisplayNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Room_display_name");

  late final _roomDisplayName = _roomDisplayNamePtr.asFunction<
      int Function(
    int,
  )>();
  late final _roomAvatarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Room_avatar");

  late final _roomAvatar = _roomAvatarPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientRestoreTokenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_restore_token");

  late final _clientRestoreToken = _clientRestoreTokenPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientIsGuestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
    ffi.Int64,
  )>>("__Client_is_guest");

  late final _clientIsGuest = _clientIsGuestPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientHasFirstSyncedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
    ffi.Int64,
  )>>("__Client_has_first_synced");

  late final _clientHasFirstSynced = _clientHasFirstSyncedPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientIsSyncingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
    ffi.Int64,
  )>>("__Client_is_syncing");

  late final _clientIsSyncing = _clientIsSyncingPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientLoggedInPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_logged_in");

  late final _clientLoggedIn = _clientLoggedInPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientUserIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_user_id");

  late final _clientUserId = _clientUserIdPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientDeviceIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_device_id");

  late final _clientDeviceId = _clientDeviceIdPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientDisplayNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_display_name");

  late final _clientDisplayName = _clientDisplayNamePtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientAvatarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_avatar");

  late final _clientAvatar = _clientAvatarPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientConversationsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_conversations");

  late final _clientConversations = _clientConversationsPtr.asFunction<
      int Function(
    int,
  )>();
  late final _loginNewClientFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _LoginNewClientFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__login_new_client_future_poll");

  late final _loginNewClientFuturePoll =
      _loginNewClientFuturePollPtr.asFunction<
          _LoginNewClientFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _loginWithTokenFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _LoginWithTokenFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__login_with_token_future_poll");

  late final _loginWithTokenFuturePoll =
      _loginWithTokenFuturePollPtr.asFunction<
          _LoginWithTokenFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _guestClientFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _GuestClientFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__guest_client_future_poll");

  late final _guestClientFuturePoll = _guestClientFuturePollPtr.asFunction<
      _GuestClientFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _roomDisplayNameFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _RoomDisplayNameFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Room_display_name_future_poll");

  late final _roomDisplayNameFuturePoll =
      _roomDisplayNameFuturePollPtr.asFunction<
          _RoomDisplayNameFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _roomAvatarFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _RoomAvatarFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Room_avatar_future_poll");

  late final _roomAvatarFuturePoll = _roomAvatarFuturePollPtr.asFunction<
      _RoomAvatarFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientRestoreTokenFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientRestoreTokenFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_restore_token_future_poll");

  late final _clientRestoreTokenFuturePoll =
      _clientRestoreTokenFuturePollPtr.asFunction<
          _ClientRestoreTokenFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientLoggedInFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientLoggedInFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_logged_in_future_poll");

  late final _clientLoggedInFuturePoll =
      _clientLoggedInFuturePollPtr.asFunction<
          _ClientLoggedInFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientUserIdFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientUserIdFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_user_id_future_poll");

  late final _clientUserIdFuturePoll = _clientUserIdFuturePollPtr.asFunction<
      _ClientUserIdFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientDeviceIdFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientDeviceIdFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_device_id_future_poll");

  late final _clientDeviceIdFuturePoll =
      _clientDeviceIdFuturePollPtr.asFunction<
          _ClientDeviceIdFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientDisplayNameFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientDisplayNameFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_display_name_future_poll");

  late final _clientDisplayNameFuturePoll =
      _clientDisplayNameFuturePollPtr.asFunction<
          _ClientDisplayNameFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientAvatarFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientAvatarFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_avatar_future_poll");

  late final _clientAvatarFuturePoll = _clientAvatarFuturePollPtr.asFunction<
      _ClientAvatarFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  FfiListRoom createFfiListRoom() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListRoomCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListRoom");
    return FfiListRoom._(this, list_box);
  }

  late final _ffiListRoomCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>("__FfiListRoomCreate");

  late final _ffiListRoomCreate =
      _ffiListRoomCreatePtr.asFunction<int Function()>();

  late final _ffiListRoomLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListRoomLen");

  late final _ffiListRoomLen =
      _ffiListRoomLenPtr.asFunction<int Function(int)>();

  late final _ffiListRoomElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListRoomElementAt");

  late final _ffiListRoomElementAt =
      _ffiListRoomElementAtPtr.asFunction<int Function(int, int)>();
}

class Room {
  final Api _api;
  final _Box _box;

  Room._(this._api, this._box);

  /// Calculate the display name
  Future<String> displayName() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomDisplayName(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Room_display_name_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__roomDisplayNameFuturePoll);
    return tmp2;
  }

  /// The avatar of the room
  Future<FfiBufferUint8> avatar() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomAvatar(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Room_avatar_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__roomAvatarFuturePoll);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

/// Main entry point for `effektio`.
class Client {
  final Api _api;
  final _Box _box;

  Client._(this._api, this._box);

  /// Get the restore token for this session
  Future<String> restoreToken() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientRestoreToken(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Client_restore_token_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__clientRestoreTokenFuturePoll);
    return tmp2;
  }

  /// Whether the client is registered as a guest account
  bool isGuest() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientIsGuest(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3 > 0;
    return tmp2;
  }

  /// Whether the client has finished a first sync run
  bool hasFirstSynced() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientHasFirstSynced(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3 > 0;
    return tmp2;
  }

  /// Whether the client is syncing
  bool isSyncing() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientIsSyncing(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3 > 0;
    return tmp2;
  }

  /// Whether the client is logged in
  Future<bool> loggedIn() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientLoggedIn(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Client_logged_in_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__clientLoggedInFuturePoll);
    return tmp2;
  }

  /// The user_id of the client
  Future<String> userId() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientUserId(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Client_user_id_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__clientUserIdFuturePoll);
    return tmp2;
  }

  Future<String> deviceId() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientDeviceId(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Client_device_id_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__clientDeviceIdFuturePoll);
    return tmp2;
  }

  /// The display_name of the client
  Future<String> displayName() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientDisplayName(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Client_display_name_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__clientDisplayNameFuturePoll);
    return tmp2;
  }

  /// The avatar of the client
  Future<FfiBufferUint8> avatar() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientAvatar(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Client_avatar_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__clientAvatarFuturePoll);
    return tmp2;
  }

  /// The conversations the user is involved in
  FfiListRoom conversations() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientConversations(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_FfiListRoom");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp4 = FfiListRoom._(_api, tmp3_1);
    final tmp2 = tmp4;
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class _InitLoggingReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _EchoReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Int64()
  external int arg4;
  @ffi.Uint64()
  external int arg5;
  @ffi.Uint64()
  external int arg6;
}

class _LoginNewClientFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _LoginWithTokenFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _GuestClientFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _RoomDisplayNameFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
  @ffi.Uint64()
  external int arg6;
  @ffi.Uint64()
  external int arg7;
}

class _RoomAvatarFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ClientRestoreTokenFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
  @ffi.Uint64()
  external int arg6;
  @ffi.Uint64()
  external int arg7;
}

class _ClientLoggedInFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
}

class _ClientUserIdFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
  @ffi.Uint64()
  external int arg6;
  @ffi.Uint64()
  external int arg7;
}

class _ClientDeviceIdFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
  @ffi.Uint64()
  external int arg6;
  @ffi.Uint64()
  external int arg7;
}

class _ClientDisplayNameFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
  @ffi.Uint64()
  external int arg6;
  @ffi.Uint64()
  external int arg7;
}

class _ClientAvatarFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class FfiListRoom extends Iterable<Room> implements CustomIterable<Room> {
  final Api _api;
  final _Box _box;

  FfiListRoom._(this._api, this._box);

  @override
  Iterator<Room> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListRoomLen(_box.borrow());
  }

  @override
  Room elementAt(int index) {
    final address = _api._ffiListRoomElementAt(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_Leak");
    return Room._(_api, reference);
  }

  Room operator [](int index) {
    return elementAt(index);
  }

  void drop() {
    _box.drop();
  }
}
