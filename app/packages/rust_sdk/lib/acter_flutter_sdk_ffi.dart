// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by "ffi-gen".

library acter;

import "dart:async";
import "dart:convert";
import "dart:ffi" as ffi;
import "dart:io" show Platform, File, Directory;
import "dart:isolate";
import "dart:typed_data";

class _DartApiEntry extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> name;
  external ffi.Pointer<ffi.Void> ptr;
}

class _DartApi extends ffi.Struct {
  @ffi.Int32()
  external int major;

  @ffi.Int32()
  external int minor;

  external ffi.Pointer<_DartApiEntry> functions;
}

ffi.Pointer<T> _lookupDartSymbol<T extends ffi.NativeType>(String symbol) {
  final ffi.Pointer<_DartApi> api = ffi.NativeApi.initializeApiDLData.cast();
  final ffi.Pointer<_DartApiEntry> functions = api.ref.functions;
  final maxInt = double.maxFinite.toInt();
  for (var i = 0; i < maxInt; i++) {
    final func = functions.elementAt(i).ref;
    var symbol2 = "";
    var j = 0;
    while (func.name.elementAt(j).value != 0) {
      symbol2 += String.fromCharCode(func.name.elementAt(j).value);
      j += 1;
    }
    if (symbol == symbol2) {
      return func.ptr.cast();
    }
  }
  throw "symbol not found";
}

class _Box {
  final Api _api;
  final ffi.Pointer<ffi.Void> _ptr;
  final String _dropSymbol;
  bool _dropped;
  bool _moved;
  ffi.Pointer<ffi.Void> _finalizer = ffi.Pointer.fromAddress(0);
  final Object? _context;

  _Box(this._api, this._ptr, this._dropSymbol, {Object? context})
      : _dropped = false,
        _moved = false,
        _context = context;

  late final _dropPtr = _api._lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(_dropSymbol);

  late final _drop = _dropPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  int borrow() {
    if (_dropped) {
      throw StateError("use after free");
    }
    if (_moved) {
      throw StateError("use after move");
    }
    return _ptr.address;
  }

  int move() {
    if (_dropped) {
      throw StateError("use after free");
    }
    if (_moved) {
      throw StateError("can't move value twice");
    }
    _moved = true;
    _api._unregisterFinalizer(this);
    return _ptr.address;
  }

  void drop() {
    if (_dropped) {
      throw StateError("double free");
    }
    if (_moved) {
      throw StateError("can't drop moved value");
    }
    _dropped = true;
    _api._unregisterFinalizer(this);
    _drop(ffi.Pointer.fromAddress(0), _ptr);
  }
}

class FfiBufferInt8 {
  final Api _api;
  final _Box _box;

  FfiBufferInt8._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  /// Returns a typed view of this buffer.
  /// Note: The lifetime of this view is tied to the lifetime of this FfiBufferInt8. This Int8List must not live longer than the creating FfiBufferInt8
  Int8List asTypedList() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer);
    final size = _api._ffiBufferSize(buffer) ~/ 1;
    return ffi.Pointer<ffi.Int8>.fromAddress(addressRaw).asTypedList(size);
  }
}

class FfiBufferUint8 {
  final Api _api;
  final _Box _box;

  FfiBufferUint8._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  /// Returns a typed view of this buffer.
  /// Note: The lifetime of this view is tied to the lifetime of this FfiBufferUint8. This Uint8List must not live longer than the creating FfiBufferUint8
  Uint8List asTypedList() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer);
    final size = _api._ffiBufferSize(buffer) ~/ 1;
    return ffi.Pointer<ffi.Uint8>.fromAddress(addressRaw).asTypedList(size);
  }
}

class FfiBufferInt16 {
  final Api _api;
  final _Box _box;

  FfiBufferInt16._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  /// Returns a typed view of this buffer.
  /// Note: The lifetime of this view is tied to the lifetime of this FfiBufferInt16. This Int16List must not live longer than the creating FfiBufferInt16
  Int16List asTypedList() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer);
    final size = _api._ffiBufferSize(buffer) ~/ 2;
    return ffi.Pointer<ffi.Int16>.fromAddress(addressRaw).asTypedList(size);
  }
}

class FfiBufferUint16 {
  final Api _api;
  final _Box _box;

  FfiBufferUint16._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  /// Returns a typed view of this buffer.
  /// Note: The lifetime of this view is tied to the lifetime of this FfiBufferUint16. This Uint16List must not live longer than the creating FfiBufferUint16
  Uint16List asTypedList() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer);
    final size = _api._ffiBufferSize(buffer) ~/ 2;
    return ffi.Pointer<ffi.Uint16>.fromAddress(addressRaw).asTypedList(size);
  }
}

class FfiBufferInt32 {
  final Api _api;
  final _Box _box;

  FfiBufferInt32._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  /// Returns a typed view of this buffer.
  /// Note: The lifetime of this view is tied to the lifetime of this FfiBufferInt32. This Int32List must not live longer than the creating FfiBufferInt32
  Int32List asTypedList() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer);
    final size = _api._ffiBufferSize(buffer) ~/ 4;
    return ffi.Pointer<ffi.Int32>.fromAddress(addressRaw).asTypedList(size);
  }
}

class FfiBufferUint32 {
  final Api _api;
  final _Box _box;

  FfiBufferUint32._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  /// Returns a typed view of this buffer.
  /// Note: The lifetime of this view is tied to the lifetime of this FfiBufferUint32. This Uint32List must not live longer than the creating FfiBufferUint32
  Uint32List asTypedList() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer);
    final size = _api._ffiBufferSize(buffer) ~/ 4;
    return ffi.Pointer<ffi.Uint32>.fromAddress(addressRaw).asTypedList(size);
  }
}

class FfiBufferInt64 {
  final Api _api;
  final _Box _box;

  FfiBufferInt64._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  /// Returns a typed view of this buffer.
  /// Note: The lifetime of this view is tied to the lifetime of this FfiBufferInt64. This Int64List must not live longer than the creating FfiBufferInt64
  Int64List asTypedList() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer);
    final size = _api._ffiBufferSize(buffer) ~/ 8;
    return ffi.Pointer<ffi.Int64>.fromAddress(addressRaw).asTypedList(size);
  }
}

class FfiBufferUint64 {
  final Api _api;
  final _Box _box;

  FfiBufferUint64._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  /// Returns a typed view of this buffer.
  /// Note: The lifetime of this view is tied to the lifetime of this FfiBufferUint64. This Uint64List must not live longer than the creating FfiBufferUint64
  Uint64List asTypedList() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer);
    final size = _api._ffiBufferSize(buffer) ~/ 8;
    return ffi.Pointer<ffi.Uint64>.fromAddress(addressRaw).asTypedList(size);
  }
}

class FfiBufferFloat32 {
  final Api _api;
  final _Box _box;

  FfiBufferFloat32._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  /// Returns a typed view of this buffer.
  /// Note: The lifetime of this view is tied to the lifetime of this FfiBufferFloat32. This Float32List must not live longer than the creating FfiBufferFloat32
  Float32List asTypedList() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer);
    final size = _api._ffiBufferSize(buffer) ~/ 4;
    return ffi.Pointer<ffi.Float>.fromAddress(addressRaw).asTypedList(size);
  }
}

class FfiBufferFloat64 {
  final Api _api;
  final _Box _box;

  FfiBufferFloat64._(this._api, this._box);

  void drop() {
    _box.drop();
  }

  /// Returns a typed view of this buffer.
  /// Note: The lifetime of this view is tied to the lifetime of this FfiBufferFloat64. This Float64List must not live longer than the creating FfiBufferFloat64
  Float64List asTypedList() {
    final buffer = _box.borrow();
    final addressRaw = _api._ffiBufferAddress(buffer);
    final size = _api._ffiBufferSize(buffer) ~/ 8;
    return ffi.Pointer<ffi.Double>.fromAddress(addressRaw).asTypedList(size);
  }
}

/// Implements Iterable and Iterator for a rust iterator.
class Iter<T> extends Iterable<T> implements Iterator<T> {
  final _Box _box;
  final T? Function(int) _next;

  Iter._(this._box, this._next);

  @override
  Iterator<T> get iterator => this;

  T? _current;

  @override
  T get current => _current!;

  @override
  bool moveNext() {
    final next = _next(_box.borrow());
    if (next == null) {
      return false;
    } else {
      _current = next;
      return true;
    }
  }

  void drop() {
    _box.drop();
  }
}

abstract class CustomIterable<T> {
  int get length;
  T elementAt(int index);
}

class CustomIterator<T, U extends CustomIterable<T>> implements Iterator<T> {
  final U _iterable;
  int _currentIndex = -1;

  CustomIterator(this._iterable);

  @override
  T get current => _iterable.elementAt(_currentIndex);

  @override
  bool moveNext() {
    _currentIndex++;
    return _currentIndex < _iterable.length;
  }
}

Future<T> _nativeFuture<T>(_Box box, T? Function(int, int, int) nativePoll) {
  final completer = Completer<T>();
  final rx = ReceivePort();
  void poll() {
    try {
      final ret = nativePoll(box.borrow(), ffi.NativeApi.postCObject.address,
          rx.sendPort.nativePort);
      if (ret == null) {
        return;
      }
      completer.complete(ret);
    } catch (err) {
      completer.completeError(err);
    }
    rx.close();
    box.drop();
  }

  rx.listen((dynamic _message) => poll());
  poll();
  return completer.future;
}

Stream<T> _nativeStream<T>(
    _Box box, T? Function(int, int, int, int) nativePoll) {
  final controller = StreamController<T>();
  final rx = ReceivePort();
  final done = ReceivePort();
  void poll() {
    try {
      final ret = nativePoll(
        box.borrow(),
        ffi.NativeApi.postCObject.address,
        rx.sendPort.nativePort,
        done.sendPort.nativePort,
      );
      if (ret != null) {
        controller.add(ret);
      }
    } catch (err) {
      controller.addError(err);
    }
  }

  void close() {
    rx.close();
    done.close();
    box.drop();
  }

  controller.onCancel = close;
  rx.listen((dynamic _message) => poll());
  done.listen((dynamic _message) => controller.close());
  poll();
  return controller.stream;
}

class FfiString {
  final Api _api;
  final _Box _box;

  FfiString._(this._api, this._box);

  String toDartString() {
    final parts = _api._ffiStringIntoParts(_box.borrow());
    final ffi.Pointer<ffi.Uint8> tmp2_0 = ffi.Pointer.fromAddress(parts.addr);
    final tmp1 = utf8.decode(tmp2_0.asTypedList(parts.len));
    if (parts.capacity > 0) {
      final ffi.Pointer<ffi.Void> tmp2_0;
      tmp2_0 = ffi.Pointer.fromAddress(parts.addr);
      _api.__deallocate(tmp2_0, parts.capacity * 1, 1);
    }
    return tmp1;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class _FfiStringParts extends ffi.Struct {
  @ffi.Int64()
  external int addr;
  @ffi.Uint64()
  external int len;
  @ffi.Uint64()
  external int capacity;
}

class _EnumWrapper extends ffi.Struct {
  @ffi.Uint32()
  external int tag;
  @ffi.IntPtr()
  external int inner;
}

/// Main entry point to library.
class Api {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Api(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Api.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// The library is loaded from the executable.
  factory Api.loadStatic() {
    return Api(ffi.DynamicLibrary.executable());
  }

  /// The library is dynamically loaded.
  factory Api.loadDynamic(String name) {
    return Api(ffi.DynamicLibrary.open(name));
  }

  /// The library is loaded based on platform conventions.
  factory Api.load() {
    String? name;
    if (Platform.isLinux) name = "libacter.so";
    if (Platform.isAndroid) name = "libacter.so";
    if (Platform.isMacOS) name = "libacter.dylib";
    if (Platform.isIOS) name = "";
    if (Platform.isWindows) name = "acter.dll";
    if (name == null) {
      throw UnsupportedError("\"This platform is not supported.\"");
    }
    if (name == "") {
      return Api.loadStatic();
    } else {
      return Api.loadDynamic(name);
    }
  }

  late final _registerPtr = _lookupDartSymbol<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Handle, ffi.Pointer<ffi.Void>,
              ffi.IntPtr, ffi.Pointer<ffi.Void>)>>("Dart_NewFinalizableHandle");

  late final _register = _registerPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          Object, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> _registerFinalizer(_Box boxed) {
    return _register(boxed, boxed._ptr, 42, boxed._dropPtr.cast());
  }

  late final _unregisterPtr = _lookupDartSymbol<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Handle)>>("Dart_DeleteFinalizableHandle");

  late final _unregister =
      _unregisterPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, _Box)>();

  void _unregisterFinalizer(_Box boxed) {
    _unregister(boxed._finalizer, boxed);
  }

  ffi.Pointer<T> __allocate<T extends ffi.NativeType>(
      int byteCount, int alignment) {
    return _allocate(byteCount, alignment).cast();
  }

  void __deallocate<T extends ffi.NativeType>(
      ffi.Pointer pointer, int byteCount, int alignment) {
    _deallocate(pointer.cast(), byteCount, alignment);
  }

  /// Initialize logging
  void initLogging(
    String logDir,
    String filter,
  ) {
    final tmp0 = logDir;
    final tmp4 = filter;
    var tmp1 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    final tmp0_0 = utf8.encode(tmp0);
    tmp2 = tmp0_0.length;
    final ffi.Pointer<ffi.Uint8> tmp1_0 = this.__allocate(tmp2 * 1, 1);
    final Uint8List tmp1_1 = tmp1_0.asTypedList(tmp2);
    tmp1_1.setAll(0, tmp0_0);
    tmp1 = tmp1_0.address;
    tmp3 = tmp2;
    final tmp4_0 = utf8.encode(tmp4);
    tmp6 = tmp4_0.length;
    final ffi.Pointer<ffi.Uint8> tmp5_0 = this.__allocate(tmp6 * 1, 1);
    final Uint8List tmp5_1 = tmp5_0.asTypedList(tmp6);
    tmp5_1.setAll(0, tmp4_0);
    tmp5 = tmp5_0.address;
    tmp7 = tmp6;
    final tmp8 = _initLogging(
      tmp1,
      tmp2,
      tmp3,
      tmp5,
      tmp6,
      tmp7,
    );
    final tmp10 = tmp8.arg0;
    final tmp11 = tmp8.arg1;
    final tmp12 = tmp8.arg2;
    final tmp13 = tmp8.arg3;
    if (tmp10 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp11_0 = ffi.Pointer.fromAddress(tmp11);
      final tmp10_0 = utf8.decode(tmp11_0.asTypedList(tmp12));
      if (tmp12 > 0) {
        final ffi.Pointer<ffi.Void> tmp11_0;
        tmp11_0 = ffi.Pointer.fromAddress(tmp11);
        this.__deallocate(tmp11_0, tmp13, 1);
      }
      throw tmp10_0;
    }
    return;
  }

  /// Rotate the logging file
  String rotateLogFile() {
    final tmp0 = _rotateLogFile();
    final tmp2 = tmp0.arg0;
    final tmp3 = tmp0.arg1;
    final tmp4 = tmp0.arg2;
    final tmp5 = tmp0.arg3;
    final tmp6 = tmp0.arg4;
    final tmp7 = tmp0.arg5;
    final tmp8 = tmp0.arg6;
    if (tmp2 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      final tmp2_0 = utf8.decode(tmp3_0.asTypedList(tmp4));
      if (tmp4 > 0) {
        final ffi.Pointer<ffi.Void> tmp3_0;
        tmp3_0 = ffi.Pointer.fromAddress(tmp3);
        this.__deallocate(tmp3_0, tmp5, 1);
      }
      throw tmp2_0;
    }
    final ffi.Pointer<ffi.Uint8> tmp6_0 = ffi.Pointer.fromAddress(tmp6);
    final tmp1 = utf8.decode(tmp6_0.asTypedList(tmp7));
    if (tmp8 > 0) {
      final ffi.Pointer<ffi.Void> tmp6_0;
      tmp6_0 = ffi.Pointer.fromAddress(tmp6);
      this.__deallocate(tmp6_0, tmp8 * 1, 1);
    }
    return tmp1;
  }

  /// Allow flutter to call logging on rust side
  void writeLog(
    String text,
    String level,
  ) {
    final tmp0 = text;
    final tmp4 = level;
    var tmp1 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    final tmp0_0 = utf8.encode(tmp0);
    tmp2 = tmp0_0.length;
    final ffi.Pointer<ffi.Uint8> tmp1_0 = this.__allocate(tmp2 * 1, 1);
    final Uint8List tmp1_1 = tmp1_0.asTypedList(tmp2);
    tmp1_1.setAll(0, tmp0_0);
    tmp1 = tmp1_0.address;
    tmp3 = tmp2;
    final tmp4_0 = utf8.encode(tmp4);
    tmp6 = tmp4_0.length;
    final ffi.Pointer<ffi.Uint8> tmp5_0 = this.__allocate(tmp6 * 1, 1);
    final Uint8List tmp5_1 = tmp5_0.asTypedList(tmp6);
    tmp5_1.setAll(0, tmp4_0);
    tmp5 = tmp5_0.address;
    tmp7 = tmp6;
    final tmp8 = _writeLog(
      tmp1,
      tmp2,
      tmp3,
      tmp5,
      tmp6,
      tmp7,
    );
    final tmp10 = tmp8.arg0;
    final tmp11 = tmp8.arg1;
    final tmp12 = tmp8.arg2;
    final tmp13 = tmp8.arg3;
    if (tmp10 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp11_0 = ffi.Pointer.fromAddress(tmp11);
      final tmp10_0 = utf8.decode(tmp11_0.asTypedList(tmp12));
      if (tmp12 > 0) {
        final ffi.Pointer<ffi.Void> tmp11_0;
        tmp11_0 = ffi.Pointer.fromAddress(tmp11);
        this.__deallocate(tmp11_0, tmp13, 1);
      }
      throw tmp10_0;
    }
    return;
  }

  /// Create a new client for homeserver at url with storage at data_path
  Future<Client> loginNewClient(
    String basepath,
    String username,
    String password,
    String defaultHomeserverName,
    String defaultHomeserverUrl,
    String? deviceName,
  ) {
    final tmp0 = basepath;
    final tmp4 = username;
    final tmp8 = password;
    final tmp12 = defaultHomeserverName;
    final tmp16 = defaultHomeserverUrl;
    final tmp20 = deviceName;
    var tmp1 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp9 = 0;
    var tmp10 = 0;
    var tmp11 = 0;
    var tmp13 = 0;
    var tmp14 = 0;
    var tmp15 = 0;
    var tmp17 = 0;
    var tmp18 = 0;
    var tmp19 = 0;
    var tmp21 = 0;
    var tmp23 = 0;
    var tmp24 = 0;
    var tmp25 = 0;
    final tmp0_0 = utf8.encode(tmp0);
    tmp2 = tmp0_0.length;
    final ffi.Pointer<ffi.Uint8> tmp1_0 = this.__allocate(tmp2 * 1, 1);
    final Uint8List tmp1_1 = tmp1_0.asTypedList(tmp2);
    tmp1_1.setAll(0, tmp0_0);
    tmp1 = tmp1_0.address;
    tmp3 = tmp2;
    final tmp4_0 = utf8.encode(tmp4);
    tmp6 = tmp4_0.length;
    final ffi.Pointer<ffi.Uint8> tmp5_0 = this.__allocate(tmp6 * 1, 1);
    final Uint8List tmp5_1 = tmp5_0.asTypedList(tmp6);
    tmp5_1.setAll(0, tmp4_0);
    tmp5 = tmp5_0.address;
    tmp7 = tmp6;
    final tmp8_0 = utf8.encode(tmp8);
    tmp10 = tmp8_0.length;
    final ffi.Pointer<ffi.Uint8> tmp9_0 = this.__allocate(tmp10 * 1, 1);
    final Uint8List tmp9_1 = tmp9_0.asTypedList(tmp10);
    tmp9_1.setAll(0, tmp8_0);
    tmp9 = tmp9_0.address;
    tmp11 = tmp10;
    final tmp12_0 = utf8.encode(tmp12);
    tmp14 = tmp12_0.length;
    final ffi.Pointer<ffi.Uint8> tmp13_0 = this.__allocate(tmp14 * 1, 1);
    final Uint8List tmp13_1 = tmp13_0.asTypedList(tmp14);
    tmp13_1.setAll(0, tmp12_0);
    tmp13 = tmp13_0.address;
    tmp15 = tmp14;
    final tmp16_0 = utf8.encode(tmp16);
    tmp18 = tmp16_0.length;
    final ffi.Pointer<ffi.Uint8> tmp17_0 = this.__allocate(tmp18 * 1, 1);
    final Uint8List tmp17_1 = tmp17_0.asTypedList(tmp18);
    tmp17_1.setAll(0, tmp16_0);
    tmp17 = tmp17_0.address;
    tmp19 = tmp18;
    if (tmp20 == null) {
      tmp21 = 0;
    } else {
      tmp21 = 1;
      final tmp22 = tmp20;
      final tmp22_0 = utf8.encode(tmp22);
      tmp24 = tmp22_0.length;
      final ffi.Pointer<ffi.Uint8> tmp23_0 = this.__allocate(tmp24 * 1, 1);
      final Uint8List tmp23_1 = tmp23_0.asTypedList(tmp24);
      tmp23_1.setAll(0, tmp22_0);
      tmp23 = tmp23_0.address;
      tmp25 = tmp24;
    }
    final tmp26 = _loginNewClient(
      tmp1,
      tmp2,
      tmp3,
      tmp5,
      tmp6,
      tmp7,
      tmp9,
      tmp10,
      tmp11,
      tmp13,
      tmp14,
      tmp15,
      tmp17,
      tmp18,
      tmp19,
      tmp21,
      tmp23,
      tmp24,
      tmp25,
    );
    final tmp28 = tmp26;
    final ffi.Pointer<ffi.Void> tmp28_0 = ffi.Pointer.fromAddress(tmp28);
    final tmp28_1 = _Box(this, tmp28_0, "__login_new_client_future_drop");
    tmp28_1._finalizer = this._registerFinalizer(tmp28_1);
    final tmp27 = _nativeFuture(tmp28_1, this.__loginNewClientFuturePoll);
    return tmp27;
  }

  /// Create a new client from the restore token
  Future<Client> loginWithToken(
    String basepath,
    String restoreToken,
  ) {
    final tmp0 = basepath;
    final tmp4 = restoreToken;
    var tmp1 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    final tmp0_0 = utf8.encode(tmp0);
    tmp2 = tmp0_0.length;
    final ffi.Pointer<ffi.Uint8> tmp1_0 = this.__allocate(tmp2 * 1, 1);
    final Uint8List tmp1_1 = tmp1_0.asTypedList(tmp2);
    tmp1_1.setAll(0, tmp0_0);
    tmp1 = tmp1_0.address;
    tmp3 = tmp2;
    final tmp4_0 = utf8.encode(tmp4);
    tmp6 = tmp4_0.length;
    final ffi.Pointer<ffi.Uint8> tmp5_0 = this.__allocate(tmp6 * 1, 1);
    final Uint8List tmp5_1 = tmp5_0.asTypedList(tmp6);
    tmp5_1.setAll(0, tmp4_0);
    tmp5 = tmp5_0.address;
    tmp7 = tmp6;
    final tmp8 = _loginWithToken(
      tmp1,
      tmp2,
      tmp3,
      tmp5,
      tmp6,
      tmp7,
    );
    final tmp10 = tmp8;
    final ffi.Pointer<ffi.Void> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
    final tmp10_1 = _Box(this, tmp10_0, "__login_with_token_future_drop");
    tmp10_1._finalizer = this._registerFinalizer(tmp10_1);
    final tmp9 = _nativeFuture(tmp10_1, this.__loginWithTokenFuturePoll);
    return tmp9;
  }

  /// Create an anonymous client connecting to the homeserver
  Future<Client> guestClient(
    String basepath,
    String defaultHomeserverName,
    String defaultHomeserverUrl,
    String? deviceName,
  ) {
    final tmp0 = basepath;
    final tmp4 = defaultHomeserverName;
    final tmp8 = defaultHomeserverUrl;
    final tmp12 = deviceName;
    var tmp1 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp9 = 0;
    var tmp10 = 0;
    var tmp11 = 0;
    var tmp13 = 0;
    var tmp15 = 0;
    var tmp16 = 0;
    var tmp17 = 0;
    final tmp0_0 = utf8.encode(tmp0);
    tmp2 = tmp0_0.length;
    final ffi.Pointer<ffi.Uint8> tmp1_0 = this.__allocate(tmp2 * 1, 1);
    final Uint8List tmp1_1 = tmp1_0.asTypedList(tmp2);
    tmp1_1.setAll(0, tmp0_0);
    tmp1 = tmp1_0.address;
    tmp3 = tmp2;
    final tmp4_0 = utf8.encode(tmp4);
    tmp6 = tmp4_0.length;
    final ffi.Pointer<ffi.Uint8> tmp5_0 = this.__allocate(tmp6 * 1, 1);
    final Uint8List tmp5_1 = tmp5_0.asTypedList(tmp6);
    tmp5_1.setAll(0, tmp4_0);
    tmp5 = tmp5_0.address;
    tmp7 = tmp6;
    final tmp8_0 = utf8.encode(tmp8);
    tmp10 = tmp8_0.length;
    final ffi.Pointer<ffi.Uint8> tmp9_0 = this.__allocate(tmp10 * 1, 1);
    final Uint8List tmp9_1 = tmp9_0.asTypedList(tmp10);
    tmp9_1.setAll(0, tmp8_0);
    tmp9 = tmp9_0.address;
    tmp11 = tmp10;
    if (tmp12 == null) {
      tmp13 = 0;
    } else {
      tmp13 = 1;
      final tmp14 = tmp12;
      final tmp14_0 = utf8.encode(tmp14);
      tmp16 = tmp14_0.length;
      final ffi.Pointer<ffi.Uint8> tmp15_0 = this.__allocate(tmp16 * 1, 1);
      final Uint8List tmp15_1 = tmp15_0.asTypedList(tmp16);
      tmp15_1.setAll(0, tmp14_0);
      tmp15 = tmp15_0.address;
      tmp17 = tmp16;
    }
    final tmp18 = _guestClient(
      tmp1,
      tmp2,
      tmp3,
      tmp5,
      tmp6,
      tmp7,
      tmp9,
      tmp10,
      tmp11,
      tmp13,
      tmp15,
      tmp16,
      tmp17,
    );
    final tmp20 = tmp18;
    final ffi.Pointer<ffi.Void> tmp20_0 = ffi.Pointer.fromAddress(tmp20);
    final tmp20_1 = _Box(this, tmp20_0, "__guest_client_future_drop");
    tmp20_1._finalizer = this._registerFinalizer(tmp20_1);
    final tmp19 = _nativeFuture(tmp20_1, this.__guestClientFuturePoll);
    return tmp19;
  }

  /// Create a new client from the registration token
  Future<Client> registerWithToken(
    String basepath,
    String username,
    String password,
    String registrationToken,
    String defaultHomeserverName,
    String defaultHomeserverUrl,
    String deviceName,
  ) {
    final tmp0 = basepath;
    final tmp4 = username;
    final tmp8 = password;
    final tmp12 = registrationToken;
    final tmp16 = defaultHomeserverName;
    final tmp20 = defaultHomeserverUrl;
    final tmp24 = deviceName;
    var tmp1 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp9 = 0;
    var tmp10 = 0;
    var tmp11 = 0;
    var tmp13 = 0;
    var tmp14 = 0;
    var tmp15 = 0;
    var tmp17 = 0;
    var tmp18 = 0;
    var tmp19 = 0;
    var tmp21 = 0;
    var tmp22 = 0;
    var tmp23 = 0;
    var tmp25 = 0;
    var tmp26 = 0;
    var tmp27 = 0;
    final tmp0_0 = utf8.encode(tmp0);
    tmp2 = tmp0_0.length;
    final ffi.Pointer<ffi.Uint8> tmp1_0 = this.__allocate(tmp2 * 1, 1);
    final Uint8List tmp1_1 = tmp1_0.asTypedList(tmp2);
    tmp1_1.setAll(0, tmp0_0);
    tmp1 = tmp1_0.address;
    tmp3 = tmp2;
    final tmp4_0 = utf8.encode(tmp4);
    tmp6 = tmp4_0.length;
    final ffi.Pointer<ffi.Uint8> tmp5_0 = this.__allocate(tmp6 * 1, 1);
    final Uint8List tmp5_1 = tmp5_0.asTypedList(tmp6);
    tmp5_1.setAll(0, tmp4_0);
    tmp5 = tmp5_0.address;
    tmp7 = tmp6;
    final tmp8_0 = utf8.encode(tmp8);
    tmp10 = tmp8_0.length;
    final ffi.Pointer<ffi.Uint8> tmp9_0 = this.__allocate(tmp10 * 1, 1);
    final Uint8List tmp9_1 = tmp9_0.asTypedList(tmp10);
    tmp9_1.setAll(0, tmp8_0);
    tmp9 = tmp9_0.address;
    tmp11 = tmp10;
    final tmp12_0 = utf8.encode(tmp12);
    tmp14 = tmp12_0.length;
    final ffi.Pointer<ffi.Uint8> tmp13_0 = this.__allocate(tmp14 * 1, 1);
    final Uint8List tmp13_1 = tmp13_0.asTypedList(tmp14);
    tmp13_1.setAll(0, tmp12_0);
    tmp13 = tmp13_0.address;
    tmp15 = tmp14;
    final tmp16_0 = utf8.encode(tmp16);
    tmp18 = tmp16_0.length;
    final ffi.Pointer<ffi.Uint8> tmp17_0 = this.__allocate(tmp18 * 1, 1);
    final Uint8List tmp17_1 = tmp17_0.asTypedList(tmp18);
    tmp17_1.setAll(0, tmp16_0);
    tmp17 = tmp17_0.address;
    tmp19 = tmp18;
    final tmp20_0 = utf8.encode(tmp20);
    tmp22 = tmp20_0.length;
    final ffi.Pointer<ffi.Uint8> tmp21_0 = this.__allocate(tmp22 * 1, 1);
    final Uint8List tmp21_1 = tmp21_0.asTypedList(tmp22);
    tmp21_1.setAll(0, tmp20_0);
    tmp21 = tmp21_0.address;
    tmp23 = tmp22;
    final tmp24_0 = utf8.encode(tmp24);
    tmp26 = tmp24_0.length;
    final ffi.Pointer<ffi.Uint8> tmp25_0 = this.__allocate(tmp26 * 1, 1);
    final Uint8List tmp25_1 = tmp25_0.asTypedList(tmp26);
    tmp25_1.setAll(0, tmp24_0);
    tmp25 = tmp25_0.address;
    tmp27 = tmp26;
    final tmp28 = _registerWithToken(
      tmp1,
      tmp2,
      tmp3,
      tmp5,
      tmp6,
      tmp7,
      tmp9,
      tmp10,
      tmp11,
      tmp13,
      tmp14,
      tmp15,
      tmp17,
      tmp18,
      tmp19,
      tmp21,
      tmp22,
      tmp23,
      tmp25,
      tmp26,
      tmp27,
    );
    final tmp30 = tmp28;
    final ffi.Pointer<ffi.Void> tmp30_0 = ffi.Pointer.fromAddress(tmp30);
    final tmp30_1 = _Box(this, tmp30_0, "__register_with_token_future_drop");
    tmp30_1._finalizer = this._registerFinalizer(tmp30_1);
    final tmp29 = _nativeFuture(tmp30_1, this.__registerWithTokenFuturePoll);
    return tmp29;
  }

  EfkDuration durationFromSecs(
    int secs,
  ) {
    final tmp0 = secs;
    var tmp1 = 0;
    tmp1 = tmp0;
    final tmp2 = _durationFromSecs(
      tmp1,
    );
    final tmp4 = tmp2;
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(this, tmp4_0, "drop_box_EfkDuration");
    tmp4_1._finalizer = this._registerFinalizer(tmp4_1);
    final tmp3 = EfkDuration._(this, tmp4_1);
    return tmp3;
  }

  CreateSpaceSettings newSpaceSettings(
    String name,
  ) {
    final tmp0 = name;
    var tmp1 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    final tmp0_0 = utf8.encode(tmp0);
    tmp2 = tmp0_0.length;
    final ffi.Pointer<ffi.Uint8> tmp1_0 = this.__allocate(tmp2 * 1, 1);
    final Uint8List tmp1_1 = tmp1_0.asTypedList(tmp2);
    tmp1_1.setAll(0, tmp0_0);
    tmp1 = tmp1_0.address;
    tmp3 = tmp2;
    final tmp4 = _newSpaceSettings(
      tmp1,
      tmp2,
      tmp3,
    );
    final tmp6 = tmp4;
    final ffi.Pointer<ffi.Void> tmp6_0 = ffi.Pointer.fromAddress(tmp6);
    final tmp6_1 = _Box(this, tmp6_0, "drop_box_CreateSpaceSettings");
    tmp6_1._finalizer = this._registerFinalizer(tmp6_1);
    final tmp5 = CreateSpaceSettings._(this, tmp6_1);
    return tmp5;
  }

  late final _allocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.IntPtr, ffi.IntPtr)>>("allocate");

  late final _allocate =
      _allocatePtr.asFunction<ffi.Pointer<ffi.Uint8> Function(int, int)>();

  late final _deallocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Uint8>, ffi.IntPtr, ffi.IntPtr)>>("deallocate");

  late final _deallocate = _deallocatePtr
      .asFunction<void Function(ffi.Pointer<ffi.Uint8>, int, int)>();

  late final _ffiBufferAddressPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr)>>(
          "__ffi_buffer_address");

  late final _ffiBufferAddress =
      _ffiBufferAddressPtr.asFunction<int Function(int)>();

  late final _ffiBufferSizePtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.IntPtr)>>(
          "__ffi_buffer_size");

  late final _ffiBufferSize = _ffiBufferSizePtr.asFunction<int Function(int)>();

  late final _ffiStringIntoPartsPtr =
      _lookup<ffi.NativeFunction<_FfiStringParts Function(ffi.IntPtr)>>(
          "__ffi_string_into_parts");

  late final _ffiStringIntoParts =
      _ffiStringIntoPartsPtr.asFunction<_FfiStringParts Function(int)>();

  Client? __loginNewClientFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _loginNewClientFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_Client");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = Client._(this, tmp13_1);
    return tmp7;
  }

  Client? __loginWithTokenFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _loginWithTokenFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_Client");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = Client._(this, tmp13_1);
    return tmp7;
  }

  Client? __guestClientFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _guestClientFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_Client");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = Client._(this, tmp13_1);
    return tmp7;
  }

  Client? __registerWithTokenFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _registerWithTokenFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_Client");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = Client._(this, tmp13_1);
    return tmp7;
  }

  FfiBufferUint8? __newsSlideImageBinaryFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _newsSlideImageBinaryFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiBuffer");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiBufferUint8._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  FfiBufferUint8? __newsSlideAudioBinaryFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _newsSlideAudioBinaryFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiBuffer");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiBufferUint8._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  FfiBufferUint8? __newsSlideVideoBinaryFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _newsSlideVideoBinaryFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiBuffer");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiBufferUint8._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  FfiBufferUint8? __newsSlideFileBinaryFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _newsSlideFileBinaryFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiBuffer");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiBufferUint8._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  EventId? __newsEntryDraftSendFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _newsEntryDraftSendFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_EventId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = EventId._(this, tmp13_1);
    return tmp7;
  }

  EventId? __newsEntryUpdateBuilderSendFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _newsEntryUpdateBuilderSendFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_EventId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = EventId._(this, tmp13_1);
    return tmp7;
  }

  EventId? __pinDraftSendFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _pinDraftSendFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_EventId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = EventId._(this, tmp13_1);
    return tmp7;
  }

  ActerPin? __acterPinRefreshFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _acterPinRefreshFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_ActerPin");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = ActerPin._(this, tmp13_1);
    return tmp7;
  }

  EventId? __pinUpdateBuilderSendFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _pinUpdateBuilderSendFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_EventId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = EventId._(this, tmp13_1);
    return tmp7;
  }

  RoomMessage? __timelineStreamNextFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _timelineStreamNextFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_RoomMessage");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = RoomMessage._(this, tmp13_1);
    return tmp7;
  }

  bool? __timelineStreamPaginateBackwardsFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _timelineStreamPaginateBackwardsFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  bool? __timelineStreamEditFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _timelineStreamEditFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  FfiListMember? __conversationActiveMembersFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationActiveMembersFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListMember");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListMember._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  Member? __conversationGetMemberFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationGetMemberFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_Member");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = Member._(this, tmp13_1);
    return tmp7;
  }

  TimelineStream? __conversationTimelineStreamFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationTimelineStreamFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_TimelineStream");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = TimelineStream._(this, tmp13_1);
    return tmp7;
  }

  bool? __conversationTypingNoticeFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationTypingNoticeFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  bool? __conversationReadReceiptFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationReadReceiptFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  EventId? __conversationSendPlainMessageFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationSendPlainMessageFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_EventId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = EventId._(this, tmp13_1);
    return tmp7;
  }

  EventId? __conversationSendFormattedMessageFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationSendFormattedMessageFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_EventId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = EventId._(this, tmp13_1);
    return tmp7;
  }

  EventId? __conversationSendReactionFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationSendReactionFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_EventId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = EventId._(this, tmp13_1);
    return tmp7;
  }

  EventId? __conversationSendImageMessageFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationSendImageMessageFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_EventId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = EventId._(this, tmp13_1);
    return tmp7;
  }

  FfiBufferUint8? __conversationImageBinaryFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationImageBinaryFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiBuffer");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiBufferUint8._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  EventId? __conversationSendAudioMessageFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationSendAudioMessageFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_EventId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = EventId._(this, tmp13_1);
    return tmp7;
  }

  FfiBufferUint8? __conversationAudioBinaryFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationAudioBinaryFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiBuffer");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiBufferUint8._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  EventId? __conversationSendVideoMessageFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationSendVideoMessageFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_EventId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = EventId._(this, tmp13_1);
    return tmp7;
  }

  FfiBufferUint8? __conversationVideoBinaryFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationVideoBinaryFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiBuffer");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiBufferUint8._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  EventId? __conversationSendFileMessageFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationSendFileMessageFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_EventId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = EventId._(this, tmp13_1);
    return tmp7;
  }

  FfiBufferUint8? __conversationFileBinaryFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationFileBinaryFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiBuffer");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiBufferUint8._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  bool? __conversationInviteUserFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationInviteUserFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  bool? __conversationJoinFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationJoinFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  bool? __conversationLeaveFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationLeaveFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  FfiListAccount? __conversationGetInviteesFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationGetInviteesFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListAccount");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListAccount._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  String? __conversationDownloadMediaFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationDownloadMediaFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    final tmp14 = tmp6.arg6;
    final tmp15 = tmp6.arg7;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Uint8> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp7 = utf8.decode(tmp13_0.asTypedList(tmp14));
    if (tmp15 > 0) {
      final ffi.Pointer<ffi.Void> tmp13_0;
      tmp13_0 = ffi.Pointer.fromAddress(tmp13);
      this.__deallocate(tmp13_0, tmp15 * 1, 1);
    }
    return tmp7;
  }

  String? __conversationMediaPathFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationMediaPathFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    final tmp14 = tmp6.arg6;
    final tmp15 = tmp6.arg7;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Uint8> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp7 = utf8.decode(tmp13_0.asTypedList(tmp14));
    if (tmp15 > 0) {
      final ffi.Pointer<ffi.Void> tmp13_0;
      tmp13_0 = ffi.Pointer.fromAddress(tmp13);
      this.__deallocate(tmp13_0, tmp15 * 1, 1);
    }
    return tmp7;
  }

  FfiListReceiptRecord? __conversationUserReceiptsFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationUserReceiptsFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListReceiptRecord");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListReceiptRecord._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  bool? __conversationIsEncryptedFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationIsEncryptedFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  RoomMessage? __conversationGetMessageFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationGetMessageFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_RoomMessage");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = RoomMessage._(this, tmp13_1);
    return tmp7;
  }

  EventId? __conversationSendTextReplyFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationSendTextReplyFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_EventId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = EventId._(this, tmp13_1);
    return tmp7;
  }

  EventId? __conversationSendImageReplyFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationSendImageReplyFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_EventId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = EventId._(this, tmp13_1);
    return tmp7;
  }

  EventId? __conversationSendAudioReplyFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationSendAudioReplyFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_EventId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = EventId._(this, tmp13_1);
    return tmp7;
  }

  EventId? __conversationSendVideoReplyFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationSendVideoReplyFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_EventId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = EventId._(this, tmp13_1);
    return tmp7;
  }

  EventId? __conversationSendFileReplyFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationSendFileReplyFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_EventId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = EventId._(this, tmp13_1);
    return tmp7;
  }

  EventId? __conversationRedactMessageFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationRedactMessageFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_EventId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = EventId._(this, tmp13_1);
    return tmp7;
  }

  EventId? __conversationUpdatePowerLevelFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _conversationUpdatePowerLevelFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_EventId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = EventId._(this, tmp13_1);
    return tmp7;
  }

  EventId? __commentDraftSendFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _commentDraftSendFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_EventId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = EventId._(this, tmp13_1);
    return tmp7;
  }

  FfiListComment? __commentsManagerCommentsFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _commentsManagerCommentsFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListComment");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListComment._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  Task? __taskRefreshFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _taskRefreshFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_Task");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = Task._(this, tmp13_1);
    return tmp7;
  }

  CommentsManager? __taskCommentsFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _taskCommentsFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_CommentsManager");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = CommentsManager._(this, tmp13_1);
    return tmp7;
  }

  EventId? __taskUpdateBuilderSendFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _taskUpdateBuilderSendFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_EventId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = EventId._(this, tmp13_1);
    return tmp7;
  }

  EventId? __taskDraftSendFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _taskDraftSendFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_EventId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = EventId._(this, tmp13_1);
    return tmp7;
  }

  FfiListTask? __taskListTasksFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _taskListTasksFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListTask");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListTask._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  TaskList? __taskListRefreshFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _taskListRefreshFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_TaskList");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = TaskList._(this, tmp13_1);
    return tmp7;
  }

  EventId? __taskListDraftSendFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _taskListDraftSendFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_EventId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = EventId._(this, tmp13_1);
    return tmp7;
  }

  EventId? __taskListUpdateBuilderSendFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _taskListUpdateBuilderSendFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_EventId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = EventId._(this, tmp13_1);
    return tmp7;
  }

  SpaceRelations? __spaceSpaceRelationsFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _spaceSpaceRelationsFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_SpaceRelations");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = SpaceRelations._(this, tmp13_1);
    return tmp7;
  }

  FfiListMember? __spaceActiveMembersFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _spaceActiveMembersFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListMember");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListMember._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  Member? __spaceGetMemberFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _spaceGetMemberFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_Member");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = Member._(this, tmp13_1);
    return tmp7;
  }

  bool? __spaceIsEncryptedFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _spaceIsEncryptedFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  FfiListTaskList? __spaceTaskListsFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _spaceTaskListsFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListTaskList");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListTaskList._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  TaskList? __spaceTaskListFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _spaceTaskListFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_TaskList");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = TaskList._(this, tmp13_1);
    return tmp7;
  }

  FfiListNewsEntry? __spaceLatestNewsEntriesFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _spaceLatestNewsEntriesFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListNewsEntry");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListNewsEntry._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  FfiListCalendarEvent? __spaceCalendarEventsFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _spaceCalendarEventsFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListCalendarEvent");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListCalendarEvent._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  FfiListActerPin? __spacePinsFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _spacePinsFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListActerPin");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListActerPin._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  FfiListActerPin? __spacePinnedLinksFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _spacePinnedLinksFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListActerPin");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListActerPin._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  EventId? __spaceSendImageMessageFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _spaceSendImageMessageFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_EventId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = EventId._(this, tmp13_1);
    return tmp7;
  }

  FfiBufferUint8? __spaceImageBinaryFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _spaceImageBinaryFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiBuffer");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiBufferUint8._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  EventId? __spaceSendAudioMessageFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _spaceSendAudioMessageFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_EventId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = EventId._(this, tmp13_1);
    return tmp7;
  }

  FfiBufferUint8? __spaceAudioBinaryFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _spaceAudioBinaryFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiBuffer");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiBufferUint8._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  EventId? __spaceSendVideoMessageFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _spaceSendVideoMessageFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_EventId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = EventId._(this, tmp13_1);
    return tmp7;
  }

  FfiBufferUint8? __spaceVideoBinaryFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _spaceVideoBinaryFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiBuffer");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiBufferUint8._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  EventId? __spaceSendFileMessageFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _spaceSendFileMessageFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_EventId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = EventId._(this, tmp13_1);
    return tmp7;
  }

  FfiBufferUint8? __spaceFileBinaryFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _spaceFileBinaryFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiBuffer");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiBufferUint8._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  String? __accountDisplayNameFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _accountDisplayNameFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    final tmp14 = tmp6.arg6;
    final tmp15 = tmp6.arg7;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Uint8> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp7 = utf8.decode(tmp13_0.asTypedList(tmp14));
    if (tmp15 > 0) {
      final ffi.Pointer<ffi.Void> tmp13_0;
      tmp13_0 = ffi.Pointer.fromAddress(tmp13);
      this.__deallocate(tmp13_0, tmp15 * 1, 1);
    }
    return tmp7;
  }

  bool? __accountSetDisplayNameFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _accountSetDisplayNameFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  FfiBufferUint8? __accountAvatarFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _accountAvatarFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiBuffer");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiBufferUint8._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  MxcUri? __accountSetAvatarFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _accountSetAvatarFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_MxcUri");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = MxcUri._(this, tmp13_1);
    return tmp7;
  }

  String? __clientRestoreTokenFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientRestoreTokenFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    final tmp14 = tmp6.arg6;
    final tmp15 = tmp6.arg7;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Uint8> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp7 = utf8.decode(tmp13_0.asTypedList(tmp14));
    if (tmp15 > 0) {
      final ffi.Pointer<ffi.Void> tmp13_0;
      tmp13_0 = ffi.Pointer.fromAddress(tmp13);
      this.__deallocate(tmp13_0, tmp15 * 1, 1);
    }
    return tmp7;
  }

  Conversation? __clientConversationFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientConversationFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_Conversation");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = Conversation._(this, tmp13_1);
    return tmp7;
  }

  FfiListConversation? __clientConversationsFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientConversationsFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListConversation");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListConversation._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  FfiListSpace? __clientSpacesFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientSpacesFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListSpace");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListSpace._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  Space? __clientGetSpaceFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientGetSpaceFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_Space");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = Space._(this, tmp13_1);
    return tmp7;
  }

  FfiListActerPin? __clientPinnedLinksFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientPinnedLinksFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListActerPin");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListActerPin._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  FfiListUserProfile? __clientSuggestedUsersToInviteFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientSuggestedUsersToInviteFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListUserProfile");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListUserProfile._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  bool? __clientVerifiedDeviceFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientVerifiedDeviceFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  bool? __clientLogoutFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientLogoutFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  RoomId? __clientCreateActerSpaceFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientCreateActerSpaceFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_RoomId");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = RoomId._(this, tmp13_1);
    return tmp7;
  }

  Comment? __clientWaitForCommentFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientWaitForCommentFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_Comment");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = Comment._(this, tmp13_1);
    return tmp7;
  }

  NewsEntry? __clientWaitForNewsFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientWaitForNewsFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_NewsEntry");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = NewsEntry._(this, tmp13_1);
    return tmp7;
  }

  FfiListNewsEntry? __clientLatestNewsEntriesFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientLatestNewsEntriesFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListNewsEntry");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListNewsEntry._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  ActerPin? __clientWaitForPinFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientWaitForPinFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_ActerPin");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = ActerPin._(this, tmp13_1);
    return tmp7;
  }

  FfiListActerPin? __clientPinsFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientPinsFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListActerPin");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListActerPin._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  TaskList? __clientWaitForTaskListFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientWaitForTaskListFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_TaskList");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = TaskList._(this, tmp13_1);
    return tmp7;
  }

  FfiListTaskList? __clientTaskListsFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientTaskListsFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListTaskList");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListTaskList._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  Task? __clientWaitForTaskFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientWaitForTaskFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_Task");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = Task._(this, tmp13_1);
    return tmp7;
  }

  TaskList? __clientTaskListFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientTaskListFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_TaskList");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = TaskList._(this, tmp13_1);
    return tmp7;
  }

  FfiListCalendarEvent? __clientCalendarEventsFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _clientCalendarEventsFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListCalendarEvent");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListCalendarEvent._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  bool? __userProfileHasAvatarFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _userProfileHasAvatarFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  FfiBufferUint8? __userProfileGetAvatarFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _userProfileGetAvatarFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiBuffer");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiBufferUint8._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  FfiBufferUint8? __userProfileGetThumbnailFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _userProfileGetThumbnailFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiBuffer");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiBufferUint8._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  DispName? __userProfileGetDisplayNameFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _userProfileGetDisplayNameFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_DispName");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = DispName._(this, tmp13_1);
    return tmp7;
  }

  FfiBufferUint8? __roomProfileGetAvatarFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _roomProfileGetAvatarFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiBuffer");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiBufferUint8._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  FfiBufferUint8? __roomProfileGetThumbnailFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _roomProfileGetThumbnailFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiBuffer");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiBufferUint8._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  DispName? __roomProfileGetDisplayNameFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _roomProfileGetDisplayNameFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_DispName");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp7 = DispName._(this, tmp13_1);
    return tmp7;
  }

  String? __invitationRoomNameFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _invitationRoomNameFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    final tmp14 = tmp6.arg6;
    final tmp15 = tmp6.arg7;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Uint8> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp7 = utf8.decode(tmp13_0.asTypedList(tmp14));
    if (tmp15 > 0) {
      final ffi.Pointer<ffi.Void> tmp13_0;
      tmp13_0 = ffi.Pointer.fromAddress(tmp13);
      this.__deallocate(tmp13_0, tmp15 * 1, 1);
    }
    return tmp7;
  }

  bool? __invitationAcceptFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _invitationAcceptFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  bool? __invitationRejectFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _invitationRejectFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  bool? __verificationEventAcceptVerificationRequestFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _verificationEventAcceptVerificationRequestFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  bool? __verificationEventCancelVerificationRequestFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _verificationEventCancelVerificationRequestFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  bool? __verificationEventAcceptVerificationRequestWithMethodsFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 =
        _verificationEventAcceptVerificationRequestWithMethodsFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  bool? __verificationEventStartSasVerificationFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _verificationEventStartSasVerificationFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  bool? __verificationEventAcceptSasVerificationFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _verificationEventAcceptSasVerificationFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  bool? __verificationEventCancelSasVerificationFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _verificationEventCancelSasVerificationFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  bool? __verificationEventSendVerificationKeyFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _verificationEventSendVerificationKeyFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  bool? __verificationEventCancelVerificationKeyFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _verificationEventCancelVerificationKeyFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  FfiListVerificationEmoji? __verificationEventGetVerificationEmojiFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _verificationEventGetVerificationEmojiFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListVerificationEmoji");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListVerificationEmoji._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  bool? __verificationEventConfirmSasVerificationFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _verificationEventConfirmSasVerificationFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  bool? __verificationEventMismatchSasVerificationFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _verificationEventMismatchSasVerificationFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  bool? __verificationEventReviewVerificationMacFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _verificationEventReviewVerificationMacFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  FfiListDeviceRecord? __deviceChangedEventDeviceRecordsFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _deviceChangedEventDeviceRecordsFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListDeviceRecord");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListDeviceRecord._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  bool? __deviceChangedEventRequestVerificationToUserFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _deviceChangedEventRequestVerificationToUserFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  bool? __deviceChangedEventRequestVerificationToDeviceFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _deviceChangedEventRequestVerificationToDeviceFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  bool? __deviceChangedEventRequestVerificationToUserWithMethodsFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 =
        _deviceChangedEventRequestVerificationToUserWithMethodsFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  bool? __deviceChangedEventRequestVerificationToDeviceWithMethodsFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 =
        _deviceChangedEventRequestVerificationToDeviceWithMethodsFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final tmp7 = tmp13 > 0;
    return tmp7;
  }

  FfiListDeviceRecord? __deviceLeftEventDeviceRecordsFuturePoll(
    int boxed,
    int postCobject,
    int port,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    final tmp6 = _deviceLeftEventDeviceRecordsFuturePoll(
      tmp1,
      tmp3,
      tmp5,
    );
    final tmp8 = tmp6.arg0;
    final tmp9 = tmp6.arg1;
    final tmp10 = tmp6.arg2;
    final tmp11 = tmp6.arg3;
    final tmp12 = tmp6.arg4;
    final tmp13 = tmp6.arg5;
    if (tmp8 == 0) {
      return null;
    }
    if (tmp9 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp10_0 = ffi.Pointer.fromAddress(tmp10);
      final tmp9_0 = utf8.decode(tmp10_0.asTypedList(tmp11));
      if (tmp11 > 0) {
        final ffi.Pointer<ffi.Void> tmp10_0;
        tmp10_0 = ffi.Pointer.fromAddress(tmp10);
        this.__deallocate(tmp10_0, tmp12, 1);
      }
      throw tmp9_0;
    }
    final ffi.Pointer<ffi.Void> tmp13_0 = ffi.Pointer.fromAddress(tmp13);
    final tmp13_1 = _Box(this, tmp13_0, "drop_box_FfiListDeviceRecord");
    tmp13_1._finalizer = this._registerFinalizer(tmp13_1);
    final tmp14 = FfiListDeviceRecord._(this, tmp13_1);
    final tmp7 = tmp14;
    return tmp7;
  }

  void __acterPinSubscribeStreamPoll(
    int boxed,
    int postCobject,
    int port,
    int done,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    final tmp6 = done;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    var tmp7 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    tmp7 = tmp6;
    final tmp8 = _acterPinSubscribeStreamPoll(
      tmp1,
      tmp3,
      tmp5,
      tmp7,
    );
    final tmp10 = tmp8;
    if (tmp10 == 0) {
      return null;
    }
    return;
  }

  TimelineDiff? __timelineStreamDiffRxStreamPoll(
    int boxed,
    int postCobject,
    int port,
    int done,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    final tmp6 = done;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    var tmp7 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    tmp7 = tmp6;
    final tmp8 = _timelineStreamDiffRxStreamPoll(
      tmp1,
      tmp3,
      tmp5,
      tmp7,
    );
    final tmp10 = tmp8.arg0;
    final tmp11 = tmp8.arg1;
    if (tmp10 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp11_0 = ffi.Pointer.fromAddress(tmp11);
    final tmp11_1 = _Box(this, tmp11_0, "drop_box_TimelineDiff");
    tmp11_1._finalizer = this._registerFinalizer(tmp11_1);
    final tmp9 = TimelineDiff._(this, tmp11_1);
    return tmp9;
  }

  void __taskSubscribeStreamPoll(
    int boxed,
    int postCobject,
    int port,
    int done,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    final tmp6 = done;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    var tmp7 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    tmp7 = tmp6;
    final tmp8 = _taskSubscribeStreamPoll(
      tmp1,
      tmp3,
      tmp5,
      tmp7,
    );
    final tmp10 = tmp8;
    if (tmp10 == 0) {
      return null;
    }
    return;
  }

  void __taskListSubscribeStreamPoll(
    int boxed,
    int postCobject,
    int port,
    int done,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    final tmp6 = done;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    var tmp7 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    tmp7 = tmp6;
    final tmp8 = _taskListSubscribeStreamPoll(
      tmp1,
      tmp3,
      tmp5,
      tmp7,
    );
    final tmp10 = tmp8;
    if (tmp10 == 0) {
      return null;
    }
    return;
  }

  bool? __syncStateFirstSyncedRxStreamPoll(
    int boxed,
    int postCobject,
    int port,
    int done,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    final tmp6 = done;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    var tmp7 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    tmp7 = tmp6;
    final tmp8 = _syncStateFirstSyncedRxStreamPoll(
      tmp1,
      tmp3,
      tmp5,
      tmp7,
    );
    final tmp10 = tmp8.arg0;
    final tmp11 = tmp8.arg1;
    if (tmp10 == 0) {
      return null;
    }
    final tmp9 = tmp11 > 0;
    return tmp9;
  }

  FfiListConversation? __clientConversationsRxStreamPoll(
    int boxed,
    int postCobject,
    int port,
    int done,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    final tmp6 = done;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    var tmp7 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    tmp7 = tmp6;
    final tmp8 = _clientConversationsRxStreamPoll(
      tmp1,
      tmp3,
      tmp5,
      tmp7,
    );
    final tmp10 = tmp8.arg0;
    final tmp11 = tmp8.arg1;
    if (tmp10 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp11_0 = ffi.Pointer.fromAddress(tmp11);
    final tmp11_1 = _Box(this, tmp11_0, "drop_box_FfiListConversation");
    tmp11_1._finalizer = this._registerFinalizer(tmp11_1);
    final tmp12 = FfiListConversation._(this, tmp11_1);
    final tmp9 = tmp12;
    return tmp9;
  }

  FfiListInvitation? __clientInvitationsRxStreamPoll(
    int boxed,
    int postCobject,
    int port,
    int done,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    final tmp6 = done;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    var tmp7 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    tmp7 = tmp6;
    final tmp8 = _clientInvitationsRxStreamPoll(
      tmp1,
      tmp3,
      tmp5,
      tmp7,
    );
    final tmp10 = tmp8.arg0;
    final tmp11 = tmp8.arg1;
    if (tmp10 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp11_0 = ffi.Pointer.fromAddress(tmp11);
    final tmp11_1 = _Box(this, tmp11_0, "drop_box_FfiListInvitation");
    tmp11_1._finalizer = this._registerFinalizer(tmp11_1);
    final tmp12 = FfiListInvitation._(this, tmp11_1);
    final tmp9 = tmp12;
    return tmp9;
  }

  VerificationEvent? __clientVerificationEventRxStreamPoll(
    int boxed,
    int postCobject,
    int port,
    int done,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    final tmp6 = done;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    var tmp7 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    tmp7 = tmp6;
    final tmp8 = _clientVerificationEventRxStreamPoll(
      tmp1,
      tmp3,
      tmp5,
      tmp7,
    );
    final tmp10 = tmp8.arg0;
    final tmp11 = tmp8.arg1;
    if (tmp10 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp11_0 = ffi.Pointer.fromAddress(tmp11);
    final tmp11_1 = _Box(this, tmp11_0, "drop_box_VerificationEvent");
    tmp11_1._finalizer = this._registerFinalizer(tmp11_1);
    final tmp9 = VerificationEvent._(this, tmp11_1);
    return tmp9;
  }

  DeviceChangedEvent? __clientDeviceChangedEventRxStreamPoll(
    int boxed,
    int postCobject,
    int port,
    int done,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    final tmp6 = done;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    var tmp7 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    tmp7 = tmp6;
    final tmp8 = _clientDeviceChangedEventRxStreamPoll(
      tmp1,
      tmp3,
      tmp5,
      tmp7,
    );
    final tmp10 = tmp8.arg0;
    final tmp11 = tmp8.arg1;
    if (tmp10 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp11_0 = ffi.Pointer.fromAddress(tmp11);
    final tmp11_1 = _Box(this, tmp11_0, "drop_box_DeviceChangedEvent");
    tmp11_1._finalizer = this._registerFinalizer(tmp11_1);
    final tmp9 = DeviceChangedEvent._(this, tmp11_1);
    return tmp9;
  }

  DeviceLeftEvent? __clientDeviceLeftEventRxStreamPoll(
    int boxed,
    int postCobject,
    int port,
    int done,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    final tmp6 = done;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    var tmp7 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    tmp7 = tmp6;
    final tmp8 = _clientDeviceLeftEventRxStreamPoll(
      tmp1,
      tmp3,
      tmp5,
      tmp7,
    );
    final tmp10 = tmp8.arg0;
    final tmp11 = tmp8.arg1;
    if (tmp10 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp11_0 = ffi.Pointer.fromAddress(tmp11);
    final tmp11_1 = _Box(this, tmp11_0, "drop_box_DeviceLeftEvent");
    tmp11_1._finalizer = this._registerFinalizer(tmp11_1);
    final tmp9 = DeviceLeftEvent._(this, tmp11_1);
    return tmp9;
  }

  TypingEvent? __clientTypingEventRxStreamPoll(
    int boxed,
    int postCobject,
    int port,
    int done,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    final tmp6 = done;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    var tmp7 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    tmp7 = tmp6;
    final tmp8 = _clientTypingEventRxStreamPoll(
      tmp1,
      tmp3,
      tmp5,
      tmp7,
    );
    final tmp10 = tmp8.arg0;
    final tmp11 = tmp8.arg1;
    if (tmp10 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp11_0 = ffi.Pointer.fromAddress(tmp11);
    final tmp11_1 = _Box(this, tmp11_0, "drop_box_TypingEvent");
    tmp11_1._finalizer = this._registerFinalizer(tmp11_1);
    final tmp9 = TypingEvent._(this, tmp11_1);
    return tmp9;
  }

  ReceiptEvent? __clientReceiptEventRxStreamPoll(
    int boxed,
    int postCobject,
    int port,
    int done,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    final tmp6 = done;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    var tmp7 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    tmp7 = tmp6;
    final tmp8 = _clientReceiptEventRxStreamPoll(
      tmp1,
      tmp3,
      tmp5,
      tmp7,
    );
    final tmp10 = tmp8.arg0;
    final tmp11 = tmp8.arg1;
    if (tmp10 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp11_0 = ffi.Pointer.fromAddress(tmp11);
    final tmp11_1 = _Box(this, tmp11_0, "drop_box_ReceiptEvent");
    tmp11_1._finalizer = this._registerFinalizer(tmp11_1);
    final tmp9 = ReceiptEvent._(this, tmp11_1);
    return tmp9;
  }

  RoomMessage? __clientIncomingMessageRxStreamPoll(
    int boxed,
    int postCobject,
    int port,
    int done,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    final tmp6 = done;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    var tmp7 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    tmp7 = tmp6;
    final tmp8 = _clientIncomingMessageRxStreamPoll(
      tmp1,
      tmp3,
      tmp5,
      tmp7,
    );
    final tmp10 = tmp8.arg0;
    final tmp11 = tmp8.arg1;
    if (tmp10 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp11_0 = ffi.Pointer.fromAddress(tmp11);
    final tmp11_1 = _Box(this, tmp11_0, "drop_box_RoomMessage");
    tmp11_1._finalizer = this._registerFinalizer(tmp11_1);
    final tmp9 = RoomMessage._(this, tmp11_1);
    return tmp9;
  }

  bool? __clientSubscribeStreamPoll(
    int boxed,
    int postCobject,
    int port,
    int done,
  ) {
    final tmp0 = boxed;
    final tmp2 = postCobject;
    final tmp4 = port;
    final tmp6 = done;
    var tmp1 = 0;
    var tmp3 = 0;
    var tmp5 = 0;
    var tmp7 = 0;
    tmp1 = tmp0;
    tmp3 = tmp2;
    tmp5 = tmp4;
    tmp7 = tmp6;
    final tmp8 = _clientSubscribeStreamPoll(
      tmp1,
      tmp3,
      tmp5,
      tmp7,
    );
    final tmp10 = tmp8.arg0;
    final tmp11 = tmp8.arg1;
    if (tmp10 == 0) {
      return null;
    }
    final tmp9 = tmp11 > 0;
    return tmp9;
  }

  late final _initLoggingPtr = _lookup<
      ffi.NativeFunction<
          _InitLoggingReturn Function(
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__init_logging");

  late final _initLogging = _initLoggingPtr.asFunction<
      _InitLoggingReturn Function(
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _rotateLogFilePtr =
      _lookup<ffi.NativeFunction<_RotateLogFileReturn Function()>>(
          "__rotate_log_file");

  late final _rotateLogFile =
      _rotateLogFilePtr.asFunction<_RotateLogFileReturn Function()>();
  late final _writeLogPtr = _lookup<
      ffi.NativeFunction<
          _WriteLogReturn Function(
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__write_log");

  late final _writeLog = _writeLogPtr.asFunction<
      _WriteLogReturn Function(
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _loginNewClientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__login_new_client");

  late final _loginNewClient = _loginNewClientPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _loginWithTokenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__login_with_token");

  late final _loginWithToken = _loginWithTokenPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _guestClientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__guest_client");

  late final _guestClient = _guestClientPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _registerWithTokenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__register_with_token");

  late final _registerWithToken = _registerWithTokenPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _durationFromSecsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Uint64,
  )>>("__duration_from_secs");

  late final _durationFromSecs = _durationFromSecsPtr.asFunction<
      int Function(
    int,
  )>();
  late final _newSpaceSettingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__new_space_settings");

  late final _newSpaceSettings = _newSpaceSettingsPtr.asFunction<
      int Function(
    int,
    int,
    int,
  )>();
  late final _efkColorRgbaU8Ptr = _lookup<
      ffi.NativeFunction<
          _EfkColorRgbaU8Return Function(
    ffi.Int64,
  )>>("__EfkColor_rgba_u8");

  late final _efkColorRgbaU8 = _efkColorRgbaU8Ptr.asFunction<
      _EfkColorRgbaU8Return Function(
    int,
  )>();
  late final _utcDateTimeTimestampPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__UtcDateTime_timestamp");

  late final _utcDateTimeTimestamp = _utcDateTimeTimestampPtr.asFunction<
      int Function(
    int,
  )>();
  late final _utcDateTimeToRfc2822Ptr = _lookup<
      ffi.NativeFunction<
          _UtcDateTimeToRfc2822Return Function(
    ffi.Int64,
  )>>("__UtcDateTime_to_rfc2822");

  late final _utcDateTimeToRfc2822 = _utcDateTimeToRfc2822Ptr.asFunction<
      _UtcDateTimeToRfc2822Return Function(
    int,
  )>();
  late final _utcDateTimeToRfc3339Ptr = _lookup<
      ffi.NativeFunction<
          _UtcDateTimeToRfc3339Return Function(
    ffi.Int64,
  )>>("__UtcDateTime_to_rfc3339");

  late final _utcDateTimeToRfc3339 = _utcDateTimeToRfc3339Ptr.asFunction<
      _UtcDateTimeToRfc3339Return Function(
    int,
  )>();
  late final _utcDateTimeTimestampMillisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__UtcDateTime_timestamp_millis");

  late final _utcDateTimeTimestampMillis =
      _utcDateTimeTimestampMillisPtr.asFunction<
          int Function(
    int,
  )>();
  late final _refDetailsTargetIdStrPtr = _lookup<
      ffi.NativeFunction<
          _RefDetailsTargetIdStrReturn Function(
    ffi.Int64,
  )>>("__RefDetails_target_id_str");

  late final _refDetailsTargetIdStr = _refDetailsTargetIdStrPtr.asFunction<
      _RefDetailsTargetIdStrReturn Function(
    int,
  )>();
  late final _refDetailsRoomIdStrPtr = _lookup<
      ffi.NativeFunction<
          _RefDetailsRoomIdStrReturn Function(
    ffi.Int64,
  )>>("__RefDetails_room_id_str");

  late final _refDetailsRoomIdStr = _refDetailsRoomIdStrPtr.asFunction<
      _RefDetailsRoomIdStrReturn Function(
    int,
  )>();
  late final _refDetailsTypeStrPtr = _lookup<
      ffi.NativeFunction<
          _RefDetailsTypeStrReturn Function(
    ffi.Int64,
  )>>("__RefDetails_type_str");

  late final _refDetailsTypeStr = _refDetailsTypeStrPtr.asFunction<
      _RefDetailsTypeStrReturn Function(
    int,
  )>();
  late final _refDetailsEmbedActionStrPtr = _lookup<
      ffi.NativeFunction<
          _RefDetailsEmbedActionStrReturn Function(
    ffi.Int64,
  )>>("__RefDetails_embed_action_str");

  late final _refDetailsEmbedActionStr =
      _refDetailsEmbedActionStrPtr.asFunction<
          _RefDetailsEmbedActionStrReturn Function(
    int,
  )>();
  late final _refDetailsTaskListIdStrPtr = _lookup<
      ffi.NativeFunction<
          _RefDetailsTaskListIdStrReturn Function(
    ffi.Int64,
  )>>("__RefDetails_task_list_id_str");

  late final _refDetailsTaskListIdStr = _refDetailsTaskListIdStrPtr.asFunction<
      _RefDetailsTaskListIdStrReturn Function(
    int,
  )>();
  late final _refDetailsTitlePtr = _lookup<
      ffi.NativeFunction<
          _RefDetailsTitleReturn Function(
    ffi.Int64,
  )>>("__RefDetails_title");

  late final _refDetailsTitle = _refDetailsTitlePtr.asFunction<
      _RefDetailsTitleReturn Function(
    int,
  )>();
  late final _refDetailsUriPtr = _lookup<
      ffi.NativeFunction<
          _RefDetailsUriReturn Function(
    ffi.Int64,
  )>>("__RefDetails_uri");

  late final _refDetailsUri = _refDetailsUriPtr.asFunction<
      _RefDetailsUriReturn Function(
    int,
  )>();
  late final _objRefPositionStrPtr = _lookup<
      ffi.NativeFunction<
          _ObjRefPositionStrReturn Function(
    ffi.Int64,
  )>>("__ObjRef_position_str");

  late final _objRefPositionStr = _objRefPositionStrPtr.asFunction<
      _ObjRefPositionStrReturn Function(
    int,
  )>();
  late final _objRefReferencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__ObjRef_reference");

  late final _objRefReference = _objRefReferencePtr.asFunction<
      int Function(
    int,
  )>();
  late final _colorizeColorPtr = _lookup<
      ffi.NativeFunction<
          _ColorizeColorReturn Function(
    ffi.Int64,
  )>>("__Colorize_color");

  late final _colorizeColor = _colorizeColorPtr.asFunction<
      _ColorizeColorReturn Function(
    int,
  )>();
  late final _colorizeBackgroundPtr = _lookup<
      ffi.NativeFunction<
          _ColorizeBackgroundReturn Function(
    ffi.Int64,
  )>>("__Colorize_background");

  late final _colorizeBackground = _colorizeBackgroundPtr.asFunction<
      _ColorizeBackgroundReturn Function(
    int,
  )>();
  late final _newsSlideTypeStrPtr = _lookup<
      ffi.NativeFunction<
          _NewsSlideTypeStrReturn Function(
    ffi.Int64,
  )>>("__NewsSlide_type_str");

  late final _newsSlideTypeStr = _newsSlideTypeStrPtr.asFunction<
      _NewsSlideTypeStrReturn Function(
    int,
  )>();
  late final _newsSlideTextPtr = _lookup<
      ffi.NativeFunction<
          _NewsSlideTextReturn Function(
    ffi.Int64,
  )>>("__NewsSlide_text");

  late final _newsSlideText = _newsSlideTextPtr.asFunction<
      _NewsSlideTextReturn Function(
    int,
  )>();
  late final _newsSlideReferencesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__NewsSlide_references");

  late final _newsSlideReferences = _newsSlideReferencesPtr.asFunction<
      int Function(
    int,
  )>();
  late final _newsSlideImageDescPtr = _lookup<
      ffi.NativeFunction<
          _NewsSlideImageDescReturn Function(
    ffi.Int64,
  )>>("__NewsSlide_image_desc");

  late final _newsSlideImageDesc = _newsSlideImageDescPtr.asFunction<
      _NewsSlideImageDescReturn Function(
    int,
  )>();
  late final _newsSlideImageBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__NewsSlide_image_binary");

  late final _newsSlideImageBinary = _newsSlideImageBinaryPtr.asFunction<
      int Function(
    int,
  )>();
  late final _newsSlideAudioDescPtr = _lookup<
      ffi.NativeFunction<
          _NewsSlideAudioDescReturn Function(
    ffi.Int64,
  )>>("__NewsSlide_audio_desc");

  late final _newsSlideAudioDesc = _newsSlideAudioDescPtr.asFunction<
      _NewsSlideAudioDescReturn Function(
    int,
  )>();
  late final _newsSlideAudioBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__NewsSlide_audio_binary");

  late final _newsSlideAudioBinary = _newsSlideAudioBinaryPtr.asFunction<
      int Function(
    int,
  )>();
  late final _newsSlideVideoDescPtr = _lookup<
      ffi.NativeFunction<
          _NewsSlideVideoDescReturn Function(
    ffi.Int64,
  )>>("__NewsSlide_video_desc");

  late final _newsSlideVideoDesc = _newsSlideVideoDescPtr.asFunction<
      _NewsSlideVideoDescReturn Function(
    int,
  )>();
  late final _newsSlideVideoBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__NewsSlide_video_binary");

  late final _newsSlideVideoBinary = _newsSlideVideoBinaryPtr.asFunction<
      int Function(
    int,
  )>();
  late final _newsSlideFileDescPtr = _lookup<
      ffi.NativeFunction<
          _NewsSlideFileDescReturn Function(
    ffi.Int64,
  )>>("__NewsSlide_file_desc");

  late final _newsSlideFileDesc = _newsSlideFileDescPtr.asFunction<
      _NewsSlideFileDescReturn Function(
    int,
  )>();
  late final _newsSlideFileBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__NewsSlide_file_binary");

  late final _newsSlideFileBinary = _newsSlideFileBinaryPtr.asFunction<
      int Function(
    int,
  )>();
  late final _newsEntrySlidesCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
    ffi.Int64,
  )>>("__NewsEntry_slides_count");

  late final _newsEntrySlidesCount = _newsEntrySlidesCountPtr.asFunction<
      int Function(
    int,
  )>();
  late final _newsEntryGetSlidePtr = _lookup<
      ffi.NativeFunction<
          _NewsEntryGetSlideReturn Function(
    ffi.Int64,
    ffi.Uint8,
  )>>("__NewsEntry_get_slide");

  late final _newsEntryGetSlide = _newsEntryGetSlidePtr.asFunction<
      _NewsEntryGetSlideReturn Function(
    int,
    int,
  )>();
  late final _newsEntryColorsPtr = _lookup<
      ffi.NativeFunction<
          _NewsEntryColorsReturn Function(
    ffi.Int64,
  )>>("__NewsEntry_colors");

  late final _newsEntryColors = _newsEntryColorsPtr.asFunction<
      _NewsEntryColorsReturn Function(
    int,
  )>();
  late final _newsEntryCommentsCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
    ffi.Int64,
  )>>("__NewsEntry_comments_count");

  late final _newsEntryCommentsCount = _newsEntryCommentsCountPtr.asFunction<
      int Function(
    int,
  )>();
  late final _newsEntryLikesCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
    ffi.Int64,
  )>>("__NewsEntry_likes_count");

  late final _newsEntryLikesCount = _newsEntryLikesCountPtr.asFunction<
      int Function(
    int,
  )>();
  late final _newsEntryRoomIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__NewsEntry_room_id");

  late final _newsEntryRoomId = _newsEntryRoomIdPtr.asFunction<
      int Function(
    int,
  )>();
  late final _newsEntryDraftAddTextSlidePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__NewsEntryDraft_add_text_slide");

  late final _newsEntryDraftAddTextSlide =
      _newsEntryDraftAddTextSlidePtr.asFunction<
          void Function(
    int,
    int,
    int,
    int,
  )>();
  late final _newsEntryDraftAddImageSlidePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__NewsEntryDraft_add_image_slide");

  late final _newsEntryDraftAddImageSlide =
      _newsEntryDraftAddImageSlidePtr.asFunction<
          void Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _newsEntryDraftAddAudioSlidePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Uint32,
  )>>("__NewsEntryDraft_add_audio_slide");

  late final _newsEntryDraftAddAudioSlide =
      _newsEntryDraftAddAudioSlidePtr.asFunction<
          void Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _newsEntryDraftAddVideoSlidePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__NewsEntryDraft_add_video_slide");

  late final _newsEntryDraftAddVideoSlide =
      _newsEntryDraftAddVideoSlidePtr.asFunction<
          void Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _newsEntryDraftAddFileSlidePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Uint32,
  )>>("__NewsEntryDraft_add_file_slide");

  late final _newsEntryDraftAddFileSlide =
      _newsEntryDraftAddFileSlidePtr.asFunction<
          void Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _newsEntryDraftUnsetSlidesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__NewsEntryDraft_unset_slides");

  late final _newsEntryDraftUnsetSlides =
      _newsEntryDraftUnsetSlidesPtr.asFunction<
          void Function(
    int,
  )>();
  late final _newsEntryDraftColorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
  )>>("__NewsEntryDraft_colors");

  late final _newsEntryDraftColors = _newsEntryDraftColorsPtr.asFunction<
      void Function(
    int,
    int,
  )>();
  late final _newsEntryDraftUnsetColorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__NewsEntryDraft_unset_colors");

  late final _newsEntryDraftUnsetColors =
      _newsEntryDraftUnsetColorsPtr.asFunction<
          void Function(
    int,
  )>();
  late final _newsEntryDraftSendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__NewsEntryDraft_send");

  late final _newsEntryDraftSend = _newsEntryDraftSendPtr.asFunction<
      int Function(
    int,
  )>();
  late final _newsEntryUpdateBuilderSlidesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
  )>>("__NewsEntryUpdateBuilder_slides");

  late final _newsEntryUpdateBuilderSlides =
      _newsEntryUpdateBuilderSlidesPtr.asFunction<
          void Function(
    int,
    int,
  )>();
  late final _newsEntryUpdateBuilderUnsetSlidesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__NewsEntryUpdateBuilder_unset_slides");

  late final _newsEntryUpdateBuilderUnsetSlides =
      _newsEntryUpdateBuilderUnsetSlidesPtr.asFunction<
          void Function(
    int,
  )>();
  late final _newsEntryUpdateBuilderUnsetSlidesUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__NewsEntryUpdateBuilder_unset_slides_update");

  late final _newsEntryUpdateBuilderUnsetSlidesUpdate =
      _newsEntryUpdateBuilderUnsetSlidesUpdatePtr.asFunction<
          void Function(
    int,
  )>();
  late final _newsEntryUpdateBuilderColorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
  )>>("__NewsEntryUpdateBuilder_colors");

  late final _newsEntryUpdateBuilderColors =
      _newsEntryUpdateBuilderColorsPtr.asFunction<
          void Function(
    int,
    int,
  )>();
  late final _newsEntryUpdateBuilderUnsetColorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__NewsEntryUpdateBuilder_unset_colors");

  late final _newsEntryUpdateBuilderUnsetColors =
      _newsEntryUpdateBuilderUnsetColorsPtr.asFunction<
          void Function(
    int,
  )>();
  late final _newsEntryUpdateBuilderUnsetColorsUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__NewsEntryUpdateBuilder_unset_colors_update");

  late final _newsEntryUpdateBuilderUnsetColorsUpdate =
      _newsEntryUpdateBuilderUnsetColorsUpdatePtr.asFunction<
          void Function(
    int,
  )>();
  late final _newsEntryUpdateBuilderSendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__NewsEntryUpdateBuilder_send");

  late final _newsEntryUpdateBuilderSend =
      _newsEntryUpdateBuilderSendPtr.asFunction<
          int Function(
    int,
  )>();
  late final _tagTitlePtr = _lookup<
      ffi.NativeFunction<
          _TagTitleReturn Function(
    ffi.Int64,
  )>>("__Tag_title");

  late final _tagTitle = _tagTitlePtr.asFunction<
      _TagTitleReturn Function(
    int,
  )>();
  late final _tagHashTagPtr = _lookup<
      ffi.NativeFunction<
          _TagHashTagReturn Function(
    ffi.Int64,
  )>>("__Tag_hash_tag");

  late final _tagHashTag = _tagHashTagPtr.asFunction<
      _TagHashTagReturn Function(
    int,
  )>();
  late final _tagColorPtr = _lookup<
      ffi.NativeFunction<
          _TagColorReturn Function(
    ffi.Int64,
  )>>("__Tag_color");

  late final _tagColor = _tagColorPtr.asFunction<
      _TagColorReturn Function(
    int,
  )>();
  late final _pinDraftTitlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__PinDraft_title");

  late final _pinDraftTitle = _pinDraftTitlePtr.asFunction<
      void Function(
    int,
    int,
    int,
    int,
  )>();
  late final _pinDraftContentTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__PinDraft_content_text");

  late final _pinDraftContentText = _pinDraftContentTextPtr.asFunction<
      void Function(
    int,
    int,
    int,
    int,
  )>();
  late final _pinDraftUnsetContentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__PinDraft_unset_content");

  late final _pinDraftUnsetContent = _pinDraftUnsetContentPtr.asFunction<
      void Function(
    int,
  )>();
  late final _pinDraftUrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__PinDraft_url");

  late final _pinDraftUrl = _pinDraftUrlPtr.asFunction<
      void Function(
    int,
    int,
    int,
    int,
  )>();
  late final _pinDraftUnsetUrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__PinDraft_unset_url");

  late final _pinDraftUnsetUrl = _pinDraftUnsetUrlPtr.asFunction<
      void Function(
    int,
  )>();
  late final _pinDraftSendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__PinDraft_send");

  late final _pinDraftSend = _pinDraftSendPtr.asFunction<
      int Function(
    int,
  )>();
  late final _acterPinTitlePtr = _lookup<
      ffi.NativeFunction<
          _ActerPinTitleReturn Function(
    ffi.Int64,
  )>>("__ActerPin_title");

  late final _acterPinTitle = _acterPinTitlePtr.asFunction<
      _ActerPinTitleReturn Function(
    int,
  )>();
  late final _acterPinContentTextPtr = _lookup<
      ffi.NativeFunction<
          _ActerPinContentTextReturn Function(
    ffi.Int64,
  )>>("__ActerPin_content_text");

  late final _acterPinContentText = _acterPinContentTextPtr.asFunction<
      _ActerPinContentTextReturn Function(
    int,
  )>();
  late final _acterPinIsLinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
    ffi.Int64,
  )>>("__ActerPin_is_link");

  late final _acterPinIsLink = _acterPinIsLinkPtr.asFunction<
      int Function(
    int,
  )>();
  late final _acterPinUrlPtr = _lookup<
      ffi.NativeFunction<
          _ActerPinUrlReturn Function(
    ffi.Int64,
  )>>("__ActerPin_url");

  late final _acterPinUrl = _acterPinUrlPtr.asFunction<
      _ActerPinUrlReturn Function(
    int,
  )>();
  late final _acterPinColorPtr = _lookup<
      ffi.NativeFunction<
          _ActerPinColorReturn Function(
    ffi.Int64,
  )>>("__ActerPin_color");

  late final _acterPinColor = _acterPinColorPtr.asFunction<
      _ActerPinColorReturn Function(
    int,
  )>();
  late final _acterPinUpdateBuilderPtr = _lookup<
      ffi.NativeFunction<
          _ActerPinUpdateBuilderReturn Function(
    ffi.Int64,
  )>>("__ActerPin_update_builder");

  late final _acterPinUpdateBuilder = _acterPinUpdateBuilderPtr.asFunction<
      _ActerPinUpdateBuilderReturn Function(
    int,
  )>();
  late final _acterPinSubscribePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__ActerPin_subscribe");

  late final _acterPinSubscribe = _acterPinSubscribePtr.asFunction<
      int Function(
    int,
  )>();
  late final _acterPinRefreshPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__ActerPin_refresh");

  late final _acterPinRefresh = _acterPinRefreshPtr.asFunction<
      int Function(
    int,
  )>();
  late final _pinUpdateBuilderTitlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__PinUpdateBuilder_title");

  late final _pinUpdateBuilderTitle = _pinUpdateBuilderTitlePtr.asFunction<
      void Function(
    int,
    int,
    int,
    int,
  )>();
  late final _pinUpdateBuilderUnsetTitleUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__PinUpdateBuilder_unset_title_update");

  late final _pinUpdateBuilderUnsetTitleUpdate =
      _pinUpdateBuilderUnsetTitleUpdatePtr.asFunction<
          void Function(
    int,
  )>();
  late final _pinUpdateBuilderContentTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__PinUpdateBuilder_content_text");

  late final _pinUpdateBuilderContentText =
      _pinUpdateBuilderContentTextPtr.asFunction<
          void Function(
    int,
    int,
    int,
    int,
  )>();
  late final _pinUpdateBuilderUnsetContentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__PinUpdateBuilder_unset_content");

  late final _pinUpdateBuilderUnsetContent =
      _pinUpdateBuilderUnsetContentPtr.asFunction<
          void Function(
    int,
  )>();
  late final _pinUpdateBuilderUnsetContentUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__PinUpdateBuilder_unset_content_update");

  late final _pinUpdateBuilderUnsetContentUpdate =
      _pinUpdateBuilderUnsetContentUpdatePtr.asFunction<
          void Function(
    int,
  )>();
  late final _pinUpdateBuilderUrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__PinUpdateBuilder_url");

  late final _pinUpdateBuilderUrl = _pinUpdateBuilderUrlPtr.asFunction<
      void Function(
    int,
    int,
    int,
    int,
  )>();
  late final _pinUpdateBuilderUnsetUrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__PinUpdateBuilder_unset_url");

  late final _pinUpdateBuilderUnsetUrl =
      _pinUpdateBuilderUnsetUrlPtr.asFunction<
          void Function(
    int,
  )>();
  late final _pinUpdateBuilderUnsetUrlUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__PinUpdateBuilder_unset_url_update");

  late final _pinUpdateBuilderUnsetUrlUpdate =
      _pinUpdateBuilderUnsetUrlUpdatePtr.asFunction<
          void Function(
    int,
  )>();
  late final _pinUpdateBuilderSendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__PinUpdateBuilder_send");

  late final _pinUpdateBuilderSend = _pinUpdateBuilderSendPtr.asFunction<
      int Function(
    int,
  )>();
  late final _textMessageContentBodyPtr = _lookup<
      ffi.NativeFunction<
          _TextMessageContentBodyReturn Function(
    ffi.Int64,
  )>>("__TextMessageContent_body");

  late final _textMessageContentBody = _textMessageContentBodyPtr.asFunction<
      _TextMessageContentBodyReturn Function(
    int,
  )>();
  late final _textMessageContentFormattedPtr = _lookup<
      ffi.NativeFunction<
          _TextMessageContentFormattedReturn Function(
    ffi.Int64,
  )>>("__TextMessageContent_formatted");

  late final _textMessageContentFormatted =
      _textMessageContentFormattedPtr.asFunction<
          _TextMessageContentFormattedReturn Function(
    int,
  )>();
  late final _calendarEventTitlePtr = _lookup<
      ffi.NativeFunction<
          _CalendarEventTitleReturn Function(
    ffi.Int64,
  )>>("__CalendarEvent_title");

  late final _calendarEventTitle = _calendarEventTitlePtr.asFunction<
      _CalendarEventTitleReturn Function(
    int,
  )>();
  late final _calendarEventDescriptionPtr = _lookup<
      ffi.NativeFunction<
          _CalendarEventDescriptionReturn Function(
    ffi.Int64,
  )>>("__CalendarEvent_description");

  late final _calendarEventDescription =
      _calendarEventDescriptionPtr.asFunction<
          _CalendarEventDescriptionReturn Function(
    int,
  )>();
  late final _calendarEventUtcStartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__CalendarEvent_utc_start");

  late final _calendarEventUtcStart = _calendarEventUtcStartPtr.asFunction<
      int Function(
    int,
  )>();
  late final _calendarEventUtcEndPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__CalendarEvent_utc_end");

  late final _calendarEventUtcEnd = _calendarEventUtcEndPtr.asFunction<
      int Function(
    int,
  )>();
  late final _calendarEventShowWithoutTimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
    ffi.Int64,
  )>>("__CalendarEvent_show_without_time");

  late final _calendarEventShowWithoutTime =
      _calendarEventShowWithoutTimePtr.asFunction<
          int Function(
    int,
  )>();
  late final _mediaSourceUrlPtr = _lookup<
      ffi.NativeFunction<
          _MediaSourceUrlReturn Function(
    ffi.Int64,
  )>>("__MediaSource_url");

  late final _mediaSourceUrl = _mediaSourceUrlPtr.asFunction<
      _MediaSourceUrlReturn Function(
    int,
  )>();
  late final _thumbnailInfoMimetypePtr = _lookup<
      ffi.NativeFunction<
          _ThumbnailInfoMimetypeReturn Function(
    ffi.Int64,
  )>>("__ThumbnailInfo_mimetype");

  late final _thumbnailInfoMimetype = _thumbnailInfoMimetypePtr.asFunction<
      _ThumbnailInfoMimetypeReturn Function(
    int,
  )>();
  late final _thumbnailInfoSizePtr = _lookup<
      ffi.NativeFunction<
          _ThumbnailInfoSizeReturn Function(
    ffi.Int64,
  )>>("__ThumbnailInfo_size");

  late final _thumbnailInfoSize = _thumbnailInfoSizePtr.asFunction<
      _ThumbnailInfoSizeReturn Function(
    int,
  )>();
  late final _thumbnailInfoWidthPtr = _lookup<
      ffi.NativeFunction<
          _ThumbnailInfoWidthReturn Function(
    ffi.Int64,
  )>>("__ThumbnailInfo_width");

  late final _thumbnailInfoWidth = _thumbnailInfoWidthPtr.asFunction<
      _ThumbnailInfoWidthReturn Function(
    int,
  )>();
  late final _thumbnailInfoHeightPtr = _lookup<
      ffi.NativeFunction<
          _ThumbnailInfoHeightReturn Function(
    ffi.Int64,
  )>>("__ThumbnailInfo_height");

  late final _thumbnailInfoHeight = _thumbnailInfoHeightPtr.asFunction<
      _ThumbnailInfoHeightReturn Function(
    int,
  )>();
  late final _deviceIdToStringPtr = _lookup<
      ffi.NativeFunction<
          _DeviceIdToStringReturn Function(
    ffi.Int64,
  )>>("__DeviceId_to_string");

  late final _deviceIdToString = _deviceIdToStringPtr.asFunction<
      _DeviceIdToStringReturn Function(
    int,
  )>();
  late final _eventIdToStringPtr = _lookup<
      ffi.NativeFunction<
          _EventIdToStringReturn Function(
    ffi.Int64,
  )>>("__EventId_to_string");

  late final _eventIdToString = _eventIdToStringPtr.asFunction<
      _EventIdToStringReturn Function(
    int,
  )>();
  late final _mxcUriToStringPtr = _lookup<
      ffi.NativeFunction<
          _MxcUriToStringReturn Function(
    ffi.Int64,
  )>>("__MxcUri_to_string");

  late final _mxcUriToString = _mxcUriToStringPtr.asFunction<
      _MxcUriToStringReturn Function(
    int,
  )>();
  late final _roomIdToStringPtr = _lookup<
      ffi.NativeFunction<
          _RoomIdToStringReturn Function(
    ffi.Int64,
  )>>("__RoomId_to_string");

  late final _roomIdToString = _roomIdToStringPtr.asFunction<
      _RoomIdToStringReturn Function(
    int,
  )>();
  late final _userIdToStringPtr = _lookup<
      ffi.NativeFunction<
          _UserIdToStringReturn Function(
    ffi.Int64,
  )>>("__UserId_to_string");

  late final _userIdToString = _userIdToStringPtr.asFunction<
      _UserIdToStringReturn Function(
    int,
  )>();
  late final _roomEventItemEventIdPtr = _lookup<
      ffi.NativeFunction<
          _RoomEventItemEventIdReturn Function(
    ffi.Int64,
  )>>("__RoomEventItem_event_id");

  late final _roomEventItemEventId = _roomEventItemEventIdPtr.asFunction<
      _RoomEventItemEventIdReturn Function(
    int,
  )>();
  late final _roomEventItemSenderPtr = _lookup<
      ffi.NativeFunction<
          _RoomEventItemSenderReturn Function(
    ffi.Int64,
  )>>("__RoomEventItem_sender");

  late final _roomEventItemSender = _roomEventItemSenderPtr.asFunction<
      _RoomEventItemSenderReturn Function(
    int,
  )>();
  late final _roomEventItemOriginServerTsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
    ffi.Int64,
  )>>("__RoomEventItem_origin_server_ts");

  late final _roomEventItemOriginServerTs =
      _roomEventItemOriginServerTsPtr.asFunction<
          int Function(
    int,
  )>();
  late final _roomEventItemEventTypePtr = _lookup<
      ffi.NativeFunction<
          _RoomEventItemEventTypeReturn Function(
    ffi.Int64,
  )>>("__RoomEventItem_event_type");

  late final _roomEventItemEventType = _roomEventItemEventTypePtr.asFunction<
      _RoomEventItemEventTypeReturn Function(
    int,
  )>();
  late final _roomEventItemSubTypePtr = _lookup<
      ffi.NativeFunction<
          _RoomEventItemSubTypeReturn Function(
    ffi.Int64,
  )>>("__RoomEventItem_sub_type");

  late final _roomEventItemSubType = _roomEventItemSubTypePtr.asFunction<
      _RoomEventItemSubTypeReturn Function(
    int,
  )>();
  late final _roomEventItemTextDescPtr = _lookup<
      ffi.NativeFunction<
          _RoomEventItemTextDescReturn Function(
    ffi.Int64,
  )>>("__RoomEventItem_text_desc");

  late final _roomEventItemTextDesc = _roomEventItemTextDescPtr.asFunction<
      _RoomEventItemTextDescReturn Function(
    int,
  )>();
  late final _roomEventItemImageDescPtr = _lookup<
      ffi.NativeFunction<
          _RoomEventItemImageDescReturn Function(
    ffi.Int64,
  )>>("__RoomEventItem_image_desc");

  late final _roomEventItemImageDesc = _roomEventItemImageDescPtr.asFunction<
      _RoomEventItemImageDescReturn Function(
    int,
  )>();
  late final _roomEventItemAudioDescPtr = _lookup<
      ffi.NativeFunction<
          _RoomEventItemAudioDescReturn Function(
    ffi.Int64,
  )>>("__RoomEventItem_audio_desc");

  late final _roomEventItemAudioDesc = _roomEventItemAudioDescPtr.asFunction<
      _RoomEventItemAudioDescReturn Function(
    int,
  )>();
  late final _roomEventItemVideoDescPtr = _lookup<
      ffi.NativeFunction<
          _RoomEventItemVideoDescReturn Function(
    ffi.Int64,
  )>>("__RoomEventItem_video_desc");

  late final _roomEventItemVideoDesc = _roomEventItemVideoDescPtr.asFunction<
      _RoomEventItemVideoDescReturn Function(
    int,
  )>();
  late final _roomEventItemFileDescPtr = _lookup<
      ffi.NativeFunction<
          _RoomEventItemFileDescReturn Function(
    ffi.Int64,
  )>>("__RoomEventItem_file_desc");

  late final _roomEventItemFileDesc = _roomEventItemFileDescPtr.asFunction<
      _RoomEventItemFileDescReturn Function(
    int,
  )>();
  late final _roomEventItemInReplyToPtr = _lookup<
      ffi.NativeFunction<
          _RoomEventItemInReplyToReturn Function(
    ffi.Int64,
  )>>("__RoomEventItem_in_reply_to");

  late final _roomEventItemInReplyTo = _roomEventItemInReplyToPtr.asFunction<
      _RoomEventItemInReplyToReturn Function(
    int,
  )>();
  late final _roomEventItemReactionKeysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__RoomEventItem_reaction_keys");

  late final _roomEventItemReactionKeys =
      _roomEventItemReactionKeysPtr.asFunction<
          int Function(
    int,
  )>();
  late final _roomEventItemReactionDescPtr = _lookup<
      ffi.NativeFunction<
          _RoomEventItemReactionDescReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__RoomEventItem_reaction_desc");

  late final _roomEventItemReactionDesc =
      _roomEventItemReactionDescPtr.asFunction<
          _RoomEventItemReactionDescReturn Function(
    int,
    int,
    int,
    int,
  )>();
  late final _roomEventItemIsEditablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
    ffi.Int64,
  )>>("__RoomEventItem_is_editable");

  late final _roomEventItemIsEditable = _roomEventItemIsEditablePtr.asFunction<
      int Function(
    int,
  )>();
  late final _roomVirtualItemEventTypePtr = _lookup<
      ffi.NativeFunction<
          _RoomVirtualItemEventTypeReturn Function(
    ffi.Int64,
  )>>("__RoomVirtualItem_event_type");

  late final _roomVirtualItemEventType =
      _roomVirtualItemEventTypePtr.asFunction<
          _RoomVirtualItemEventTypeReturn Function(
    int,
  )>();
  late final _roomVirtualItemDescPtr = _lookup<
      ffi.NativeFunction<
          _RoomVirtualItemDescReturn Function(
    ffi.Int64,
  )>>("__RoomVirtualItem_desc");

  late final _roomVirtualItemDesc = _roomVirtualItemDescPtr.asFunction<
      _RoomVirtualItemDescReturn Function(
    int,
  )>();
  late final _roomMessageItemTypePtr = _lookup<
      ffi.NativeFunction<
          _RoomMessageItemTypeReturn Function(
    ffi.Int64,
  )>>("__RoomMessage_item_type");

  late final _roomMessageItemType = _roomMessageItemTypePtr.asFunction<
      _RoomMessageItemTypeReturn Function(
    int,
  )>();
  late final _roomMessageRoomIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__RoomMessage_room_id");

  late final _roomMessageRoomId = _roomMessageRoomIdPtr.asFunction<
      int Function(
    int,
  )>();
  late final _roomMessageEventItemPtr = _lookup<
      ffi.NativeFunction<
          _RoomMessageEventItemReturn Function(
    ffi.Int64,
  )>>("__RoomMessage_event_item");

  late final _roomMessageEventItem = _roomMessageEventItemPtr.asFunction<
      _RoomMessageEventItemReturn Function(
    int,
  )>();
  late final _roomMessageVirtualItemPtr = _lookup<
      ffi.NativeFunction<
          _RoomMessageVirtualItemReturn Function(
    ffi.Int64,
  )>>("__RoomMessage_virtual_item");

  late final _roomMessageVirtualItem = _roomMessageVirtualItemPtr.asFunction<
      _RoomMessageVirtualItemReturn Function(
    int,
  )>();
  late final _textDescBodyPtr = _lookup<
      ffi.NativeFunction<
          _TextDescBodyReturn Function(
    ffi.Int64,
  )>>("__TextDesc_body");

  late final _textDescBody = _textDescBodyPtr.asFunction<
      _TextDescBodyReturn Function(
    int,
  )>();
  late final _textDescFormattedBodyPtr = _lookup<
      ffi.NativeFunction<
          _TextDescFormattedBodyReturn Function(
    ffi.Int64,
  )>>("__TextDesc_formatted_body");

  late final _textDescFormattedBody = _textDescFormattedBodyPtr.asFunction<
      _TextDescFormattedBodyReturn Function(
    int,
  )>();
  late final _imageDescNamePtr = _lookup<
      ffi.NativeFunction<
          _ImageDescNameReturn Function(
    ffi.Int64,
  )>>("__ImageDesc_name");

  late final _imageDescName = _imageDescNamePtr.asFunction<
      _ImageDescNameReturn Function(
    int,
  )>();
  late final _imageDescSourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__ImageDesc_source");

  late final _imageDescSource = _imageDescSourcePtr.asFunction<
      int Function(
    int,
  )>();
  late final _imageDescMimetypePtr = _lookup<
      ffi.NativeFunction<
          _ImageDescMimetypeReturn Function(
    ffi.Int64,
  )>>("__ImageDesc_mimetype");

  late final _imageDescMimetype = _imageDescMimetypePtr.asFunction<
      _ImageDescMimetypeReturn Function(
    int,
  )>();
  late final _imageDescSizePtr = _lookup<
      ffi.NativeFunction<
          _ImageDescSizeReturn Function(
    ffi.Int64,
  )>>("__ImageDesc_size");

  late final _imageDescSize = _imageDescSizePtr.asFunction<
      _ImageDescSizeReturn Function(
    int,
  )>();
  late final _imageDescWidthPtr = _lookup<
      ffi.NativeFunction<
          _ImageDescWidthReturn Function(
    ffi.Int64,
  )>>("__ImageDesc_width");

  late final _imageDescWidth = _imageDescWidthPtr.asFunction<
      _ImageDescWidthReturn Function(
    int,
  )>();
  late final _imageDescHeightPtr = _lookup<
      ffi.NativeFunction<
          _ImageDescHeightReturn Function(
    ffi.Int64,
  )>>("__ImageDesc_height");

  late final _imageDescHeight = _imageDescHeightPtr.asFunction<
      _ImageDescHeightReturn Function(
    int,
  )>();
  late final _imageDescThumbnailInfoPtr = _lookup<
      ffi.NativeFunction<
          _ImageDescThumbnailInfoReturn Function(
    ffi.Int64,
  )>>("__ImageDesc_thumbnail_info");

  late final _imageDescThumbnailInfo = _imageDescThumbnailInfoPtr.asFunction<
      _ImageDescThumbnailInfoReturn Function(
    int,
  )>();
  late final _imageDescThumbnailSourcePtr = _lookup<
      ffi.NativeFunction<
          _ImageDescThumbnailSourceReturn Function(
    ffi.Int64,
  )>>("__ImageDesc_thumbnail_source");

  late final _imageDescThumbnailSource =
      _imageDescThumbnailSourcePtr.asFunction<
          _ImageDescThumbnailSourceReturn Function(
    int,
  )>();
  late final _audioDescNamePtr = _lookup<
      ffi.NativeFunction<
          _AudioDescNameReturn Function(
    ffi.Int64,
  )>>("__AudioDesc_name");

  late final _audioDescName = _audioDescNamePtr.asFunction<
      _AudioDescNameReturn Function(
    int,
  )>();
  late final _audioDescSourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__AudioDesc_source");

  late final _audioDescSource = _audioDescSourcePtr.asFunction<
      int Function(
    int,
  )>();
  late final _audioDescMimetypePtr = _lookup<
      ffi.NativeFunction<
          _AudioDescMimetypeReturn Function(
    ffi.Int64,
  )>>("__AudioDesc_mimetype");

  late final _audioDescMimetype = _audioDescMimetypePtr.asFunction<
      _AudioDescMimetypeReturn Function(
    int,
  )>();
  late final _audioDescSizePtr = _lookup<
      ffi.NativeFunction<
          _AudioDescSizeReturn Function(
    ffi.Int64,
  )>>("__AudioDesc_size");

  late final _audioDescSize = _audioDescSizePtr.asFunction<
      _AudioDescSizeReturn Function(
    int,
  )>();
  late final _audioDescDurationPtr = _lookup<
      ffi.NativeFunction<
          _AudioDescDurationReturn Function(
    ffi.Int64,
  )>>("__AudioDesc_duration");

  late final _audioDescDuration = _audioDescDurationPtr.asFunction<
      _AudioDescDurationReturn Function(
    int,
  )>();
  late final _videoDescNamePtr = _lookup<
      ffi.NativeFunction<
          _VideoDescNameReturn Function(
    ffi.Int64,
  )>>("__VideoDesc_name");

  late final _videoDescName = _videoDescNamePtr.asFunction<
      _VideoDescNameReturn Function(
    int,
  )>();
  late final _videoDescSourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__VideoDesc_source");

  late final _videoDescSource = _videoDescSourcePtr.asFunction<
      int Function(
    int,
  )>();
  late final _videoDescMimetypePtr = _lookup<
      ffi.NativeFunction<
          _VideoDescMimetypeReturn Function(
    ffi.Int64,
  )>>("__VideoDesc_mimetype");

  late final _videoDescMimetype = _videoDescMimetypePtr.asFunction<
      _VideoDescMimetypeReturn Function(
    int,
  )>();
  late final _videoDescSizePtr = _lookup<
      ffi.NativeFunction<
          _VideoDescSizeReturn Function(
    ffi.Int64,
  )>>("__VideoDesc_size");

  late final _videoDescSize = _videoDescSizePtr.asFunction<
      _VideoDescSizeReturn Function(
    int,
  )>();
  late final _videoDescWidthPtr = _lookup<
      ffi.NativeFunction<
          _VideoDescWidthReturn Function(
    ffi.Int64,
  )>>("__VideoDesc_width");

  late final _videoDescWidth = _videoDescWidthPtr.asFunction<
      _VideoDescWidthReturn Function(
    int,
  )>();
  late final _videoDescHeightPtr = _lookup<
      ffi.NativeFunction<
          _VideoDescHeightReturn Function(
    ffi.Int64,
  )>>("__VideoDesc_height");

  late final _videoDescHeight = _videoDescHeightPtr.asFunction<
      _VideoDescHeightReturn Function(
    int,
  )>();
  late final _videoDescBlurhashPtr = _lookup<
      ffi.NativeFunction<
          _VideoDescBlurhashReturn Function(
    ffi.Int64,
  )>>("__VideoDesc_blurhash");

  late final _videoDescBlurhash = _videoDescBlurhashPtr.asFunction<
      _VideoDescBlurhashReturn Function(
    int,
  )>();
  late final _videoDescDurationPtr = _lookup<
      ffi.NativeFunction<
          _VideoDescDurationReturn Function(
    ffi.Int64,
  )>>("__VideoDesc_duration");

  late final _videoDescDuration = _videoDescDurationPtr.asFunction<
      _VideoDescDurationReturn Function(
    int,
  )>();
  late final _videoDescThumbnailInfoPtr = _lookup<
      ffi.NativeFunction<
          _VideoDescThumbnailInfoReturn Function(
    ffi.Int64,
  )>>("__VideoDesc_thumbnail_info");

  late final _videoDescThumbnailInfo = _videoDescThumbnailInfoPtr.asFunction<
      _VideoDescThumbnailInfoReturn Function(
    int,
  )>();
  late final _videoDescThumbnailSourcePtr = _lookup<
      ffi.NativeFunction<
          _VideoDescThumbnailSourceReturn Function(
    ffi.Int64,
  )>>("__VideoDesc_thumbnail_source");

  late final _videoDescThumbnailSource =
      _videoDescThumbnailSourcePtr.asFunction<
          _VideoDescThumbnailSourceReturn Function(
    int,
  )>();
  late final _fileDescNamePtr = _lookup<
      ffi.NativeFunction<
          _FileDescNameReturn Function(
    ffi.Int64,
  )>>("__FileDesc_name");

  late final _fileDescName = _fileDescNamePtr.asFunction<
      _FileDescNameReturn Function(
    int,
  )>();
  late final _fileDescSourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__FileDesc_source");

  late final _fileDescSource = _fileDescSourcePtr.asFunction<
      int Function(
    int,
  )>();
  late final _fileDescMimetypePtr = _lookup<
      ffi.NativeFunction<
          _FileDescMimetypeReturn Function(
    ffi.Int64,
  )>>("__FileDesc_mimetype");

  late final _fileDescMimetype = _fileDescMimetypePtr.asFunction<
      _FileDescMimetypeReturn Function(
    int,
  )>();
  late final _fileDescSizePtr = _lookup<
      ffi.NativeFunction<
          _FileDescSizeReturn Function(
    ffi.Int64,
  )>>("__FileDesc_size");

  late final _fileDescSize = _fileDescSizePtr.asFunction<
      _FileDescSizeReturn Function(
    int,
  )>();
  late final _fileDescThumbnailInfoPtr = _lookup<
      ffi.NativeFunction<
          _FileDescThumbnailInfoReturn Function(
    ffi.Int64,
  )>>("__FileDesc_thumbnail_info");

  late final _fileDescThumbnailInfo = _fileDescThumbnailInfoPtr.asFunction<
      _FileDescThumbnailInfoReturn Function(
    int,
  )>();
  late final _fileDescThumbnailSourcePtr = _lookup<
      ffi.NativeFunction<
          _FileDescThumbnailSourceReturn Function(
    ffi.Int64,
  )>>("__FileDesc_thumbnail_source");

  late final _fileDescThumbnailSource = _fileDescThumbnailSourcePtr.asFunction<
      _FileDescThumbnailSourceReturn Function(
    int,
  )>();
  late final _reactionDescCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
    ffi.Int64,
  )>>("__ReactionDesc_count");

  late final _reactionDescCount = _reactionDescCountPtr.asFunction<
      int Function(
    int,
  )>();
  late final _reactionDescSendersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__ReactionDesc_senders");

  late final _reactionDescSenders = _reactionDescSendersPtr.asFunction<
      int Function(
    int,
  )>();
  late final _timelineDiffActionPtr = _lookup<
      ffi.NativeFunction<
          _TimelineDiffActionReturn Function(
    ffi.Int64,
  )>>("__TimelineDiff_action");

  late final _timelineDiffAction = _timelineDiffActionPtr.asFunction<
      _TimelineDiffActionReturn Function(
    int,
  )>();
  late final _timelineDiffValuesPtr = _lookup<
      ffi.NativeFunction<
          _TimelineDiffValuesReturn Function(
    ffi.Int64,
  )>>("__TimelineDiff_values");

  late final _timelineDiffValues = _timelineDiffValuesPtr.asFunction<
      _TimelineDiffValuesReturn Function(
    int,
  )>();
  late final _timelineDiffIndexPtr = _lookup<
      ffi.NativeFunction<
          _TimelineDiffIndexReturn Function(
    ffi.Int64,
  )>>("__TimelineDiff_index");

  late final _timelineDiffIndex = _timelineDiffIndexPtr.asFunction<
      _TimelineDiffIndexReturn Function(
    int,
  )>();
  late final _timelineDiffValuePtr = _lookup<
      ffi.NativeFunction<
          _TimelineDiffValueReturn Function(
    ffi.Int64,
  )>>("__TimelineDiff_value");

  late final _timelineDiffValue = _timelineDiffValuePtr.asFunction<
      _TimelineDiffValueReturn Function(
    int,
  )>();
  late final _timelineStreamDiffRxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__TimelineStream_diff_rx");

  late final _timelineStreamDiffRx = _timelineStreamDiffRxPtr.asFunction<
      int Function(
    int,
  )>();
  late final _timelineStreamNextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__TimelineStream_next");

  late final _timelineStreamNext = _timelineStreamNextPtr.asFunction<
      int Function(
    int,
  )>();
  late final _timelineStreamPaginateBackwardsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Uint16,
  )>>("__TimelineStream_paginate_backwards");

  late final _timelineStreamPaginateBackwards =
      _timelineStreamPaginateBackwardsPtr.asFunction<
          int Function(
    int,
    int,
  )>();
  late final _timelineStreamEditPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__TimelineStream_edit");

  late final _timelineStreamEdit = _timelineStreamEditPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _conversationGetProfilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Conversation_get_profile");

  late final _conversationGetProfile = _conversationGetProfilePtr.asFunction<
      int Function(
    int,
  )>();
  late final _conversationTopicPtr = _lookup<
      ffi.NativeFunction<
          _ConversationTopicReturn Function(
    ffi.Int64,
  )>>("__Conversation_topic");

  late final _conversationTopic = _conversationTopicPtr.asFunction<
      _ConversationTopicReturn Function(
    int,
  )>();
  late final _conversationActiveMembersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Conversation_active_members");

  late final _conversationActiveMembers =
      _conversationActiveMembersPtr.asFunction<
          int Function(
    int,
  )>();
  late final _conversationGetMemberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Conversation_get_member");

  late final _conversationGetMember = _conversationGetMemberPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _conversationTimelineStreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Conversation_timeline_stream");

  late final _conversationTimelineStream =
      _conversationTimelineStreamPtr.asFunction<
          int Function(
    int,
  )>();
  late final _conversationLatestMessagePtr = _lookup<
      ffi.NativeFunction<
          _ConversationLatestMessageReturn Function(
    ffi.Int64,
  )>>("__Conversation_latest_message");

  late final _conversationLatestMessage =
      _conversationLatestMessagePtr.asFunction<
          _ConversationLatestMessageReturn Function(
    int,
  )>();
  late final _conversationGetRoomIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Conversation_get_room_id");

  late final _conversationGetRoomId = _conversationGetRoomIdPtr.asFunction<
      int Function(
    int,
  )>();
  late final _conversationTypingNoticePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Uint8,
  )>>("__Conversation_typing_notice");

  late final _conversationTypingNotice =
      _conversationTypingNoticePtr.asFunction<
          int Function(
    int,
    int,
  )>();
  late final _conversationReadReceiptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Conversation_read_receipt");

  late final _conversationReadReceipt = _conversationReadReceiptPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _conversationSendPlainMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Conversation_send_plain_message");

  late final _conversationSendPlainMessage =
      _conversationSendPlainMessagePtr.asFunction<
          int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _conversationSendFormattedMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Conversation_send_formatted_message");

  late final _conversationSendFormattedMessage =
      _conversationSendFormattedMessagePtr.asFunction<
          int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _conversationSendReactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Conversation_send_reaction");

  late final _conversationSendReaction =
      _conversationSendReactionPtr.asFunction<
          int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _conversationSendImageMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Conversation_send_image_message");

  late final _conversationSendImageMessage =
      _conversationSendImageMessagePtr.asFunction<
          int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _conversationImageBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Conversation_image_binary");

  late final _conversationImageBinary = _conversationImageBinaryPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _conversationSendAudioMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Uint32,
  )>>("__Conversation_send_audio_message");

  late final _conversationSendAudioMessage =
      _conversationSendAudioMessagePtr.asFunction<
          int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _conversationAudioBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Conversation_audio_binary");

  late final _conversationAudioBinary = _conversationAudioBinaryPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _conversationSendVideoMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Conversation_send_video_message");

  late final _conversationSendVideoMessage =
      _conversationSendVideoMessagePtr.asFunction<
          int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _conversationVideoBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Conversation_video_binary");

  late final _conversationVideoBinary = _conversationVideoBinaryPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _conversationSendFileMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint32,
  )>>("__Conversation_send_file_message");

  late final _conversationSendFileMessage =
      _conversationSendFileMessagePtr.asFunction<
          int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _conversationFileBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Conversation_file_binary");

  late final _conversationFileBinary = _conversationFileBinaryPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _conversationRoomTypePtr = _lookup<
      ffi.NativeFunction<
          _ConversationRoomTypeReturn Function(
    ffi.Int64,
  )>>("__Conversation_room_type");

  late final _conversationRoomType = _conversationRoomTypePtr.asFunction<
      _ConversationRoomTypeReturn Function(
    int,
  )>();
  late final _conversationInviteUserPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Conversation_invite_user");

  late final _conversationInviteUser = _conversationInviteUserPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _conversationJoinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Conversation_join");

  late final _conversationJoin = _conversationJoinPtr.asFunction<
      int Function(
    int,
  )>();
  late final _conversationLeavePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Conversation_leave");

  late final _conversationLeave = _conversationLeavePtr.asFunction<
      int Function(
    int,
  )>();
  late final _conversationGetInviteesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Conversation_get_invitees");

  late final _conversationGetInvitees = _conversationGetInviteesPtr.asFunction<
      int Function(
    int,
  )>();
  late final _conversationDownloadMediaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Conversation_download_media");

  late final _conversationDownloadMedia =
      _conversationDownloadMediaPtr.asFunction<
          int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _conversationMediaPathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Conversation_media_path");

  late final _conversationMediaPath = _conversationMediaPathPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _conversationUserReceiptsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Conversation_user_receipts");

  late final _conversationUserReceipts =
      _conversationUserReceiptsPtr.asFunction<
          int Function(
    int,
  )>();
  late final _conversationIsEncryptedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Conversation_is_encrypted");

  late final _conversationIsEncrypted = _conversationIsEncryptedPtr.asFunction<
      int Function(
    int,
  )>();
  late final _conversationGetMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Conversation_get_message");

  late final _conversationGetMessage = _conversationGetMessagePtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _conversationSendTextReplyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Conversation_send_text_reply");

  late final _conversationSendTextReply =
      _conversationSendTextReplyPtr.asFunction<
          int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _conversationSendImageReplyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Conversation_send_image_reply");

  late final _conversationSendImageReply =
      _conversationSendImageReplyPtr.asFunction<
          int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _conversationSendAudioReplyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Conversation_send_audio_reply");

  late final _conversationSendAudioReply =
      _conversationSendAudioReplyPtr.asFunction<
          int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _conversationSendVideoReplyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Conversation_send_video_reply");

  late final _conversationSendVideoReply =
      _conversationSendVideoReplyPtr.asFunction<
          int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _conversationSendFileReplyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Conversation_send_file_reply");

  late final _conversationSendFileReply =
      _conversationSendFileReplyPtr.asFunction<
          int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _conversationRedactMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Conversation_redact_message");

  late final _conversationRedactMessage =
      _conversationRedactMessagePtr.asFunction<
          int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _conversationUpdatePowerLevelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int32,
  )>>("__Conversation_update_power_level");

  late final _conversationUpdatePowerLevel =
      _conversationUpdatePowerLevelPtr.asFunction<
          int Function(
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _commentDraftContentTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__CommentDraft_content_text");

  late final _commentDraftContentText = _commentDraftContentTextPtr.asFunction<
      void Function(
    int,
    int,
    int,
    int,
  )>();
  late final _commentDraftContentFormattedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__CommentDraft_content_formatted");

  late final _commentDraftContentFormatted =
      _commentDraftContentFormattedPtr.asFunction<
          void Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _commentDraftSendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__CommentDraft_send");

  late final _commentDraftSend = _commentDraftSendPtr.asFunction<
      int Function(
    int,
  )>();
  late final _commentSenderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Comment_sender");

  late final _commentSender = _commentSenderPtr.asFunction<
      int Function(
    int,
  )>();
  late final _commentOriginServerTsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(
    ffi.Int64,
  )>>("__Comment_origin_server_ts");

  late final _commentOriginServerTs = _commentOriginServerTsPtr.asFunction<
      int Function(
    int,
  )>();
  late final _commentContentTextPtr = _lookup<
      ffi.NativeFunction<
          _CommentContentTextReturn Function(
    ffi.Int64,
  )>>("__Comment_content_text");

  late final _commentContentText = _commentContentTextPtr.asFunction<
      _CommentContentTextReturn Function(
    int,
  )>();
  late final _commentContentFormattedPtr = _lookup<
      ffi.NativeFunction<
          _CommentContentFormattedReturn Function(
    ffi.Int64,
  )>>("__Comment_content_formatted");

  late final _commentContentFormatted = _commentContentFormattedPtr.asFunction<
      _CommentContentFormattedReturn Function(
    int,
  )>();
  late final _commentReplyBuilderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Comment_reply_builder");

  late final _commentReplyBuilder = _commentReplyBuilderPtr.asFunction<
      int Function(
    int,
  )>();
  late final _commentsManagerCommentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__CommentsManager_comments");

  late final _commentsManagerComments = _commentsManagerCommentsPtr.asFunction<
      int Function(
    int,
  )>();
  late final _commentsManagerHasCommentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
    ffi.Int64,
  )>>("__CommentsManager_has_comments");

  late final _commentsManagerHasComments =
      _commentsManagerHasCommentsPtr.asFunction<
          int Function(
    int,
  )>();
  late final _commentsManagerCommentsCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
    ffi.Int64,
  )>>("__CommentsManager_comments_count");

  late final _commentsManagerCommentsCount =
      _commentsManagerCommentsCountPtr.asFunction<
          int Function(
    int,
  )>();
  late final _commentsManagerCommentDraftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__CommentsManager_comment_draft");

  late final _commentsManagerCommentDraft =
      _commentsManagerCommentDraftPtr.asFunction<
          int Function(
    int,
  )>();
  late final _taskTitlePtr = _lookup<
      ffi.NativeFunction<
          _TaskTitleReturn Function(
    ffi.Int64,
  )>>("__Task_title");

  late final _taskTitle = _taskTitlePtr.asFunction<
      _TaskTitleReturn Function(
    int,
  )>();
  late final _taskDescriptionTextPtr = _lookup<
      ffi.NativeFunction<
          _TaskDescriptionTextReturn Function(
    ffi.Int64,
  )>>("__Task_description_text");

  late final _taskDescriptionText = _taskDescriptionTextPtr.asFunction<
      _TaskDescriptionTextReturn Function(
    int,
  )>();
  late final _taskAssigneesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Task_assignees");

  late final _taskAssignees = _taskAssigneesPtr.asFunction<
      int Function(
    int,
  )>();
  late final _taskSubscribersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Task_subscribers");

  late final _taskSubscribers = _taskSubscribersPtr.asFunction<
      int Function(
    int,
  )>();
  late final _taskSortOrderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
    ffi.Int64,
  )>>("__Task_sort_order");

  late final _taskSortOrder = _taskSortOrderPtr.asFunction<
      int Function(
    int,
  )>();
  late final _taskPriorityPtr = _lookup<
      ffi.NativeFunction<
          _TaskPriorityReturn Function(
    ffi.Int64,
  )>>("__Task_priority");

  late final _taskPriority = _taskPriorityPtr.asFunction<
      _TaskPriorityReturn Function(
    int,
  )>();
  late final _taskUtcDuePtr = _lookup<
      ffi.NativeFunction<
          _TaskUtcDueReturn Function(
    ffi.Int64,
  )>>("__Task_utc_due");

  late final _taskUtcDue = _taskUtcDuePtr.asFunction<
      _TaskUtcDueReturn Function(
    int,
  )>();
  late final _taskUtcStartPtr = _lookup<
      ffi.NativeFunction<
          _TaskUtcStartReturn Function(
    ffi.Int64,
  )>>("__Task_utc_start");

  late final _taskUtcStart = _taskUtcStartPtr.asFunction<
      _TaskUtcStartReturn Function(
    int,
  )>();
  late final _taskColorPtr = _lookup<
      ffi.NativeFunction<
          _TaskColorReturn Function(
    ffi.Int64,
  )>>("__Task_color");

  late final _taskColor = _taskColorPtr.asFunction<
      _TaskColorReturn Function(
    int,
  )>();
  late final _taskIsDonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
    ffi.Int64,
  )>>("__Task_is_done");

  late final _taskIsDone = _taskIsDonePtr.asFunction<
      int Function(
    int,
  )>();
  late final _taskProgressPercentPtr = _lookup<
      ffi.NativeFunction<
          _TaskProgressPercentReturn Function(
    ffi.Int64,
  )>>("__Task_progress_percent");

  late final _taskProgressPercent = _taskProgressPercentPtr.asFunction<
      _TaskProgressPercentReturn Function(
    int,
  )>();
  late final _taskKeywordsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Task_keywords");

  late final _taskKeywords = _taskKeywordsPtr.asFunction<
      int Function(
    int,
  )>();
  late final _taskCategoriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Task_categories");

  late final _taskCategories = _taskCategoriesPtr.asFunction<
      int Function(
    int,
  )>();
  late final _taskUpdateBuilderPtr = _lookup<
      ffi.NativeFunction<
          _TaskUpdateBuilderReturn Function(
    ffi.Int64,
  )>>("__Task_update_builder");

  late final _taskUpdateBuilder = _taskUpdateBuilderPtr.asFunction<
      _TaskUpdateBuilderReturn Function(
    int,
  )>();
  late final _taskSubscribePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Task_subscribe");

  late final _taskSubscribe = _taskSubscribePtr.asFunction<
      int Function(
    int,
  )>();
  late final _taskRefreshPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Task_refresh");

  late final _taskRefresh = _taskRefreshPtr.asFunction<
      int Function(
    int,
  )>();
  late final _taskCommentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Task_comments");

  late final _taskComments = _taskCommentsPtr.asFunction<
      int Function(
    int,
  )>();
  late final _taskUpdateBuilderTitlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__TaskUpdateBuilder_title");

  late final _taskUpdateBuilderTitle = _taskUpdateBuilderTitlePtr.asFunction<
      void Function(
    int,
    int,
    int,
    int,
  )>();
  late final _taskUpdateBuilderUnsetTitleUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskUpdateBuilder_unset_title_update");

  late final _taskUpdateBuilderUnsetTitleUpdate =
      _taskUpdateBuilderUnsetTitleUpdatePtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskUpdateBuilderDescriptionTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__TaskUpdateBuilder_description_text");

  late final _taskUpdateBuilderDescriptionText =
      _taskUpdateBuilderDescriptionTextPtr.asFunction<
          void Function(
    int,
    int,
    int,
    int,
  )>();
  late final _taskUpdateBuilderUnsetDescriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskUpdateBuilder_unset_description");

  late final _taskUpdateBuilderUnsetDescription =
      _taskUpdateBuilderUnsetDescriptionPtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskUpdateBuilderUnsetDescriptionUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskUpdateBuilder_unset_description_update");

  late final _taskUpdateBuilderUnsetDescriptionUpdate =
      _taskUpdateBuilderUnsetDescriptionUpdatePtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskUpdateBuilderSortOrderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Uint32,
  )>>("__TaskUpdateBuilder_sort_order");

  late final _taskUpdateBuilderSortOrder =
      _taskUpdateBuilderSortOrderPtr.asFunction<
          void Function(
    int,
    int,
  )>();
  late final _taskUpdateBuilderUnsetSortOrderUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskUpdateBuilder_unset_sort_order_update");

  late final _taskUpdateBuilderUnsetSortOrderUpdate =
      _taskUpdateBuilderUnsetSortOrderUpdatePtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskUpdateBuilderColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
  )>>("__TaskUpdateBuilder_color");

  late final _taskUpdateBuilderColor = _taskUpdateBuilderColorPtr.asFunction<
      void Function(
    int,
    int,
  )>();
  late final _taskUpdateBuilderUnsetColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskUpdateBuilder_unset_color");

  late final _taskUpdateBuilderUnsetColor =
      _taskUpdateBuilderUnsetColorPtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskUpdateBuilderUnsetColorUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskUpdateBuilder_unset_color_update");

  late final _taskUpdateBuilderUnsetColorUpdate =
      _taskUpdateBuilderUnsetColorUpdatePtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskUpdateBuilderUtcDueFromRfc3339Ptr = _lookup<
      ffi.NativeFunction<
          _TaskUpdateBuilderUtcDueFromRfc3339Return Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__TaskUpdateBuilder_utc_due_from_rfc3339");

  late final _taskUpdateBuilderUtcDueFromRfc3339 =
      _taskUpdateBuilderUtcDueFromRfc3339Ptr.asFunction<
          _TaskUpdateBuilderUtcDueFromRfc3339Return Function(
    int,
    int,
    int,
    int,
  )>();
  late final _taskUpdateBuilderUtcDueFromRfc2822Ptr = _lookup<
      ffi.NativeFunction<
          _TaskUpdateBuilderUtcDueFromRfc2822Return Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__TaskUpdateBuilder_utc_due_from_rfc2822");

  late final _taskUpdateBuilderUtcDueFromRfc2822 =
      _taskUpdateBuilderUtcDueFromRfc2822Ptr.asFunction<
          _TaskUpdateBuilderUtcDueFromRfc2822Return Function(
    int,
    int,
    int,
    int,
  )>();
  late final _taskUpdateBuilderUtcDueFromFormatPtr = _lookup<
      ffi.NativeFunction<
          _TaskUpdateBuilderUtcDueFromFormatReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__TaskUpdateBuilder_utc_due_from_format");

  late final _taskUpdateBuilderUtcDueFromFormat =
      _taskUpdateBuilderUtcDueFromFormatPtr.asFunction<
          _TaskUpdateBuilderUtcDueFromFormatReturn Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _taskUpdateBuilderUnsetUtcDuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskUpdateBuilder_unset_utc_due");

  late final _taskUpdateBuilderUnsetUtcDue =
      _taskUpdateBuilderUnsetUtcDuePtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskUpdateBuilderUnsetUtcDueUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskUpdateBuilder_unset_utc_due_update");

  late final _taskUpdateBuilderUnsetUtcDueUpdate =
      _taskUpdateBuilderUnsetUtcDueUpdatePtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskUpdateBuilderUtcStartFromRfc3339Ptr = _lookup<
      ffi.NativeFunction<
          _TaskUpdateBuilderUtcStartFromRfc3339Return Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__TaskUpdateBuilder_utc_start_from_rfc3339");

  late final _taskUpdateBuilderUtcStartFromRfc3339 =
      _taskUpdateBuilderUtcStartFromRfc3339Ptr.asFunction<
          _TaskUpdateBuilderUtcStartFromRfc3339Return Function(
    int,
    int,
    int,
    int,
  )>();
  late final _taskUpdateBuilderUtcStartFromRfc2822Ptr = _lookup<
      ffi.NativeFunction<
          _TaskUpdateBuilderUtcStartFromRfc2822Return Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__TaskUpdateBuilder_utc_start_from_rfc2822");

  late final _taskUpdateBuilderUtcStartFromRfc2822 =
      _taskUpdateBuilderUtcStartFromRfc2822Ptr.asFunction<
          _TaskUpdateBuilderUtcStartFromRfc2822Return Function(
    int,
    int,
    int,
    int,
  )>();
  late final _taskUpdateBuilderUtcStartFromFormatPtr = _lookup<
      ffi.NativeFunction<
          _TaskUpdateBuilderUtcStartFromFormatReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__TaskUpdateBuilder_utc_start_from_format");

  late final _taskUpdateBuilderUtcStartFromFormat =
      _taskUpdateBuilderUtcStartFromFormatPtr.asFunction<
          _TaskUpdateBuilderUtcStartFromFormatReturn Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _taskUpdateBuilderUnsetUtcStartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskUpdateBuilder_unset_utc_start");

  late final _taskUpdateBuilderUnsetUtcStart =
      _taskUpdateBuilderUnsetUtcStartPtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskUpdateBuilderUnsetUtcStartUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskUpdateBuilder_unset_utc_start_update");

  late final _taskUpdateBuilderUnsetUtcStartUpdate =
      _taskUpdateBuilderUnsetUtcStartUpdatePtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskUpdateBuilderProgressPercentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Uint8,
  )>>("__TaskUpdateBuilder_progress_percent");

  late final _taskUpdateBuilderProgressPercent =
      _taskUpdateBuilderProgressPercentPtr.asFunction<
          void Function(
    int,
    int,
  )>();
  late final _taskUpdateBuilderUnsetProgressPercentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskUpdateBuilder_unset_progress_percent");

  late final _taskUpdateBuilderUnsetProgressPercent =
      _taskUpdateBuilderUnsetProgressPercentPtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskUpdateBuilderUnsetProgressPercentUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskUpdateBuilder_unset_progress_percent_update");

  late final _taskUpdateBuilderUnsetProgressPercentUpdate =
      _taskUpdateBuilderUnsetProgressPercentUpdatePtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskUpdateBuilderKeywordsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
  )>>("__TaskUpdateBuilder_keywords");

  late final _taskUpdateBuilderKeywords =
      _taskUpdateBuilderKeywordsPtr.asFunction<
          void Function(
    int,
    int,
  )>();
  late final _taskUpdateBuilderUnsetKeywordsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskUpdateBuilder_unset_keywords");

  late final _taskUpdateBuilderUnsetKeywords =
      _taskUpdateBuilderUnsetKeywordsPtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskUpdateBuilderUnsetKeywordsUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskUpdateBuilder_unset_keywords_update");

  late final _taskUpdateBuilderUnsetKeywordsUpdate =
      _taskUpdateBuilderUnsetKeywordsUpdatePtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskUpdateBuilderCategoriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
  )>>("__TaskUpdateBuilder_categories");

  late final _taskUpdateBuilderCategories =
      _taskUpdateBuilderCategoriesPtr.asFunction<
          void Function(
    int,
    int,
  )>();
  late final _taskUpdateBuilderUnsetCategoriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskUpdateBuilder_unset_categories");

  late final _taskUpdateBuilderUnsetCategories =
      _taskUpdateBuilderUnsetCategoriesPtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskUpdateBuilderUnsetCategoriesUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskUpdateBuilder_unset_categories_update");

  late final _taskUpdateBuilderUnsetCategoriesUpdate =
      _taskUpdateBuilderUnsetCategoriesUpdatePtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskUpdateBuilderAssigneesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
  )>>("__TaskUpdateBuilder_assignees");

  late final _taskUpdateBuilderAssignees =
      _taskUpdateBuilderAssigneesPtr.asFunction<
          void Function(
    int,
    int,
  )>();
  late final _taskUpdateBuilderUnsetAssigneesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskUpdateBuilder_unset_assignees");

  late final _taskUpdateBuilderUnsetAssignees =
      _taskUpdateBuilderUnsetAssigneesPtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskUpdateBuilderUnsetAssigneesUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskUpdateBuilder_unset_assignees_update");

  late final _taskUpdateBuilderUnsetAssigneesUpdate =
      _taskUpdateBuilderUnsetAssigneesUpdatePtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskUpdateBuilderSubscribersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
  )>>("__TaskUpdateBuilder_subscribers");

  late final _taskUpdateBuilderSubscribers =
      _taskUpdateBuilderSubscribersPtr.asFunction<
          void Function(
    int,
    int,
  )>();
  late final _taskUpdateBuilderUnsetSubscribersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskUpdateBuilder_unset_subscribers");

  late final _taskUpdateBuilderUnsetSubscribers =
      _taskUpdateBuilderUnsetSubscribersPtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskUpdateBuilderUnsetSubscribersUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskUpdateBuilder_unset_subscribers_update");

  late final _taskUpdateBuilderUnsetSubscribersUpdate =
      _taskUpdateBuilderUnsetSubscribersUpdatePtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskUpdateBuilderMarkDonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskUpdateBuilder_mark_done");

  late final _taskUpdateBuilderMarkDone =
      _taskUpdateBuilderMarkDonePtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskUpdateBuilderMarkUndonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskUpdateBuilder_mark_undone");

  late final _taskUpdateBuilderMarkUndone =
      _taskUpdateBuilderMarkUndonePtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskUpdateBuilderSendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__TaskUpdateBuilder_send");

  late final _taskUpdateBuilderSend = _taskUpdateBuilderSendPtr.asFunction<
      int Function(
    int,
  )>();
  late final _taskDraftTitlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__TaskDraft_title");

  late final _taskDraftTitle = _taskDraftTitlePtr.asFunction<
      void Function(
    int,
    int,
    int,
    int,
  )>();
  late final _taskDraftDescriptionTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__TaskDraft_description_text");

  late final _taskDraftDescriptionText =
      _taskDraftDescriptionTextPtr.asFunction<
          void Function(
    int,
    int,
    int,
    int,
  )>();
  late final _taskDraftUnsetDescriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskDraft_unset_description");

  late final _taskDraftUnsetDescription =
      _taskDraftUnsetDescriptionPtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskDraftSortOrderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Uint32,
  )>>("__TaskDraft_sort_order");

  late final _taskDraftSortOrder = _taskDraftSortOrderPtr.asFunction<
      void Function(
    int,
    int,
  )>();
  late final _taskDraftColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
  )>>("__TaskDraft_color");

  late final _taskDraftColor = _taskDraftColorPtr.asFunction<
      void Function(
    int,
    int,
  )>();
  late final _taskDraftUnsetColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskDraft_unset_color");

  late final _taskDraftUnsetColor = _taskDraftUnsetColorPtr.asFunction<
      void Function(
    int,
  )>();
  late final _taskDraftUtcDueFromRfc3339Ptr = _lookup<
      ffi.NativeFunction<
          _TaskDraftUtcDueFromRfc3339Return Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__TaskDraft_utc_due_from_rfc3339");

  late final _taskDraftUtcDueFromRfc3339 =
      _taskDraftUtcDueFromRfc3339Ptr.asFunction<
          _TaskDraftUtcDueFromRfc3339Return Function(
    int,
    int,
    int,
    int,
  )>();
  late final _taskDraftUtcDueFromRfc2822Ptr = _lookup<
      ffi.NativeFunction<
          _TaskDraftUtcDueFromRfc2822Return Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__TaskDraft_utc_due_from_rfc2822");

  late final _taskDraftUtcDueFromRfc2822 =
      _taskDraftUtcDueFromRfc2822Ptr.asFunction<
          _TaskDraftUtcDueFromRfc2822Return Function(
    int,
    int,
    int,
    int,
  )>();
  late final _taskDraftUtcDueFromFormatPtr = _lookup<
      ffi.NativeFunction<
          _TaskDraftUtcDueFromFormatReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__TaskDraft_utc_due_from_format");

  late final _taskDraftUtcDueFromFormat =
      _taskDraftUtcDueFromFormatPtr.asFunction<
          _TaskDraftUtcDueFromFormatReturn Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _taskDraftUnsetUtcDuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskDraft_unset_utc_due");

  late final _taskDraftUnsetUtcDue = _taskDraftUnsetUtcDuePtr.asFunction<
      void Function(
    int,
  )>();
  late final _taskDraftUtcStartFromRfc3339Ptr = _lookup<
      ffi.NativeFunction<
          _TaskDraftUtcStartFromRfc3339Return Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__TaskDraft_utc_start_from_rfc3339");

  late final _taskDraftUtcStartFromRfc3339 =
      _taskDraftUtcStartFromRfc3339Ptr.asFunction<
          _TaskDraftUtcStartFromRfc3339Return Function(
    int,
    int,
    int,
    int,
  )>();
  late final _taskDraftUtcStartFromRfc2822Ptr = _lookup<
      ffi.NativeFunction<
          _TaskDraftUtcStartFromRfc2822Return Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__TaskDraft_utc_start_from_rfc2822");

  late final _taskDraftUtcStartFromRfc2822 =
      _taskDraftUtcStartFromRfc2822Ptr.asFunction<
          _TaskDraftUtcStartFromRfc2822Return Function(
    int,
    int,
    int,
    int,
  )>();
  late final _taskDraftUtcStartFromFormatPtr = _lookup<
      ffi.NativeFunction<
          _TaskDraftUtcStartFromFormatReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__TaskDraft_utc_start_from_format");

  late final _taskDraftUtcStartFromFormat =
      _taskDraftUtcStartFromFormatPtr.asFunction<
          _TaskDraftUtcStartFromFormatReturn Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _taskDraftUnsetUtcStartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskDraft_unset_utc_start");

  late final _taskDraftUnsetUtcStart = _taskDraftUnsetUtcStartPtr.asFunction<
      void Function(
    int,
  )>();
  late final _taskDraftProgressPercentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Uint8,
  )>>("__TaskDraft_progress_percent");

  late final _taskDraftProgressPercent =
      _taskDraftProgressPercentPtr.asFunction<
          void Function(
    int,
    int,
  )>();
  late final _taskDraftUnsetProgressPercentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskDraft_unset_progress_percent");

  late final _taskDraftUnsetProgressPercent =
      _taskDraftUnsetProgressPercentPtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskDraftKeywordsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
  )>>("__TaskDraft_keywords");

  late final _taskDraftKeywords = _taskDraftKeywordsPtr.asFunction<
      void Function(
    int,
    int,
  )>();
  late final _taskDraftUnsetKeywordsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskDraft_unset_keywords");

  late final _taskDraftUnsetKeywords = _taskDraftUnsetKeywordsPtr.asFunction<
      void Function(
    int,
  )>();
  late final _taskDraftCategoriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
  )>>("__TaskDraft_categories");

  late final _taskDraftCategories = _taskDraftCategoriesPtr.asFunction<
      void Function(
    int,
    int,
  )>();
  late final _taskDraftUnsetCategoriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskDraft_unset_categories");

  late final _taskDraftUnsetCategories =
      _taskDraftUnsetCategoriesPtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskDraftAssigneesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
  )>>("__TaskDraft_assignees");

  late final _taskDraftAssignees = _taskDraftAssigneesPtr.asFunction<
      void Function(
    int,
    int,
  )>();
  late final _taskDraftUnsetAssigneesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskDraft_unset_assignees");

  late final _taskDraftUnsetAssignees = _taskDraftUnsetAssigneesPtr.asFunction<
      void Function(
    int,
  )>();
  late final _taskDraftSubscribersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
  )>>("__TaskDraft_subscribers");

  late final _taskDraftSubscribers = _taskDraftSubscribersPtr.asFunction<
      void Function(
    int,
    int,
  )>();
  late final _taskDraftUnsetSubscribersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskDraft_unset_subscribers");

  late final _taskDraftUnsetSubscribers =
      _taskDraftUnsetSubscribersPtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskDraftSendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__TaskDraft_send");

  late final _taskDraftSend = _taskDraftSendPtr.asFunction<
      int Function(
    int,
  )>();
  late final _taskListNamePtr = _lookup<
      ffi.NativeFunction<
          _TaskListNameReturn Function(
    ffi.Int64,
  )>>("__TaskList_name");

  late final _taskListName = _taskListNamePtr.asFunction<
      _TaskListNameReturn Function(
    int,
  )>();
  late final _taskListDescriptionTextPtr = _lookup<
      ffi.NativeFunction<
          _TaskListDescriptionTextReturn Function(
    ffi.Int64,
  )>>("__TaskList_description_text");

  late final _taskListDescriptionText = _taskListDescriptionTextPtr.asFunction<
      _TaskListDescriptionTextReturn Function(
    int,
  )>();
  late final _taskListSubscribersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__TaskList_subscribers");

  late final _taskListSubscribers = _taskListSubscribersPtr.asFunction<
      int Function(
    int,
  )>();
  late final _taskListRolePtr = _lookup<
      ffi.NativeFunction<
          _TaskListRoleReturn Function(
    ffi.Int64,
  )>>("__TaskList_role");

  late final _taskListRole = _taskListRolePtr.asFunction<
      _TaskListRoleReturn Function(
    int,
  )>();
  late final _taskListSortOrderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
    ffi.Int64,
  )>>("__TaskList_sort_order");

  late final _taskListSortOrder = _taskListSortOrderPtr.asFunction<
      int Function(
    int,
  )>();
  late final _taskListColorPtr = _lookup<
      ffi.NativeFunction<
          _TaskListColorReturn Function(
    ffi.Int64,
  )>>("__TaskList_color");

  late final _taskListColor = _taskListColorPtr.asFunction<
      _TaskListColorReturn Function(
    int,
  )>();
  late final _taskListTimeZonePtr = _lookup<
      ffi.NativeFunction<
          _TaskListTimeZoneReturn Function(
    ffi.Int64,
  )>>("__TaskList_time_zone");

  late final _taskListTimeZone = _taskListTimeZonePtr.asFunction<
      _TaskListTimeZoneReturn Function(
    int,
  )>();
  late final _taskListKeywordsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__TaskList_keywords");

  late final _taskListKeywords = _taskListKeywordsPtr.asFunction<
      int Function(
    int,
  )>();
  late final _taskListCategoriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__TaskList_categories");

  late final _taskListCategories = _taskListCategoriesPtr.asFunction<
      int Function(
    int,
  )>();
  late final _taskListTasksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__TaskList_tasks");

  late final _taskListTasks = _taskListTasksPtr.asFunction<
      int Function(
    int,
  )>();
  late final _taskListTaskBuilderPtr = _lookup<
      ffi.NativeFunction<
          _TaskListTaskBuilderReturn Function(
    ffi.Int64,
  )>>("__TaskList_task_builder");

  late final _taskListTaskBuilder = _taskListTaskBuilderPtr.asFunction<
      _TaskListTaskBuilderReturn Function(
    int,
  )>();
  late final _taskListUpdateBuilderPtr = _lookup<
      ffi.NativeFunction<
          _TaskListUpdateBuilderReturn Function(
    ffi.Int64,
  )>>("__TaskList_update_builder");

  late final _taskListUpdateBuilder = _taskListUpdateBuilderPtr.asFunction<
      _TaskListUpdateBuilderReturn Function(
    int,
  )>();
  late final _taskListSubscribePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__TaskList_subscribe");

  late final _taskListSubscribe = _taskListSubscribePtr.asFunction<
      int Function(
    int,
  )>();
  late final _taskListRefreshPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__TaskList_refresh");

  late final _taskListRefresh = _taskListRefreshPtr.asFunction<
      int Function(
    int,
  )>();
  late final _taskListSpacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__TaskList_space");

  late final _taskListSpace = _taskListSpacePtr.asFunction<
      int Function(
    int,
  )>();
  late final _taskListDraftNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__TaskListDraft_name");

  late final _taskListDraftName = _taskListDraftNamePtr.asFunction<
      void Function(
    int,
    int,
    int,
    int,
  )>();
  late final _taskListDraftDescriptionTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__TaskListDraft_description_text");

  late final _taskListDraftDescriptionText =
      _taskListDraftDescriptionTextPtr.asFunction<
          void Function(
    int,
    int,
    int,
    int,
  )>();
  late final _taskListDraftUnsetDescriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskListDraft_unset_description");

  late final _taskListDraftUnsetDescription =
      _taskListDraftUnsetDescriptionPtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskListDraftSortOrderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Uint32,
  )>>("__TaskListDraft_sort_order");

  late final _taskListDraftSortOrder = _taskListDraftSortOrderPtr.asFunction<
      void Function(
    int,
    int,
  )>();
  late final _taskListDraftColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
  )>>("__TaskListDraft_color");

  late final _taskListDraftColor = _taskListDraftColorPtr.asFunction<
      void Function(
    int,
    int,
  )>();
  late final _taskListDraftUnsetColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskListDraft_unset_color");

  late final _taskListDraftUnsetColor = _taskListDraftUnsetColorPtr.asFunction<
      void Function(
    int,
  )>();
  late final _taskListDraftKeywordsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
  )>>("__TaskListDraft_keywords");

  late final _taskListDraftKeywords = _taskListDraftKeywordsPtr.asFunction<
      void Function(
    int,
    int,
  )>();
  late final _taskListDraftUnsetKeywordsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskListDraft_unset_keywords");

  late final _taskListDraftUnsetKeywords =
      _taskListDraftUnsetKeywordsPtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskListDraftCategoriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
  )>>("__TaskListDraft_categories");

  late final _taskListDraftCategories = _taskListDraftCategoriesPtr.asFunction<
      void Function(
    int,
    int,
  )>();
  late final _taskListDraftUnsetCategoriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskListDraft_unset_categories");

  late final _taskListDraftUnsetCategories =
      _taskListDraftUnsetCategoriesPtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskListDraftSubscribersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
  )>>("__TaskListDraft_subscribers");

  late final _taskListDraftSubscribers =
      _taskListDraftSubscribersPtr.asFunction<
          void Function(
    int,
    int,
  )>();
  late final _taskListDraftUnsetSubscribersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskListDraft_unset_subscribers");

  late final _taskListDraftUnsetSubscribers =
      _taskListDraftUnsetSubscribersPtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskListDraftSendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__TaskListDraft_send");

  late final _taskListDraftSend = _taskListDraftSendPtr.asFunction<
      int Function(
    int,
  )>();
  late final _taskListUpdateBuilderNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__TaskListUpdateBuilder_name");

  late final _taskListUpdateBuilderName =
      _taskListUpdateBuilderNamePtr.asFunction<
          void Function(
    int,
    int,
    int,
    int,
  )>();
  late final _taskListUpdateBuilderDescriptionTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__TaskListUpdateBuilder_description_text");

  late final _taskListUpdateBuilderDescriptionText =
      _taskListUpdateBuilderDescriptionTextPtr.asFunction<
          void Function(
    int,
    int,
    int,
    int,
  )>();
  late final _taskListUpdateBuilderUnsetDescriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskListUpdateBuilder_unset_description");

  late final _taskListUpdateBuilderUnsetDescription =
      _taskListUpdateBuilderUnsetDescriptionPtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskListUpdateBuilderUnsetDescriptionUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskListUpdateBuilder_unset_description_update");

  late final _taskListUpdateBuilderUnsetDescriptionUpdate =
      _taskListUpdateBuilderUnsetDescriptionUpdatePtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskListUpdateBuilderSortOrderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Uint32,
  )>>("__TaskListUpdateBuilder_sort_order");

  late final _taskListUpdateBuilderSortOrder =
      _taskListUpdateBuilderSortOrderPtr.asFunction<
          void Function(
    int,
    int,
  )>();
  late final _taskListUpdateBuilderColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
  )>>("__TaskListUpdateBuilder_color");

  late final _taskListUpdateBuilderColor =
      _taskListUpdateBuilderColorPtr.asFunction<
          void Function(
    int,
    int,
  )>();
  late final _taskListUpdateBuilderUnsetColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskListUpdateBuilder_unset_color");

  late final _taskListUpdateBuilderUnsetColor =
      _taskListUpdateBuilderUnsetColorPtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskListUpdateBuilderUnsetColorUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskListUpdateBuilder_unset_color_update");

  late final _taskListUpdateBuilderUnsetColorUpdate =
      _taskListUpdateBuilderUnsetColorUpdatePtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskListUpdateBuilderKeywordsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
  )>>("__TaskListUpdateBuilder_keywords");

  late final _taskListUpdateBuilderKeywords =
      _taskListUpdateBuilderKeywordsPtr.asFunction<
          void Function(
    int,
    int,
  )>();
  late final _taskListUpdateBuilderUnsetKeywordsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskListUpdateBuilder_unset_keywords");

  late final _taskListUpdateBuilderUnsetKeywords =
      _taskListUpdateBuilderUnsetKeywordsPtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskListUpdateBuilderUnsetKeywordsUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskListUpdateBuilder_unset_keywords_update");

  late final _taskListUpdateBuilderUnsetKeywordsUpdate =
      _taskListUpdateBuilderUnsetKeywordsUpdatePtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskListUpdateBuilderCategoriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
  )>>("__TaskListUpdateBuilder_categories");

  late final _taskListUpdateBuilderCategories =
      _taskListUpdateBuilderCategoriesPtr.asFunction<
          void Function(
    int,
    int,
  )>();
  late final _taskListUpdateBuilderUnsetCategoriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskListUpdateBuilder_unset_categories");

  late final _taskListUpdateBuilderUnsetCategories =
      _taskListUpdateBuilderUnsetCategoriesPtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskListUpdateBuilderUnsetCategoriesUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskListUpdateBuilder_unset_categories_update");

  late final _taskListUpdateBuilderUnsetCategoriesUpdate =
      _taskListUpdateBuilderUnsetCategoriesUpdatePtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskListUpdateBuilderSubscribersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
  )>>("__TaskListUpdateBuilder_subscribers");

  late final _taskListUpdateBuilderSubscribers =
      _taskListUpdateBuilderSubscribersPtr.asFunction<
          void Function(
    int,
    int,
  )>();
  late final _taskListUpdateBuilderUnsetSubscribersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskListUpdateBuilder_unset_subscribers");

  late final _taskListUpdateBuilderUnsetSubscribers =
      _taskListUpdateBuilderUnsetSubscribersPtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskListUpdateBuilderUnsetSubscribersUpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__TaskListUpdateBuilder_unset_subscribers_update");

  late final _taskListUpdateBuilderUnsetSubscribersUpdate =
      _taskListUpdateBuilderUnsetSubscribersUpdatePtr.asFunction<
          void Function(
    int,
  )>();
  late final _taskListUpdateBuilderSendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__TaskListUpdateBuilder_send");

  late final _taskListUpdateBuilderSend =
      _taskListUpdateBuilderSendPtr.asFunction<
          int Function(
    int,
  )>();
  late final _spaceRelationRoomIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__SpaceRelation_room_id");

  late final _spaceRelationRoomId = _spaceRelationRoomIdPtr.asFunction<
      int Function(
    int,
  )>();
  late final _spaceRelationSuggestedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
    ffi.Int64,
  )>>("__SpaceRelation_suggested");

  late final _spaceRelationSuggested = _spaceRelationSuggestedPtr.asFunction<
      int Function(
    int,
  )>();
  late final _spaceRelationViaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__SpaceRelation_via");

  late final _spaceRelationVia = _spaceRelationViaPtr.asFunction<
      int Function(
    int,
  )>();
  late final _spaceRelationTargetTypePtr = _lookup<
      ffi.NativeFunction<
          _SpaceRelationTargetTypeReturn Function(
    ffi.Int64,
  )>>("__SpaceRelation_target_type");

  late final _spaceRelationTargetType = _spaceRelationTargetTypePtr.asFunction<
      _SpaceRelationTargetTypeReturn Function(
    int,
  )>();
  late final _spaceRelationsMainParentPtr = _lookup<
      ffi.NativeFunction<
          _SpaceRelationsMainParentReturn Function(
    ffi.Int64,
  )>>("__SpaceRelations_main_parent");

  late final _spaceRelationsMainParent =
      _spaceRelationsMainParentPtr.asFunction<
          _SpaceRelationsMainParentReturn Function(
    int,
  )>();
  late final _spaceRelationsOtherParentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__SpaceRelations_other_parents");

  late final _spaceRelationsOtherParents =
      _spaceRelationsOtherParentsPtr.asFunction<
          int Function(
    int,
  )>();
  late final _spaceRelationsChildrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__SpaceRelations_children");

  late final _spaceRelationsChildren = _spaceRelationsChildrenPtr.asFunction<
      int Function(
    int,
  )>();
  late final _spaceGetProfilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Space_get_profile");

  late final _spaceGetProfile = _spaceGetProfilePtr.asFunction<
      int Function(
    int,
  )>();
  late final _spaceSpaceRelationsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Space_space_relations");

  late final _spaceSpaceRelations = _spaceSpaceRelationsPtr.asFunction<
      int Function(
    int,
  )>();
  late final _spaceTopicPtr = _lookup<
      ffi.NativeFunction<
          _SpaceTopicReturn Function(
    ffi.Int64,
  )>>("__Space_topic");

  late final _spaceTopic = _spaceTopicPtr.asFunction<
      _SpaceTopicReturn Function(
    int,
  )>();
  late final _spaceActiveMembersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Space_active_members");

  late final _spaceActiveMembers = _spaceActiveMembersPtr.asFunction<
      int Function(
    int,
  )>();
  late final _spaceGetRoomIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Space_get_room_id");

  late final _spaceGetRoomId = _spaceGetRoomIdPtr.asFunction<
      int Function(
    int,
  )>();
  late final _spaceGetMemberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Space_get_member");

  late final _spaceGetMember = _spaceGetMemberPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _spaceIsEncryptedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Space_is_encrypted");

  late final _spaceIsEncrypted = _spaceIsEncryptedPtr.asFunction<
      int Function(
    int,
  )>();
  late final _spaceTaskListsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Space_task_lists");

  late final _spaceTaskLists = _spaceTaskListsPtr.asFunction<
      int Function(
    int,
  )>();
  late final _spaceTaskListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Space_task_list");

  late final _spaceTaskList = _spaceTaskListPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _spaceTaskListDraftPtr = _lookup<
      ffi.NativeFunction<
          _SpaceTaskListDraftReturn Function(
    ffi.Int64,
  )>>("__Space_task_list_draft");

  late final _spaceTaskListDraft = _spaceTaskListDraftPtr.asFunction<
      _SpaceTaskListDraftReturn Function(
    int,
  )>();
  late final _spaceLatestNewsEntriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Uint32,
  )>>("__Space_latest_news_entries");

  late final _spaceLatestNewsEntries = _spaceLatestNewsEntriesPtr.asFunction<
      int Function(
    int,
    int,
  )>();
  late final _spaceCalendarEventsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Space_calendar_events");

  late final _spaceCalendarEvents = _spaceCalendarEventsPtr.asFunction<
      int Function(
    int,
  )>();
  late final _spaceNewsDraftPtr = _lookup<
      ffi.NativeFunction<
          _SpaceNewsDraftReturn Function(
    ffi.Int64,
  )>>("__Space_news_draft");

  late final _spaceNewsDraft = _spaceNewsDraftPtr.asFunction<
      _SpaceNewsDraftReturn Function(
    int,
  )>();
  late final _spacePinsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Space_pins");

  late final _spacePins = _spacePinsPtr.asFunction<
      int Function(
    int,
  )>();
  late final _spacePinnedLinksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Space_pinned_links");

  late final _spacePinnedLinks = _spacePinnedLinksPtr.asFunction<
      int Function(
    int,
  )>();
  late final _spacePinDraftPtr = _lookup<
      ffi.NativeFunction<
          _SpacePinDraftReturn Function(
    ffi.Int64,
  )>>("__Space_pin_draft");

  late final _spacePinDraft = _spacePinDraftPtr.asFunction<
      _SpacePinDraftReturn Function(
    int,
  )>();
  late final _spaceSendImageMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Space_send_image_message");

  late final _spaceSendImageMessage = _spaceSendImageMessagePtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _spaceImageBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Space_image_binary");

  late final _spaceImageBinary = _spaceImageBinaryPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _spaceSendAudioMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Uint32,
  )>>("__Space_send_audio_message");

  late final _spaceSendAudioMessage = _spaceSendAudioMessagePtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _spaceAudioBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Space_audio_binary");

  late final _spaceAudioBinary = _spaceAudioBinaryPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _spaceSendVideoMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Uint32,
    ffi.Uint8,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Space_send_video_message");

  late final _spaceSendVideoMessage = _spaceSendVideoMessagePtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _spaceVideoBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Space_video_binary");

  late final _spaceVideoBinary = _spaceVideoBinaryPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _spaceSendFileMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint32,
  )>>("__Space_send_file_message");

  late final _spaceSendFileMessage = _spaceSendFileMessagePtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _spaceFileBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Space_file_binary");

  late final _spaceFileBinary = _spaceFileBinaryPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _memberGetProfilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Member_get_profile");

  late final _memberGetProfile = _memberGetProfilePtr.asFunction<
      int Function(
    int,
  )>();
  late final _memberUserIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Member_user_id");

  late final _memberUserId = _memberUserIdPtr.asFunction<
      int Function(
    int,
  )>();
  late final _accountUserIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Account_user_id");

  late final _accountUserId = _accountUserIdPtr.asFunction<
      int Function(
    int,
  )>();
  late final _accountDisplayNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Account_display_name");

  late final _accountDisplayName = _accountDisplayNamePtr.asFunction<
      int Function(
    int,
  )>();
  late final _accountSetDisplayNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Account_set_display_name");

  late final _accountSetDisplayName = _accountSetDisplayNamePtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _accountAvatarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Account_avatar");

  late final _accountAvatar = _accountAvatarPtr.asFunction<
      int Function(
    int,
  )>();
  late final _accountSetAvatarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Account_set_avatar");

  late final _accountSetAvatar = _accountSetAvatarPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _syncStateFirstSyncedRxPtr = _lookup<
      ffi.NativeFunction<
          _SyncStateFirstSyncedRxReturn Function(
    ffi.Int64,
  )>>("__SyncState_first_synced_rx");

  late final _syncStateFirstSyncedRx = _syncStateFirstSyncedRxPtr.asFunction<
      _SyncStateFirstSyncedRxReturn Function(
    int,
  )>();
  late final _syncStateCancelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
  )>>("__SyncState_cancel");

  late final _syncStateCancel = _syncStateCancelPtr.asFunction<
      void Function(
    int,
  )>();
  late final _createSpaceSettingsAliasPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__CreateSpaceSettings_alias");

  late final _createSpaceSettingsAlias =
      _createSpaceSettingsAliasPtr.asFunction<
          void Function(
    int,
    int,
    int,
    int,
  )>();
  late final _createSpaceSettingsVisibilityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__CreateSpaceSettings_visibility");

  late final _createSpaceSettingsVisibility =
      _createSpaceSettingsVisibilityPtr.asFunction<
          void Function(
    int,
    int,
    int,
    int,
  )>();
  late final _createSpaceSettingsAddInviteePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__CreateSpaceSettings_add_invitee");

  late final _createSpaceSettingsAddInvitee =
      _createSpaceSettingsAddInviteePtr.asFunction<
          void Function(
    int,
    int,
    int,
    int,
  )>();
  late final _clientStartSyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_start_sync");

  late final _clientStartSync = _clientStartSyncPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientRestoreTokenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_restore_token");

  late final _clientRestoreToken = _clientRestoreTokenPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientIsGuestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
    ffi.Int64,
  )>>("__Client_is_guest");

  late final _clientIsGuest = _clientIsGuestPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientHasFirstSyncedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
    ffi.Int64,
  )>>("__Client_has_first_synced");

  late final _clientHasFirstSynced = _clientHasFirstSyncedPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientIsSyncingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
    ffi.Int64,
  )>>("__Client_is_syncing");

  late final _clientIsSyncing = _clientIsSyncingPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientLoggedInPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
    ffi.Int64,
  )>>("__Client_logged_in");

  late final _clientLoggedIn = _clientLoggedInPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientAccountPtr = _lookup<
      ffi.NativeFunction<
          _ClientAccountReturn Function(
    ffi.Int64,
  )>>("__Client_account");

  late final _clientAccount = _clientAccountPtr.asFunction<
      _ClientAccountReturn Function(
    int,
  )>();
  late final _clientDeviceIdPtr = _lookup<
      ffi.NativeFunction<
          _ClientDeviceIdReturn Function(
    ffi.Int64,
  )>>("__Client_device_id");

  late final _clientDeviceId = _clientDeviceIdPtr.asFunction<
      _ClientDeviceIdReturn Function(
    int,
  )>();
  late final _clientUserIdPtr = _lookup<
      ffi.NativeFunction<
          _ClientUserIdReturn Function(
    ffi.Int64,
  )>>("__Client_user_id");

  late final _clientUserId = _clientUserIdPtr.asFunction<
      _ClientUserIdReturn Function(
    int,
  )>();
  late final _clientConversationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Client_conversation");

  late final _clientConversation = _clientConversationPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _clientGetUserProfilePtr = _lookup<
      ffi.NativeFunction<
          _ClientGetUserProfileReturn Function(
    ffi.Int64,
  )>>("__Client_get_user_profile");

  late final _clientGetUserProfile = _clientGetUserProfilePtr.asFunction<
      _ClientGetUserProfileReturn Function(
    int,
  )>();
  late final _clientConversationsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_conversations");

  late final _clientConversations = _clientConversationsPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientConversationsRxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_conversations_rx");

  late final _clientConversationsRx = _clientConversationsRxPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientSpacesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_spaces");

  late final _clientSpaces = _clientSpacesPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientGetSpacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Client_get_space");

  late final _clientGetSpace = _clientGetSpacePtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _clientPinnedLinksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_pinned_links");

  late final _clientPinnedLinks = _clientPinnedLinksPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientInvitationsRxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_invitations_rx");

  late final _clientInvitationsRx = _clientInvitationsRxPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientSuggestedUsersToInvitePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Client_suggested_users_to_invite");

  late final _clientSuggestedUsersToInvite =
      _clientSuggestedUsersToInvitePtr.asFunction<
          int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _clientVerifiedDevicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Client_verified_device");

  late final _clientVerifiedDevice = _clientVerifiedDevicePtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _clientLogoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_logout");

  late final _clientLogout = _clientLogoutPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientVerificationEventRxPtr = _lookup<
      ffi.NativeFunction<
          _ClientVerificationEventRxReturn Function(
    ffi.Int64,
  )>>("__Client_verification_event_rx");

  late final _clientVerificationEventRx =
      _clientVerificationEventRxPtr.asFunction<
          _ClientVerificationEventRxReturn Function(
    int,
  )>();
  late final _clientDeviceChangedEventRxPtr = _lookup<
      ffi.NativeFunction<
          _ClientDeviceChangedEventRxReturn Function(
    ffi.Int64,
  )>>("__Client_device_changed_event_rx");

  late final _clientDeviceChangedEventRx =
      _clientDeviceChangedEventRxPtr.asFunction<
          _ClientDeviceChangedEventRxReturn Function(
    int,
  )>();
  late final _clientDeviceLeftEventRxPtr = _lookup<
      ffi.NativeFunction<
          _ClientDeviceLeftEventRxReturn Function(
    ffi.Int64,
  )>>("__Client_device_left_event_rx");

  late final _clientDeviceLeftEventRx = _clientDeviceLeftEventRxPtr.asFunction<
      _ClientDeviceLeftEventRxReturn Function(
    int,
  )>();
  late final _clientTypingEventRxPtr = _lookup<
      ffi.NativeFunction<
          _ClientTypingEventRxReturn Function(
    ffi.Int64,
  )>>("__Client_typing_event_rx");

  late final _clientTypingEventRx = _clientTypingEventRxPtr.asFunction<
      _ClientTypingEventRxReturn Function(
    int,
  )>();
  late final _clientReceiptEventRxPtr = _lookup<
      ffi.NativeFunction<
          _ClientReceiptEventRxReturn Function(
    ffi.Int64,
  )>>("__Client_receipt_event_rx");

  late final _clientReceiptEventRx = _clientReceiptEventRxPtr.asFunction<
      _ClientReceiptEventRxReturn Function(
    int,
  )>();
  late final _clientIncomingMessageRxPtr = _lookup<
      ffi.NativeFunction<
          _ClientIncomingMessageRxReturn Function(
    ffi.Int64,
  )>>("__Client_incoming_message_rx");

  late final _clientIncomingMessageRx = _clientIncomingMessageRxPtr.asFunction<
      _ClientIncomingMessageRxReturn Function(
    int,
  )>();
  late final _clientCreateActerSpacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_create_acter_space");

  late final _clientCreateActerSpace = _clientCreateActerSpacePtr.asFunction<
      int Function(
    int,
    int,
  )>();
  late final _clientSubscribePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Client_subscribe");

  late final _clientSubscribe = _clientSubscribePtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _clientWaitForCommentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Int64,
  )>>("__Client_wait_for_comment");

  late final _clientWaitForComment = _clientWaitForCommentPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _clientWaitForNewsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Int64,
  )>>("__Client_wait_for_news");

  late final _clientWaitForNews = _clientWaitForNewsPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _clientLatestNewsEntriesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Uint32,
  )>>("__Client_latest_news_entries");

  late final _clientLatestNewsEntries = _clientLatestNewsEntriesPtr.asFunction<
      int Function(
    int,
    int,
  )>();
  late final _clientWaitForPinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Int64,
  )>>("__Client_wait_for_pin");

  late final _clientWaitForPin = _clientWaitForPinPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _clientPinsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_pins");

  late final _clientPins = _clientPinsPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientWaitForTaskListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Int64,
  )>>("__Client_wait_for_task_list");

  late final _clientWaitForTaskList = _clientWaitForTaskListPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _clientTaskListsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_task_lists");

  late final _clientTaskLists = _clientTaskListsPtr.asFunction<
      int Function(
    int,
  )>();
  late final _clientWaitForTaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Uint8,
    ffi.Int64,
  )>>("__Client_wait_for_task");

  late final _clientWaitForTask = _clientWaitForTaskPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _clientTaskListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__Client_task_list");

  late final _clientTaskList = _clientTaskListPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _clientCalendarEventsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Client_calendar_events");

  late final _clientCalendarEvents = _clientCalendarEventsPtr.asFunction<
      int Function(
    int,
  )>();
  late final _dispNameTextPtr = _lookup<
      ffi.NativeFunction<
          _DispNameTextReturn Function(
    ffi.Int64,
  )>>("__DispName_text");

  late final _dispNameText = _dispNameTextPtr.asFunction<
      _DispNameTextReturn Function(
    int,
  )>();
  late final _userProfileUserIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__UserProfile_user_id");

  late final _userProfileUserId = _userProfileUserIdPtr.asFunction<
      int Function(
    int,
  )>();
  late final _userProfileHasAvatarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__UserProfile_has_avatar");

  late final _userProfileHasAvatar = _userProfileHasAvatarPtr.asFunction<
      int Function(
    int,
  )>();
  late final _userProfileGetAvatarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__UserProfile_get_avatar");

  late final _userProfileGetAvatar = _userProfileGetAvatarPtr.asFunction<
      int Function(
    int,
  )>();
  late final _userProfileGetThumbnailPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Uint32,
    ffi.Uint32,
  )>>("__UserProfile_get_thumbnail");

  late final _userProfileGetThumbnail = _userProfileGetThumbnailPtr.asFunction<
      int Function(
    int,
    int,
    int,
  )>();
  late final _userProfileGetDisplayNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__UserProfile_get_display_name");

  late final _userProfileGetDisplayName =
      _userProfileGetDisplayNamePtr.asFunction<
          int Function(
    int,
  )>();
  late final _roomProfileHasAvatarPtr = _lookup<
      ffi.NativeFunction<
          _RoomProfileHasAvatarReturn Function(
    ffi.Int64,
  )>>("__RoomProfile_has_avatar");

  late final _roomProfileHasAvatar = _roomProfileHasAvatarPtr.asFunction<
      _RoomProfileHasAvatarReturn Function(
    int,
  )>();
  late final _roomProfileGetAvatarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__RoomProfile_get_avatar");

  late final _roomProfileGetAvatar = _roomProfileGetAvatarPtr.asFunction<
      int Function(
    int,
  )>();
  late final _roomProfileGetThumbnailPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Uint32,
    ffi.Uint32,
  )>>("__RoomProfile_get_thumbnail");

  late final _roomProfileGetThumbnail = _roomProfileGetThumbnailPtr.asFunction<
      int Function(
    int,
    int,
    int,
  )>();
  late final _roomProfileGetDisplayNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__RoomProfile_get_display_name");

  late final _roomProfileGetDisplayName =
      _roomProfileGetDisplayNamePtr.asFunction<
          int Function(
    int,
  )>();
  late final _invitationOriginServerTsPtr = _lookup<
      ffi.NativeFunction<
          _InvitationOriginServerTsReturn Function(
    ffi.Int64,
  )>>("__Invitation_origin_server_ts");

  late final _invitationOriginServerTs =
      _invitationOriginServerTsPtr.asFunction<
          _InvitationOriginServerTsReturn Function(
    int,
  )>();
  late final _invitationRoomIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Invitation_room_id");

  late final _invitationRoomId = _invitationRoomIdPtr.asFunction<
      int Function(
    int,
  )>();
  late final _invitationRoomNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Invitation_room_name");

  late final _invitationRoomName = _invitationRoomNamePtr.asFunction<
      int Function(
    int,
  )>();
  late final _invitationSenderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Invitation_sender");

  late final _invitationSender = _invitationSenderPtr.asFunction<
      int Function(
    int,
  )>();
  late final _invitationGetSenderProfilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Invitation_get_sender_profile");

  late final _invitationGetSenderProfile =
      _invitationGetSenderProfilePtr.asFunction<
          int Function(
    int,
  )>();
  late final _invitationAcceptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Invitation_accept");

  late final _invitationAccept = _invitationAcceptPtr.asFunction<
      int Function(
    int,
  )>();
  late final _invitationRejectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__Invitation_reject");

  late final _invitationReject = _invitationRejectPtr.asFunction<
      int Function(
    int,
  )>();
  late final _verificationEventEventTypePtr = _lookup<
      ffi.NativeFunction<
          _VerificationEventEventTypeReturn Function(
    ffi.Int64,
  )>>("__VerificationEvent_event_type");

  late final _verificationEventEventType =
      _verificationEventEventTypePtr.asFunction<
          _VerificationEventEventTypeReturn Function(
    int,
  )>();
  late final _verificationEventFlowIdPtr = _lookup<
      ffi.NativeFunction<
          _VerificationEventFlowIdReturn Function(
    ffi.Int64,
  )>>("__VerificationEvent_flow_id");

  late final _verificationEventFlowId = _verificationEventFlowIdPtr.asFunction<
      _VerificationEventFlowIdReturn Function(
    int,
  )>();
  late final _verificationEventSenderPtr = _lookup<
      ffi.NativeFunction<
          _VerificationEventSenderReturn Function(
    ffi.Int64,
  )>>("__VerificationEvent_sender");

  late final _verificationEventSender = _verificationEventSenderPtr.asFunction<
      _VerificationEventSenderReturn Function(
    int,
  )>();
  late final _verificationEventCancelCodePtr = _lookup<
      ffi.NativeFunction<
          _VerificationEventCancelCodeReturn Function(
    ffi.Int64,
  )>>("__VerificationEvent_cancel_code");

  late final _verificationEventCancelCode =
      _verificationEventCancelCodePtr.asFunction<
          _VerificationEventCancelCodeReturn Function(
    int,
  )>();
  late final _verificationEventReasonPtr = _lookup<
      ffi.NativeFunction<
          _VerificationEventReasonReturn Function(
    ffi.Int64,
  )>>("__VerificationEvent_reason");

  late final _verificationEventReason = _verificationEventReasonPtr.asFunction<
      _VerificationEventReasonReturn Function(
    int,
  )>();
  late final _verificationEventAcceptVerificationRequestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__VerificationEvent_accept_verification_request");

  late final _verificationEventAcceptVerificationRequest =
      _verificationEventAcceptVerificationRequestPtr.asFunction<
          int Function(
    int,
  )>();
  late final _verificationEventCancelVerificationRequestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__VerificationEvent_cancel_verification_request");

  late final _verificationEventCancelVerificationRequest =
      _verificationEventCancelVerificationRequestPtr.asFunction<
          int Function(
    int,
  )>();
  late final _verificationEventAcceptVerificationRequestWithMethodsPtr =
      _lookup<
          ffi.NativeFunction<
              ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
  )>>("__VerificationEvent_accept_verification_request_with_methods");

  late final _verificationEventAcceptVerificationRequestWithMethods =
      _verificationEventAcceptVerificationRequestWithMethodsPtr.asFunction<
          int Function(
    int,
    int,
  )>();
  late final _verificationEventStartSasVerificationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__VerificationEvent_start_sas_verification");

  late final _verificationEventStartSasVerification =
      _verificationEventStartSasVerificationPtr.asFunction<
          int Function(
    int,
  )>();
  late final _verificationEventWasTriggeredFromThisDevicePtr = _lookup<
      ffi.NativeFunction<
          _VerificationEventWasTriggeredFromThisDeviceReturn Function(
    ffi.Int64,
  )>>("__VerificationEvent_was_triggered_from_this_device");

  late final _verificationEventWasTriggeredFromThisDevice =
      _verificationEventWasTriggeredFromThisDevicePtr.asFunction<
          _VerificationEventWasTriggeredFromThisDeviceReturn Function(
    int,
  )>();
  late final _verificationEventAcceptSasVerificationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__VerificationEvent_accept_sas_verification");

  late final _verificationEventAcceptSasVerification =
      _verificationEventAcceptSasVerificationPtr.asFunction<
          int Function(
    int,
  )>();
  late final _verificationEventCancelSasVerificationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__VerificationEvent_cancel_sas_verification");

  late final _verificationEventCancelSasVerification =
      _verificationEventCancelSasVerificationPtr.asFunction<
          int Function(
    int,
  )>();
  late final _verificationEventSendVerificationKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__VerificationEvent_send_verification_key");

  late final _verificationEventSendVerificationKey =
      _verificationEventSendVerificationKeyPtr.asFunction<
          int Function(
    int,
  )>();
  late final _verificationEventCancelVerificationKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__VerificationEvent_cancel_verification_key");

  late final _verificationEventCancelVerificationKey =
      _verificationEventCancelVerificationKeyPtr.asFunction<
          int Function(
    int,
  )>();
  late final _verificationEventGetVerificationEmojiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__VerificationEvent_get_verification_emoji");

  late final _verificationEventGetVerificationEmoji =
      _verificationEventGetVerificationEmojiPtr.asFunction<
          int Function(
    int,
  )>();
  late final _verificationEventConfirmSasVerificationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__VerificationEvent_confirm_sas_verification");

  late final _verificationEventConfirmSasVerification =
      _verificationEventConfirmSasVerificationPtr.asFunction<
          int Function(
    int,
  )>();
  late final _verificationEventMismatchSasVerificationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__VerificationEvent_mismatch_sas_verification");

  late final _verificationEventMismatchSasVerification =
      _verificationEventMismatchSasVerificationPtr.asFunction<
          int Function(
    int,
  )>();
  late final _verificationEventReviewVerificationMacPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__VerificationEvent_review_verification_mac");

  late final _verificationEventReviewVerificationMac =
      _verificationEventReviewVerificationMacPtr.asFunction<
          int Function(
    int,
  )>();
  late final _verificationEmojiSymbolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
    ffi.Int64,
  )>>("__VerificationEmoji_symbol");

  late final _verificationEmojiSymbol = _verificationEmojiSymbolPtr.asFunction<
      int Function(
    int,
  )>();
  late final _verificationEmojiDescriptionPtr = _lookup<
      ffi.NativeFunction<
          _VerificationEmojiDescriptionReturn Function(
    ffi.Int64,
  )>>("__VerificationEmoji_description");

  late final _verificationEmojiDescription =
      _verificationEmojiDescriptionPtr.asFunction<
          _VerificationEmojiDescriptionReturn Function(
    int,
  )>();
  late final _receiptEventRoomIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__ReceiptEvent_room_id");

  late final _receiptEventRoomId = _receiptEventRoomIdPtr.asFunction<
      int Function(
    int,
  )>();
  late final _receiptEventReceiptRecordsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__ReceiptEvent_receipt_records");

  late final _receiptEventReceiptRecords =
      _receiptEventReceiptRecordsPtr.asFunction<
          int Function(
    int,
  )>();
  late final _receiptRecordEventIdPtr = _lookup<
      ffi.NativeFunction<
          _ReceiptRecordEventIdReturn Function(
    ffi.Int64,
  )>>("__ReceiptRecord_event_id");

  late final _receiptRecordEventId = _receiptRecordEventIdPtr.asFunction<
      _ReceiptRecordEventIdReturn Function(
    int,
  )>();
  late final _receiptRecordSeenByPtr = _lookup<
      ffi.NativeFunction<
          _ReceiptRecordSeenByReturn Function(
    ffi.Int64,
  )>>("__ReceiptRecord_seen_by");

  late final _receiptRecordSeenBy = _receiptRecordSeenByPtr.asFunction<
      _ReceiptRecordSeenByReturn Function(
    int,
  )>();
  late final _receiptRecordTsPtr = _lookup<
      ffi.NativeFunction<
          _ReceiptRecordTsReturn Function(
    ffi.Int64,
  )>>("__ReceiptRecord_ts");

  late final _receiptRecordTs = _receiptRecordTsPtr.asFunction<
      _ReceiptRecordTsReturn Function(
    int,
  )>();
  late final _deviceChangedEventDeviceRecordsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Uint8,
  )>>("__DeviceChangedEvent_device_records");

  late final _deviceChangedEventDeviceRecords =
      _deviceChangedEventDeviceRecordsPtr.asFunction<
          int Function(
    int,
    int,
  )>();
  late final _deviceChangedEventRequestVerificationToUserPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__DeviceChangedEvent_request_verification_to_user");

  late final _deviceChangedEventRequestVerificationToUser =
      _deviceChangedEventRequestVerificationToUserPtr.asFunction<
          int Function(
    int,
  )>();
  late final _deviceChangedEventRequestVerificationToDevicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
  )>>("__DeviceChangedEvent_request_verification_to_device");

  late final _deviceChangedEventRequestVerificationToDevice =
      _deviceChangedEventRequestVerificationToDevicePtr.asFunction<
          int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _deviceChangedEventRequestVerificationToUserWithMethodsPtr =
      _lookup<
          ffi.NativeFunction<
              ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
  )>>("__DeviceChangedEvent_request_verification_to_user_with_methods");

  late final _deviceChangedEventRequestVerificationToUserWithMethods =
      _deviceChangedEventRequestVerificationToUserWithMethodsPtr.asFunction<
          int Function(
    int,
    int,
  )>();
  late final _deviceChangedEventRequestVerificationToDeviceWithMethodsPtr =
      _lookup<
          ffi.NativeFunction<
              ffi.Int64 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Uint64,
    ffi.Uint64,
    ffi.Int64,
  )>>("__DeviceChangedEvent_request_verification_to_device_with_methods");

  late final _deviceChangedEventRequestVerificationToDeviceWithMethods =
      _deviceChangedEventRequestVerificationToDeviceWithMethodsPtr.asFunction<
          int Function(
    int,
    int,
    int,
    int,
    int,
  )>();
  late final _deviceLeftEventDeviceRecordsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
    ffi.Uint8,
  )>>("__DeviceLeftEvent_device_records");

  late final _deviceLeftEventDeviceRecords =
      _deviceLeftEventDeviceRecordsPtr.asFunction<
          int Function(
    int,
    int,
  )>();
  late final _deviceRecordVerifiedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
    ffi.Int64,
  )>>("__DeviceRecord_verified");

  late final _deviceRecordVerified = _deviceRecordVerifiedPtr.asFunction<
      int Function(
    int,
  )>();
  late final _deviceRecordDeletedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
    ffi.Int64,
  )>>("__DeviceRecord_deleted");

  late final _deviceRecordDeleted = _deviceRecordDeletedPtr.asFunction<
      int Function(
    int,
  )>();
  late final _deviceRecordUserIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__DeviceRecord_user_id");

  late final _deviceRecordUserId = _deviceRecordUserIdPtr.asFunction<
      int Function(
    int,
  )>();
  late final _deviceRecordDeviceIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__DeviceRecord_device_id");

  late final _deviceRecordDeviceId = _deviceRecordDeviceIdPtr.asFunction<
      int Function(
    int,
  )>();
  late final _deviceRecordDisplayNamePtr = _lookup<
      ffi.NativeFunction<
          _DeviceRecordDisplayNameReturn Function(
    ffi.Int64,
  )>>("__DeviceRecord_display_name");

  late final _deviceRecordDisplayName = _deviceRecordDisplayNamePtr.asFunction<
      _DeviceRecordDisplayNameReturn Function(
    int,
  )>();
  late final _deviceRecordLastSeenIpPtr = _lookup<
      ffi.NativeFunction<
          _DeviceRecordLastSeenIpReturn Function(
    ffi.Int64,
  )>>("__DeviceRecord_last_seen_ip");

  late final _deviceRecordLastSeenIp = _deviceRecordLastSeenIpPtr.asFunction<
      _DeviceRecordLastSeenIpReturn Function(
    int,
  )>();
  late final _deviceRecordLastSeenTsPtr = _lookup<
      ffi.NativeFunction<
          _DeviceRecordLastSeenTsReturn Function(
    ffi.Int64,
  )>>("__DeviceRecord_last_seen_ts");

  late final _deviceRecordLastSeenTs = _deviceRecordLastSeenTsPtr.asFunction<
      _DeviceRecordLastSeenTsReturn Function(
    int,
  )>();
  late final _typingEventRoomIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__TypingEvent_room_id");

  late final _typingEventRoomId = _typingEventRoomIdPtr.asFunction<
      int Function(
    int,
  )>();
  late final _typingEventUserIdsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
    ffi.Int64,
  )>>("__TypingEvent_user_ids");

  late final _typingEventUserIds = _typingEventUserIdsPtr.asFunction<
      int Function(
    int,
  )>();
  late final _loginNewClientFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _LoginNewClientFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__login_new_client_future_poll");

  late final _loginNewClientFuturePoll =
      _loginNewClientFuturePollPtr.asFunction<
          _LoginNewClientFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _loginWithTokenFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _LoginWithTokenFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__login_with_token_future_poll");

  late final _loginWithTokenFuturePoll =
      _loginWithTokenFuturePollPtr.asFunction<
          _LoginWithTokenFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _guestClientFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _GuestClientFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__guest_client_future_poll");

  late final _guestClientFuturePoll = _guestClientFuturePollPtr.asFunction<
      _GuestClientFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _registerWithTokenFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _RegisterWithTokenFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__register_with_token_future_poll");

  late final _registerWithTokenFuturePoll =
      _registerWithTokenFuturePollPtr.asFunction<
          _RegisterWithTokenFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _newsSlideImageBinaryFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _NewsSlideImageBinaryFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__NewsSlide_image_binary_future_poll");

  late final _newsSlideImageBinaryFuturePoll =
      _newsSlideImageBinaryFuturePollPtr.asFunction<
          _NewsSlideImageBinaryFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _newsSlideAudioBinaryFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _NewsSlideAudioBinaryFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__NewsSlide_audio_binary_future_poll");

  late final _newsSlideAudioBinaryFuturePoll =
      _newsSlideAudioBinaryFuturePollPtr.asFunction<
          _NewsSlideAudioBinaryFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _newsSlideVideoBinaryFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _NewsSlideVideoBinaryFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__NewsSlide_video_binary_future_poll");

  late final _newsSlideVideoBinaryFuturePoll =
      _newsSlideVideoBinaryFuturePollPtr.asFunction<
          _NewsSlideVideoBinaryFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _newsSlideFileBinaryFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _NewsSlideFileBinaryFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__NewsSlide_file_binary_future_poll");

  late final _newsSlideFileBinaryFuturePoll =
      _newsSlideFileBinaryFuturePollPtr.asFunction<
          _NewsSlideFileBinaryFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _newsEntryDraftSendFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _NewsEntryDraftSendFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__NewsEntryDraft_send_future_poll");

  late final _newsEntryDraftSendFuturePoll =
      _newsEntryDraftSendFuturePollPtr.asFunction<
          _NewsEntryDraftSendFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _newsEntryUpdateBuilderSendFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _NewsEntryUpdateBuilderSendFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__NewsEntryUpdateBuilder_send_future_poll");

  late final _newsEntryUpdateBuilderSendFuturePoll =
      _newsEntryUpdateBuilderSendFuturePollPtr.asFunction<
          _NewsEntryUpdateBuilderSendFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _pinDraftSendFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _PinDraftSendFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__PinDraft_send_future_poll");

  late final _pinDraftSendFuturePoll = _pinDraftSendFuturePollPtr.asFunction<
      _PinDraftSendFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _acterPinRefreshFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ActerPinRefreshFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__ActerPin_refresh_future_poll");

  late final _acterPinRefreshFuturePoll =
      _acterPinRefreshFuturePollPtr.asFunction<
          _ActerPinRefreshFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _pinUpdateBuilderSendFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _PinUpdateBuilderSendFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__PinUpdateBuilder_send_future_poll");

  late final _pinUpdateBuilderSendFuturePoll =
      _pinUpdateBuilderSendFuturePollPtr.asFunction<
          _PinUpdateBuilderSendFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _timelineStreamNextFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _TimelineStreamNextFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__TimelineStream_next_future_poll");

  late final _timelineStreamNextFuturePoll =
      _timelineStreamNextFuturePollPtr.asFunction<
          _TimelineStreamNextFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _timelineStreamPaginateBackwardsFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _TimelineStreamPaginateBackwardsFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__TimelineStream_paginate_backwards_future_poll");

  late final _timelineStreamPaginateBackwardsFuturePoll =
      _timelineStreamPaginateBackwardsFuturePollPtr.asFunction<
          _TimelineStreamPaginateBackwardsFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _timelineStreamEditFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _TimelineStreamEditFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__TimelineStream_edit_future_poll");

  late final _timelineStreamEditFuturePoll =
      _timelineStreamEditFuturePollPtr.asFunction<
          _TimelineStreamEditFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationActiveMembersFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationActiveMembersFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_active_members_future_poll");

  late final _conversationActiveMembersFuturePoll =
      _conversationActiveMembersFuturePollPtr.asFunction<
          _ConversationActiveMembersFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationGetMemberFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationGetMemberFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_get_member_future_poll");

  late final _conversationGetMemberFuturePoll =
      _conversationGetMemberFuturePollPtr.asFunction<
          _ConversationGetMemberFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationTimelineStreamFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationTimelineStreamFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_timeline_stream_future_poll");

  late final _conversationTimelineStreamFuturePoll =
      _conversationTimelineStreamFuturePollPtr.asFunction<
          _ConversationTimelineStreamFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationTypingNoticeFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationTypingNoticeFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_typing_notice_future_poll");

  late final _conversationTypingNoticeFuturePoll =
      _conversationTypingNoticeFuturePollPtr.asFunction<
          _ConversationTypingNoticeFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationReadReceiptFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationReadReceiptFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_read_receipt_future_poll");

  late final _conversationReadReceiptFuturePoll =
      _conversationReadReceiptFuturePollPtr.asFunction<
          _ConversationReadReceiptFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationSendPlainMessageFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationSendPlainMessageFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_send_plain_message_future_poll");

  late final _conversationSendPlainMessageFuturePoll =
      _conversationSendPlainMessageFuturePollPtr.asFunction<
          _ConversationSendPlainMessageFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationSendFormattedMessageFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationSendFormattedMessageFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_send_formatted_message_future_poll");

  late final _conversationSendFormattedMessageFuturePoll =
      _conversationSendFormattedMessageFuturePollPtr.asFunction<
          _ConversationSendFormattedMessageFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationSendReactionFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationSendReactionFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_send_reaction_future_poll");

  late final _conversationSendReactionFuturePoll =
      _conversationSendReactionFuturePollPtr.asFunction<
          _ConversationSendReactionFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationSendImageMessageFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationSendImageMessageFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_send_image_message_future_poll");

  late final _conversationSendImageMessageFuturePoll =
      _conversationSendImageMessageFuturePollPtr.asFunction<
          _ConversationSendImageMessageFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationImageBinaryFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationImageBinaryFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_image_binary_future_poll");

  late final _conversationImageBinaryFuturePoll =
      _conversationImageBinaryFuturePollPtr.asFunction<
          _ConversationImageBinaryFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationSendAudioMessageFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationSendAudioMessageFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_send_audio_message_future_poll");

  late final _conversationSendAudioMessageFuturePoll =
      _conversationSendAudioMessageFuturePollPtr.asFunction<
          _ConversationSendAudioMessageFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationAudioBinaryFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationAudioBinaryFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_audio_binary_future_poll");

  late final _conversationAudioBinaryFuturePoll =
      _conversationAudioBinaryFuturePollPtr.asFunction<
          _ConversationAudioBinaryFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationSendVideoMessageFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationSendVideoMessageFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_send_video_message_future_poll");

  late final _conversationSendVideoMessageFuturePoll =
      _conversationSendVideoMessageFuturePollPtr.asFunction<
          _ConversationSendVideoMessageFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationVideoBinaryFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationVideoBinaryFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_video_binary_future_poll");

  late final _conversationVideoBinaryFuturePoll =
      _conversationVideoBinaryFuturePollPtr.asFunction<
          _ConversationVideoBinaryFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationSendFileMessageFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationSendFileMessageFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_send_file_message_future_poll");

  late final _conversationSendFileMessageFuturePoll =
      _conversationSendFileMessageFuturePollPtr.asFunction<
          _ConversationSendFileMessageFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationFileBinaryFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationFileBinaryFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_file_binary_future_poll");

  late final _conversationFileBinaryFuturePoll =
      _conversationFileBinaryFuturePollPtr.asFunction<
          _ConversationFileBinaryFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationInviteUserFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationInviteUserFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_invite_user_future_poll");

  late final _conversationInviteUserFuturePoll =
      _conversationInviteUserFuturePollPtr.asFunction<
          _ConversationInviteUserFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationJoinFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationJoinFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_join_future_poll");

  late final _conversationJoinFuturePoll =
      _conversationJoinFuturePollPtr.asFunction<
          _ConversationJoinFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationLeaveFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationLeaveFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_leave_future_poll");

  late final _conversationLeaveFuturePoll =
      _conversationLeaveFuturePollPtr.asFunction<
          _ConversationLeaveFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationGetInviteesFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationGetInviteesFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_get_invitees_future_poll");

  late final _conversationGetInviteesFuturePoll =
      _conversationGetInviteesFuturePollPtr.asFunction<
          _ConversationGetInviteesFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationDownloadMediaFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationDownloadMediaFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_download_media_future_poll");

  late final _conversationDownloadMediaFuturePoll =
      _conversationDownloadMediaFuturePollPtr.asFunction<
          _ConversationDownloadMediaFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationMediaPathFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationMediaPathFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_media_path_future_poll");

  late final _conversationMediaPathFuturePoll =
      _conversationMediaPathFuturePollPtr.asFunction<
          _ConversationMediaPathFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationUserReceiptsFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationUserReceiptsFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_user_receipts_future_poll");

  late final _conversationUserReceiptsFuturePoll =
      _conversationUserReceiptsFuturePollPtr.asFunction<
          _ConversationUserReceiptsFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationIsEncryptedFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationIsEncryptedFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_is_encrypted_future_poll");

  late final _conversationIsEncryptedFuturePoll =
      _conversationIsEncryptedFuturePollPtr.asFunction<
          _ConversationIsEncryptedFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationGetMessageFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationGetMessageFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_get_message_future_poll");

  late final _conversationGetMessageFuturePoll =
      _conversationGetMessageFuturePollPtr.asFunction<
          _ConversationGetMessageFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationSendTextReplyFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationSendTextReplyFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_send_text_reply_future_poll");

  late final _conversationSendTextReplyFuturePoll =
      _conversationSendTextReplyFuturePollPtr.asFunction<
          _ConversationSendTextReplyFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationSendImageReplyFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationSendImageReplyFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_send_image_reply_future_poll");

  late final _conversationSendImageReplyFuturePoll =
      _conversationSendImageReplyFuturePollPtr.asFunction<
          _ConversationSendImageReplyFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationSendAudioReplyFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationSendAudioReplyFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_send_audio_reply_future_poll");

  late final _conversationSendAudioReplyFuturePoll =
      _conversationSendAudioReplyFuturePollPtr.asFunction<
          _ConversationSendAudioReplyFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationSendVideoReplyFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationSendVideoReplyFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_send_video_reply_future_poll");

  late final _conversationSendVideoReplyFuturePoll =
      _conversationSendVideoReplyFuturePollPtr.asFunction<
          _ConversationSendVideoReplyFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationSendFileReplyFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationSendFileReplyFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_send_file_reply_future_poll");

  late final _conversationSendFileReplyFuturePoll =
      _conversationSendFileReplyFuturePollPtr.asFunction<
          _ConversationSendFileReplyFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationRedactMessageFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationRedactMessageFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_redact_message_future_poll");

  late final _conversationRedactMessageFuturePoll =
      _conversationRedactMessageFuturePollPtr.asFunction<
          _ConversationRedactMessageFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _conversationUpdatePowerLevelFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ConversationUpdatePowerLevelFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Conversation_update_power_level_future_poll");

  late final _conversationUpdatePowerLevelFuturePoll =
      _conversationUpdatePowerLevelFuturePollPtr.asFunction<
          _ConversationUpdatePowerLevelFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _commentDraftSendFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _CommentDraftSendFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__CommentDraft_send_future_poll");

  late final _commentDraftSendFuturePoll =
      _commentDraftSendFuturePollPtr.asFunction<
          _CommentDraftSendFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _commentsManagerCommentsFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _CommentsManagerCommentsFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__CommentsManager_comments_future_poll");

  late final _commentsManagerCommentsFuturePoll =
      _commentsManagerCommentsFuturePollPtr.asFunction<
          _CommentsManagerCommentsFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _taskRefreshFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _TaskRefreshFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Task_refresh_future_poll");

  late final _taskRefreshFuturePoll = _taskRefreshFuturePollPtr.asFunction<
      _TaskRefreshFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _taskCommentsFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _TaskCommentsFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Task_comments_future_poll");

  late final _taskCommentsFuturePoll = _taskCommentsFuturePollPtr.asFunction<
      _TaskCommentsFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _taskUpdateBuilderSendFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _TaskUpdateBuilderSendFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__TaskUpdateBuilder_send_future_poll");

  late final _taskUpdateBuilderSendFuturePoll =
      _taskUpdateBuilderSendFuturePollPtr.asFunction<
          _TaskUpdateBuilderSendFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _taskDraftSendFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _TaskDraftSendFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__TaskDraft_send_future_poll");

  late final _taskDraftSendFuturePoll = _taskDraftSendFuturePollPtr.asFunction<
      _TaskDraftSendFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _taskListTasksFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _TaskListTasksFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__TaskList_tasks_future_poll");

  late final _taskListTasksFuturePoll = _taskListTasksFuturePollPtr.asFunction<
      _TaskListTasksFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _taskListRefreshFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _TaskListRefreshFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__TaskList_refresh_future_poll");

  late final _taskListRefreshFuturePoll =
      _taskListRefreshFuturePollPtr.asFunction<
          _TaskListRefreshFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _taskListDraftSendFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _TaskListDraftSendFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__TaskListDraft_send_future_poll");

  late final _taskListDraftSendFuturePoll =
      _taskListDraftSendFuturePollPtr.asFunction<
          _TaskListDraftSendFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _taskListUpdateBuilderSendFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _TaskListUpdateBuilderSendFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__TaskListUpdateBuilder_send_future_poll");

  late final _taskListUpdateBuilderSendFuturePoll =
      _taskListUpdateBuilderSendFuturePollPtr.asFunction<
          _TaskListUpdateBuilderSendFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _spaceSpaceRelationsFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _SpaceSpaceRelationsFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Space_space_relations_future_poll");

  late final _spaceSpaceRelationsFuturePoll =
      _spaceSpaceRelationsFuturePollPtr.asFunction<
          _SpaceSpaceRelationsFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _spaceActiveMembersFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _SpaceActiveMembersFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Space_active_members_future_poll");

  late final _spaceActiveMembersFuturePoll =
      _spaceActiveMembersFuturePollPtr.asFunction<
          _SpaceActiveMembersFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _spaceGetMemberFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _SpaceGetMemberFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Space_get_member_future_poll");

  late final _spaceGetMemberFuturePoll =
      _spaceGetMemberFuturePollPtr.asFunction<
          _SpaceGetMemberFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _spaceIsEncryptedFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _SpaceIsEncryptedFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Space_is_encrypted_future_poll");

  late final _spaceIsEncryptedFuturePoll =
      _spaceIsEncryptedFuturePollPtr.asFunction<
          _SpaceIsEncryptedFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _spaceTaskListsFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _SpaceTaskListsFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Space_task_lists_future_poll");

  late final _spaceTaskListsFuturePoll =
      _spaceTaskListsFuturePollPtr.asFunction<
          _SpaceTaskListsFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _spaceTaskListFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _SpaceTaskListFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Space_task_list_future_poll");

  late final _spaceTaskListFuturePoll = _spaceTaskListFuturePollPtr.asFunction<
      _SpaceTaskListFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _spaceLatestNewsEntriesFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _SpaceLatestNewsEntriesFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Space_latest_news_entries_future_poll");

  late final _spaceLatestNewsEntriesFuturePoll =
      _spaceLatestNewsEntriesFuturePollPtr.asFunction<
          _SpaceLatestNewsEntriesFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _spaceCalendarEventsFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _SpaceCalendarEventsFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Space_calendar_events_future_poll");

  late final _spaceCalendarEventsFuturePoll =
      _spaceCalendarEventsFuturePollPtr.asFunction<
          _SpaceCalendarEventsFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _spacePinsFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _SpacePinsFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Space_pins_future_poll");

  late final _spacePinsFuturePoll = _spacePinsFuturePollPtr.asFunction<
      _SpacePinsFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _spacePinnedLinksFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _SpacePinnedLinksFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Space_pinned_links_future_poll");

  late final _spacePinnedLinksFuturePoll =
      _spacePinnedLinksFuturePollPtr.asFunction<
          _SpacePinnedLinksFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _spaceSendImageMessageFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _SpaceSendImageMessageFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Space_send_image_message_future_poll");

  late final _spaceSendImageMessageFuturePoll =
      _spaceSendImageMessageFuturePollPtr.asFunction<
          _SpaceSendImageMessageFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _spaceImageBinaryFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _SpaceImageBinaryFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Space_image_binary_future_poll");

  late final _spaceImageBinaryFuturePoll =
      _spaceImageBinaryFuturePollPtr.asFunction<
          _SpaceImageBinaryFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _spaceSendAudioMessageFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _SpaceSendAudioMessageFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Space_send_audio_message_future_poll");

  late final _spaceSendAudioMessageFuturePoll =
      _spaceSendAudioMessageFuturePollPtr.asFunction<
          _SpaceSendAudioMessageFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _spaceAudioBinaryFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _SpaceAudioBinaryFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Space_audio_binary_future_poll");

  late final _spaceAudioBinaryFuturePoll =
      _spaceAudioBinaryFuturePollPtr.asFunction<
          _SpaceAudioBinaryFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _spaceSendVideoMessageFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _SpaceSendVideoMessageFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Space_send_video_message_future_poll");

  late final _spaceSendVideoMessageFuturePoll =
      _spaceSendVideoMessageFuturePollPtr.asFunction<
          _SpaceSendVideoMessageFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _spaceVideoBinaryFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _SpaceVideoBinaryFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Space_video_binary_future_poll");

  late final _spaceVideoBinaryFuturePoll =
      _spaceVideoBinaryFuturePollPtr.asFunction<
          _SpaceVideoBinaryFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _spaceSendFileMessageFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _SpaceSendFileMessageFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Space_send_file_message_future_poll");

  late final _spaceSendFileMessageFuturePoll =
      _spaceSendFileMessageFuturePollPtr.asFunction<
          _SpaceSendFileMessageFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _spaceFileBinaryFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _SpaceFileBinaryFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Space_file_binary_future_poll");

  late final _spaceFileBinaryFuturePoll =
      _spaceFileBinaryFuturePollPtr.asFunction<
          _SpaceFileBinaryFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _accountDisplayNameFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _AccountDisplayNameFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Account_display_name_future_poll");

  late final _accountDisplayNameFuturePoll =
      _accountDisplayNameFuturePollPtr.asFunction<
          _AccountDisplayNameFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _accountSetDisplayNameFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _AccountSetDisplayNameFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Account_set_display_name_future_poll");

  late final _accountSetDisplayNameFuturePoll =
      _accountSetDisplayNameFuturePollPtr.asFunction<
          _AccountSetDisplayNameFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _accountAvatarFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _AccountAvatarFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Account_avatar_future_poll");

  late final _accountAvatarFuturePoll = _accountAvatarFuturePollPtr.asFunction<
      _AccountAvatarFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _accountSetAvatarFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _AccountSetAvatarFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Account_set_avatar_future_poll");

  late final _accountSetAvatarFuturePoll =
      _accountSetAvatarFuturePollPtr.asFunction<
          _AccountSetAvatarFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientRestoreTokenFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientRestoreTokenFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_restore_token_future_poll");

  late final _clientRestoreTokenFuturePoll =
      _clientRestoreTokenFuturePollPtr.asFunction<
          _ClientRestoreTokenFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientConversationFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientConversationFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_conversation_future_poll");

  late final _clientConversationFuturePoll =
      _clientConversationFuturePollPtr.asFunction<
          _ClientConversationFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientConversationsFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientConversationsFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_conversations_future_poll");

  late final _clientConversationsFuturePoll =
      _clientConversationsFuturePollPtr.asFunction<
          _ClientConversationsFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientSpacesFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientSpacesFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_spaces_future_poll");

  late final _clientSpacesFuturePoll = _clientSpacesFuturePollPtr.asFunction<
      _ClientSpacesFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientGetSpaceFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientGetSpaceFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_get_space_future_poll");

  late final _clientGetSpaceFuturePoll =
      _clientGetSpaceFuturePollPtr.asFunction<
          _ClientGetSpaceFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientPinnedLinksFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientPinnedLinksFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_pinned_links_future_poll");

  late final _clientPinnedLinksFuturePoll =
      _clientPinnedLinksFuturePollPtr.asFunction<
          _ClientPinnedLinksFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientSuggestedUsersToInviteFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientSuggestedUsersToInviteFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_suggested_users_to_invite_future_poll");

  late final _clientSuggestedUsersToInviteFuturePoll =
      _clientSuggestedUsersToInviteFuturePollPtr.asFunction<
          _ClientSuggestedUsersToInviteFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientVerifiedDeviceFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientVerifiedDeviceFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_verified_device_future_poll");

  late final _clientVerifiedDeviceFuturePoll =
      _clientVerifiedDeviceFuturePollPtr.asFunction<
          _ClientVerifiedDeviceFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientLogoutFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientLogoutFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_logout_future_poll");

  late final _clientLogoutFuturePoll = _clientLogoutFuturePollPtr.asFunction<
      _ClientLogoutFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientCreateActerSpaceFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientCreateActerSpaceFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_create_acter_space_future_poll");

  late final _clientCreateActerSpaceFuturePoll =
      _clientCreateActerSpaceFuturePollPtr.asFunction<
          _ClientCreateActerSpaceFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientWaitForCommentFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientWaitForCommentFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_wait_for_comment_future_poll");

  late final _clientWaitForCommentFuturePoll =
      _clientWaitForCommentFuturePollPtr.asFunction<
          _ClientWaitForCommentFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientWaitForNewsFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientWaitForNewsFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_wait_for_news_future_poll");

  late final _clientWaitForNewsFuturePoll =
      _clientWaitForNewsFuturePollPtr.asFunction<
          _ClientWaitForNewsFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientLatestNewsEntriesFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientLatestNewsEntriesFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_latest_news_entries_future_poll");

  late final _clientLatestNewsEntriesFuturePoll =
      _clientLatestNewsEntriesFuturePollPtr.asFunction<
          _ClientLatestNewsEntriesFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientWaitForPinFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientWaitForPinFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_wait_for_pin_future_poll");

  late final _clientWaitForPinFuturePoll =
      _clientWaitForPinFuturePollPtr.asFunction<
          _ClientWaitForPinFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientPinsFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientPinsFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_pins_future_poll");

  late final _clientPinsFuturePoll = _clientPinsFuturePollPtr.asFunction<
      _ClientPinsFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientWaitForTaskListFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientWaitForTaskListFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_wait_for_task_list_future_poll");

  late final _clientWaitForTaskListFuturePoll =
      _clientWaitForTaskListFuturePollPtr.asFunction<
          _ClientWaitForTaskListFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientTaskListsFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientTaskListsFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_task_lists_future_poll");

  late final _clientTaskListsFuturePoll =
      _clientTaskListsFuturePollPtr.asFunction<
          _ClientTaskListsFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientWaitForTaskFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientWaitForTaskFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_wait_for_task_future_poll");

  late final _clientWaitForTaskFuturePoll =
      _clientWaitForTaskFuturePollPtr.asFunction<
          _ClientWaitForTaskFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientTaskListFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientTaskListFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_task_list_future_poll");

  late final _clientTaskListFuturePoll =
      _clientTaskListFuturePollPtr.asFunction<
          _ClientTaskListFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _clientCalendarEventsFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _ClientCalendarEventsFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_calendar_events_future_poll");

  late final _clientCalendarEventsFuturePoll =
      _clientCalendarEventsFuturePollPtr.asFunction<
          _ClientCalendarEventsFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _userProfileHasAvatarFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _UserProfileHasAvatarFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__UserProfile_has_avatar_future_poll");

  late final _userProfileHasAvatarFuturePoll =
      _userProfileHasAvatarFuturePollPtr.asFunction<
          _UserProfileHasAvatarFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _userProfileGetAvatarFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _UserProfileGetAvatarFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__UserProfile_get_avatar_future_poll");

  late final _userProfileGetAvatarFuturePoll =
      _userProfileGetAvatarFuturePollPtr.asFunction<
          _UserProfileGetAvatarFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _userProfileGetThumbnailFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _UserProfileGetThumbnailFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__UserProfile_get_thumbnail_future_poll");

  late final _userProfileGetThumbnailFuturePoll =
      _userProfileGetThumbnailFuturePollPtr.asFunction<
          _UserProfileGetThumbnailFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _userProfileGetDisplayNameFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _UserProfileGetDisplayNameFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__UserProfile_get_display_name_future_poll");

  late final _userProfileGetDisplayNameFuturePoll =
      _userProfileGetDisplayNameFuturePollPtr.asFunction<
          _UserProfileGetDisplayNameFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _roomProfileGetAvatarFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _RoomProfileGetAvatarFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__RoomProfile_get_avatar_future_poll");

  late final _roomProfileGetAvatarFuturePoll =
      _roomProfileGetAvatarFuturePollPtr.asFunction<
          _RoomProfileGetAvatarFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _roomProfileGetThumbnailFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _RoomProfileGetThumbnailFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__RoomProfile_get_thumbnail_future_poll");

  late final _roomProfileGetThumbnailFuturePoll =
      _roomProfileGetThumbnailFuturePollPtr.asFunction<
          _RoomProfileGetThumbnailFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _roomProfileGetDisplayNameFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _RoomProfileGetDisplayNameFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__RoomProfile_get_display_name_future_poll");

  late final _roomProfileGetDisplayNameFuturePoll =
      _roomProfileGetDisplayNameFuturePollPtr.asFunction<
          _RoomProfileGetDisplayNameFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _invitationRoomNameFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _InvitationRoomNameFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Invitation_room_name_future_poll");

  late final _invitationRoomNameFuturePoll =
      _invitationRoomNameFuturePollPtr.asFunction<
          _InvitationRoomNameFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _invitationAcceptFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _InvitationAcceptFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Invitation_accept_future_poll");

  late final _invitationAcceptFuturePoll =
      _invitationAcceptFuturePollPtr.asFunction<
          _InvitationAcceptFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _invitationRejectFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _InvitationRejectFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Invitation_reject_future_poll");

  late final _invitationRejectFuturePoll =
      _invitationRejectFuturePollPtr.asFunction<
          _InvitationRejectFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _verificationEventAcceptVerificationRequestFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _VerificationEventAcceptVerificationRequestFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__VerificationEvent_accept_verification_request_future_poll");

  late final _verificationEventAcceptVerificationRequestFuturePoll =
      _verificationEventAcceptVerificationRequestFuturePollPtr.asFunction<
          _VerificationEventAcceptVerificationRequestFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _verificationEventCancelVerificationRequestFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _VerificationEventCancelVerificationRequestFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__VerificationEvent_cancel_verification_request_future_poll");

  late final _verificationEventCancelVerificationRequestFuturePoll =
      _verificationEventCancelVerificationRequestFuturePollPtr.asFunction<
          _VerificationEventCancelVerificationRequestFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _verificationEventAcceptVerificationRequestWithMethodsFuturePollPtr =
      _lookup<
          ffi.NativeFunction<
              _VerificationEventAcceptVerificationRequestWithMethodsFuturePollReturn
                  Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__VerificationEvent_accept_verification_request_with_methods_future_poll");

  late final _verificationEventAcceptVerificationRequestWithMethodsFuturePoll =
      _verificationEventAcceptVerificationRequestWithMethodsFuturePollPtr
          .asFunction<
              _VerificationEventAcceptVerificationRequestWithMethodsFuturePollReturn
                  Function(
    int,
    int,
    int,
  )>();
  late final _verificationEventStartSasVerificationFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _VerificationEventStartSasVerificationFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__VerificationEvent_start_sas_verification_future_poll");

  late final _verificationEventStartSasVerificationFuturePoll =
      _verificationEventStartSasVerificationFuturePollPtr.asFunction<
          _VerificationEventStartSasVerificationFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _verificationEventAcceptSasVerificationFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _VerificationEventAcceptSasVerificationFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__VerificationEvent_accept_sas_verification_future_poll");

  late final _verificationEventAcceptSasVerificationFuturePoll =
      _verificationEventAcceptSasVerificationFuturePollPtr.asFunction<
          _VerificationEventAcceptSasVerificationFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _verificationEventCancelSasVerificationFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _VerificationEventCancelSasVerificationFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__VerificationEvent_cancel_sas_verification_future_poll");

  late final _verificationEventCancelSasVerificationFuturePoll =
      _verificationEventCancelSasVerificationFuturePollPtr.asFunction<
          _VerificationEventCancelSasVerificationFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _verificationEventSendVerificationKeyFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _VerificationEventSendVerificationKeyFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__VerificationEvent_send_verification_key_future_poll");

  late final _verificationEventSendVerificationKeyFuturePoll =
      _verificationEventSendVerificationKeyFuturePollPtr.asFunction<
          _VerificationEventSendVerificationKeyFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _verificationEventCancelVerificationKeyFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _VerificationEventCancelVerificationKeyFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__VerificationEvent_cancel_verification_key_future_poll");

  late final _verificationEventCancelVerificationKeyFuturePoll =
      _verificationEventCancelVerificationKeyFuturePollPtr.asFunction<
          _VerificationEventCancelVerificationKeyFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _verificationEventGetVerificationEmojiFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _VerificationEventGetVerificationEmojiFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__VerificationEvent_get_verification_emoji_future_poll");

  late final _verificationEventGetVerificationEmojiFuturePoll =
      _verificationEventGetVerificationEmojiFuturePollPtr.asFunction<
          _VerificationEventGetVerificationEmojiFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _verificationEventConfirmSasVerificationFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _VerificationEventConfirmSasVerificationFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__VerificationEvent_confirm_sas_verification_future_poll");

  late final _verificationEventConfirmSasVerificationFuturePoll =
      _verificationEventConfirmSasVerificationFuturePollPtr.asFunction<
          _VerificationEventConfirmSasVerificationFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _verificationEventMismatchSasVerificationFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _VerificationEventMismatchSasVerificationFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__VerificationEvent_mismatch_sas_verification_future_poll");

  late final _verificationEventMismatchSasVerificationFuturePoll =
      _verificationEventMismatchSasVerificationFuturePollPtr.asFunction<
          _VerificationEventMismatchSasVerificationFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _verificationEventReviewVerificationMacFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _VerificationEventReviewVerificationMacFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__VerificationEvent_review_verification_mac_future_poll");

  late final _verificationEventReviewVerificationMacFuturePoll =
      _verificationEventReviewVerificationMacFuturePollPtr.asFunction<
          _VerificationEventReviewVerificationMacFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _deviceChangedEventDeviceRecordsFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _DeviceChangedEventDeviceRecordsFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__DeviceChangedEvent_device_records_future_poll");

  late final _deviceChangedEventDeviceRecordsFuturePoll =
      _deviceChangedEventDeviceRecordsFuturePollPtr.asFunction<
          _DeviceChangedEventDeviceRecordsFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _deviceChangedEventRequestVerificationToUserFuturePollPtr =
      _lookup<
          ffi.NativeFunction<
              _DeviceChangedEventRequestVerificationToUserFuturePollReturn
                  Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__DeviceChangedEvent_request_verification_to_user_future_poll");

  late final _deviceChangedEventRequestVerificationToUserFuturePoll =
      _deviceChangedEventRequestVerificationToUserFuturePollPtr.asFunction<
          _DeviceChangedEventRequestVerificationToUserFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _deviceChangedEventRequestVerificationToDeviceFuturePollPtr =
      _lookup<
          ffi.NativeFunction<
              _DeviceChangedEventRequestVerificationToDeviceFuturePollReturn
                  Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__DeviceChangedEvent_request_verification_to_device_future_poll");

  late final _deviceChangedEventRequestVerificationToDeviceFuturePoll =
      _deviceChangedEventRequestVerificationToDeviceFuturePollPtr.asFunction<
          _DeviceChangedEventRequestVerificationToDeviceFuturePollReturn
              Function(
    int,
    int,
    int,
  )>();
  late final _deviceChangedEventRequestVerificationToUserWithMethodsFuturePollPtr =
      _lookup<
          ffi.NativeFunction<
              _DeviceChangedEventRequestVerificationToUserWithMethodsFuturePollReturn
                  Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__DeviceChangedEvent_request_verification_to_user_with_methods_future_poll");

  late final _deviceChangedEventRequestVerificationToUserWithMethodsFuturePoll =
      _deviceChangedEventRequestVerificationToUserWithMethodsFuturePollPtr
          .asFunction<
              _DeviceChangedEventRequestVerificationToUserWithMethodsFuturePollReturn
                  Function(
    int,
    int,
    int,
  )>();
  late final _deviceChangedEventRequestVerificationToDeviceWithMethodsFuturePollPtr =
      _lookup<
          ffi.NativeFunction<
              _DeviceChangedEventRequestVerificationToDeviceWithMethodsFuturePollReturn
                  Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__DeviceChangedEvent_request_verification_to_device_with_methods_future_poll");

  late final _deviceChangedEventRequestVerificationToDeviceWithMethodsFuturePoll =
      _deviceChangedEventRequestVerificationToDeviceWithMethodsFuturePollPtr
          .asFunction<
              _DeviceChangedEventRequestVerificationToDeviceWithMethodsFuturePollReturn
                  Function(
    int,
    int,
    int,
  )>();
  late final _deviceLeftEventDeviceRecordsFuturePollPtr = _lookup<
      ffi.NativeFunction<
          _DeviceLeftEventDeviceRecordsFuturePollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__DeviceLeftEvent_device_records_future_poll");

  late final _deviceLeftEventDeviceRecordsFuturePoll =
      _deviceLeftEventDeviceRecordsFuturePollPtr.asFunction<
          _DeviceLeftEventDeviceRecordsFuturePollReturn Function(
    int,
    int,
    int,
  )>();
  late final _acterPinSubscribeStreamPollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__ActerPin_subscribe_stream_poll");

  late final _acterPinSubscribeStreamPoll =
      _acterPinSubscribeStreamPollPtr.asFunction<
          int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _timelineStreamDiffRxStreamPollPtr = _lookup<
      ffi.NativeFunction<
          _TimelineStreamDiffRxStreamPollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__TimelineStream_diff_rx_stream_poll");

  late final _timelineStreamDiffRxStreamPoll =
      _timelineStreamDiffRxStreamPollPtr.asFunction<
          _TimelineStreamDiffRxStreamPollReturn Function(
    int,
    int,
    int,
    int,
  )>();
  late final _taskSubscribeStreamPollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Task_subscribe_stream_poll");

  late final _taskSubscribeStreamPoll = _taskSubscribeStreamPollPtr.asFunction<
      int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _taskListSubscribeStreamPollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__TaskList_subscribe_stream_poll");

  late final _taskListSubscribeStreamPoll =
      _taskListSubscribeStreamPollPtr.asFunction<
          int Function(
    int,
    int,
    int,
    int,
  )>();
  late final _syncStateFirstSyncedRxStreamPollPtr = _lookup<
      ffi.NativeFunction<
          _SyncStateFirstSyncedRxStreamPollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__SyncState_first_synced_rx_stream_poll");

  late final _syncStateFirstSyncedRxStreamPoll =
      _syncStateFirstSyncedRxStreamPollPtr.asFunction<
          _SyncStateFirstSyncedRxStreamPollReturn Function(
    int,
    int,
    int,
    int,
  )>();
  late final _clientConversationsRxStreamPollPtr = _lookup<
      ffi.NativeFunction<
          _ClientConversationsRxStreamPollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_conversations_rx_stream_poll");

  late final _clientConversationsRxStreamPoll =
      _clientConversationsRxStreamPollPtr.asFunction<
          _ClientConversationsRxStreamPollReturn Function(
    int,
    int,
    int,
    int,
  )>();
  late final _clientInvitationsRxStreamPollPtr = _lookup<
      ffi.NativeFunction<
          _ClientInvitationsRxStreamPollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_invitations_rx_stream_poll");

  late final _clientInvitationsRxStreamPoll =
      _clientInvitationsRxStreamPollPtr.asFunction<
          _ClientInvitationsRxStreamPollReturn Function(
    int,
    int,
    int,
    int,
  )>();
  late final _clientVerificationEventRxStreamPollPtr = _lookup<
      ffi.NativeFunction<
          _ClientVerificationEventRxStreamPollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_verification_event_rx_stream_poll");

  late final _clientVerificationEventRxStreamPoll =
      _clientVerificationEventRxStreamPollPtr.asFunction<
          _ClientVerificationEventRxStreamPollReturn Function(
    int,
    int,
    int,
    int,
  )>();
  late final _clientDeviceChangedEventRxStreamPollPtr = _lookup<
      ffi.NativeFunction<
          _ClientDeviceChangedEventRxStreamPollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_device_changed_event_rx_stream_poll");

  late final _clientDeviceChangedEventRxStreamPoll =
      _clientDeviceChangedEventRxStreamPollPtr.asFunction<
          _ClientDeviceChangedEventRxStreamPollReturn Function(
    int,
    int,
    int,
    int,
  )>();
  late final _clientDeviceLeftEventRxStreamPollPtr = _lookup<
      ffi.NativeFunction<
          _ClientDeviceLeftEventRxStreamPollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_device_left_event_rx_stream_poll");

  late final _clientDeviceLeftEventRxStreamPoll =
      _clientDeviceLeftEventRxStreamPollPtr.asFunction<
          _ClientDeviceLeftEventRxStreamPollReturn Function(
    int,
    int,
    int,
    int,
  )>();
  late final _clientTypingEventRxStreamPollPtr = _lookup<
      ffi.NativeFunction<
          _ClientTypingEventRxStreamPollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_typing_event_rx_stream_poll");

  late final _clientTypingEventRxStreamPoll =
      _clientTypingEventRxStreamPollPtr.asFunction<
          _ClientTypingEventRxStreamPollReturn Function(
    int,
    int,
    int,
    int,
  )>();
  late final _clientReceiptEventRxStreamPollPtr = _lookup<
      ffi.NativeFunction<
          _ClientReceiptEventRxStreamPollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_receipt_event_rx_stream_poll");

  late final _clientReceiptEventRxStreamPoll =
      _clientReceiptEventRxStreamPollPtr.asFunction<
          _ClientReceiptEventRxStreamPollReturn Function(
    int,
    int,
    int,
    int,
  )>();
  late final _clientIncomingMessageRxStreamPollPtr = _lookup<
      ffi.NativeFunction<
          _ClientIncomingMessageRxStreamPollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_incoming_message_rx_stream_poll");

  late final _clientIncomingMessageRxStreamPoll =
      _clientIncomingMessageRxStreamPollPtr.asFunction<
          _ClientIncomingMessageRxStreamPollReturn Function(
    int,
    int,
    int,
    int,
  )>();
  late final _clientSubscribeStreamPollPtr = _lookup<
      ffi.NativeFunction<
          _ClientSubscribeStreamPollReturn Function(
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
    ffi.Int64,
  )>>("__Client_subscribe_stream_poll");

  late final _clientSubscribeStreamPoll =
      _clientSubscribeStreamPollPtr.asFunction<
          _ClientSubscribeStreamPollReturn Function(
    int,
    int,
    int,
    int,
  )>();
  FfiListAccount createFfiListAccount() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListAccountCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListAccount");
    return FfiListAccount._(this, list_box);
  }

  late final _ffiListAccountCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>(
          "__FfiListAccountCreate");

  late final _ffiListAccountCreate =
      _ffiListAccountCreatePtr.asFunction<int Function()>();

  late final _ffiListAccountLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListAccountLen");

  late final _ffiListAccountLen =
      _ffiListAccountLenPtr.asFunction<int Function(int)>();

  late final _ffiListAccountElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListAccountElementAt");

  late final _ffiListAccountElementAt =
      _ffiListAccountElementAtPtr.asFunction<int Function(int, int)>();

  late final _ffiListAccountRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListAccountRemove");

  late final _ffiListAccountRemove =
      _ffiListAccountRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListAccountAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListAccountAdd");

  late final _ffiListAccountAdd =
      _ffiListAccountAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListAccountInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.IntPtr, ffi.Uint32, ffi.IntPtr)>>("__FfiListAccountInsert");

  late final _ffiListAccountInsert =
      _ffiListAccountInsertPtr.asFunction<void Function(int, int, int)>();
  FfiListActerPin createFfiListActerPin() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListActerPinCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListActerPin");
    return FfiListActerPin._(this, list_box);
  }

  late final _ffiListActerPinCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>(
          "__FfiListActerPinCreate");

  late final _ffiListActerPinCreate =
      _ffiListActerPinCreatePtr.asFunction<int Function()>();

  late final _ffiListActerPinLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListActerPinLen");

  late final _ffiListActerPinLen =
      _ffiListActerPinLenPtr.asFunction<int Function(int)>();

  late final _ffiListActerPinElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListActerPinElementAt");

  late final _ffiListActerPinElementAt =
      _ffiListActerPinElementAtPtr.asFunction<int Function(int, int)>();

  late final _ffiListActerPinRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListActerPinRemove");

  late final _ffiListActerPinRemove =
      _ffiListActerPinRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListActerPinAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListActerPinAdd");

  late final _ffiListActerPinAdd =
      _ffiListActerPinAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListActerPinInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.IntPtr, ffi.Uint32, ffi.IntPtr)>>("__FfiListActerPinInsert");

  late final _ffiListActerPinInsert =
      _ffiListActerPinInsertPtr.asFunction<void Function(int, int, int)>();
  FfiListCalendarEvent createFfiListCalendarEvent() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListCalendarEventCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListCalendarEvent");
    return FfiListCalendarEvent._(this, list_box);
  }

  late final _ffiListCalendarEventCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>(
          "__FfiListCalendarEventCreate");

  late final _ffiListCalendarEventCreate =
      _ffiListCalendarEventCreatePtr.asFunction<int Function()>();

  late final _ffiListCalendarEventLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListCalendarEventLen");

  late final _ffiListCalendarEventLen =
      _ffiListCalendarEventLenPtr.asFunction<int Function(int)>();

  late final _ffiListCalendarEventElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListCalendarEventElementAt");

  late final _ffiListCalendarEventElementAt =
      _ffiListCalendarEventElementAtPtr.asFunction<int Function(int, int)>();

  late final _ffiListCalendarEventRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListCalendarEventRemove");

  late final _ffiListCalendarEventRemove =
      _ffiListCalendarEventRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListCalendarEventAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListCalendarEventAdd");

  late final _ffiListCalendarEventAdd =
      _ffiListCalendarEventAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListCalendarEventInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.IntPtr, ffi.Uint32,
              ffi.IntPtr)>>("__FfiListCalendarEventInsert");

  late final _ffiListCalendarEventInsert =
      _ffiListCalendarEventInsertPtr.asFunction<void Function(int, int, int)>();
  FfiListComment createFfiListComment() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListCommentCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListComment");
    return FfiListComment._(this, list_box);
  }

  late final _ffiListCommentCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>(
          "__FfiListCommentCreate");

  late final _ffiListCommentCreate =
      _ffiListCommentCreatePtr.asFunction<int Function()>();

  late final _ffiListCommentLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListCommentLen");

  late final _ffiListCommentLen =
      _ffiListCommentLenPtr.asFunction<int Function(int)>();

  late final _ffiListCommentElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListCommentElementAt");

  late final _ffiListCommentElementAt =
      _ffiListCommentElementAtPtr.asFunction<int Function(int, int)>();

  late final _ffiListCommentRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListCommentRemove");

  late final _ffiListCommentRemove =
      _ffiListCommentRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListCommentAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListCommentAdd");

  late final _ffiListCommentAdd =
      _ffiListCommentAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListCommentInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.IntPtr, ffi.Uint32, ffi.IntPtr)>>("__FfiListCommentInsert");

  late final _ffiListCommentInsert =
      _ffiListCommentInsertPtr.asFunction<void Function(int, int, int)>();
  FfiListConversation createFfiListConversation() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListConversationCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListConversation");
    return FfiListConversation._(this, list_box);
  }

  late final _ffiListConversationCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>(
          "__FfiListConversationCreate");

  late final _ffiListConversationCreate =
      _ffiListConversationCreatePtr.asFunction<int Function()>();

  late final _ffiListConversationLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListConversationLen");

  late final _ffiListConversationLen =
      _ffiListConversationLenPtr.asFunction<int Function(int)>();

  late final _ffiListConversationElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListConversationElementAt");

  late final _ffiListConversationElementAt =
      _ffiListConversationElementAtPtr.asFunction<int Function(int, int)>();

  late final _ffiListConversationRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListConversationRemove");

  late final _ffiListConversationRemove =
      _ffiListConversationRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListConversationAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListConversationAdd");

  late final _ffiListConversationAdd =
      _ffiListConversationAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListConversationInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.IntPtr, ffi.Uint32,
              ffi.IntPtr)>>("__FfiListConversationInsert");

  late final _ffiListConversationInsert =
      _ffiListConversationInsertPtr.asFunction<void Function(int, int, int)>();
  FfiListDeviceRecord createFfiListDeviceRecord() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListDeviceRecordCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListDeviceRecord");
    return FfiListDeviceRecord._(this, list_box);
  }

  late final _ffiListDeviceRecordCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>(
          "__FfiListDeviceRecordCreate");

  late final _ffiListDeviceRecordCreate =
      _ffiListDeviceRecordCreatePtr.asFunction<int Function()>();

  late final _ffiListDeviceRecordLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListDeviceRecordLen");

  late final _ffiListDeviceRecordLen =
      _ffiListDeviceRecordLenPtr.asFunction<int Function(int)>();

  late final _ffiListDeviceRecordElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListDeviceRecordElementAt");

  late final _ffiListDeviceRecordElementAt =
      _ffiListDeviceRecordElementAtPtr.asFunction<int Function(int, int)>();

  late final _ffiListDeviceRecordRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListDeviceRecordRemove");

  late final _ffiListDeviceRecordRemove =
      _ffiListDeviceRecordRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListDeviceRecordAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListDeviceRecordAdd");

  late final _ffiListDeviceRecordAdd =
      _ffiListDeviceRecordAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListDeviceRecordInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.IntPtr, ffi.Uint32,
              ffi.IntPtr)>>("__FfiListDeviceRecordInsert");

  late final _ffiListDeviceRecordInsert =
      _ffiListDeviceRecordInsertPtr.asFunction<void Function(int, int, int)>();
  FfiListFfiString createFfiListFfiString() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListFfiStringCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListFfiString");
    return FfiListFfiString._(this, list_box);
  }

  late final _ffiListFfiStringCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>(
          "__FfiListFfiStringCreate");

  late final _ffiListFfiStringCreate =
      _ffiListFfiStringCreatePtr.asFunction<int Function()>();

  late final _ffiListFfiStringLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListFfiStringLen");

  late final _ffiListFfiStringLen =
      _ffiListFfiStringLenPtr.asFunction<int Function(int)>();

  late final _ffiListFfiStringElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListFfiStringElementAt");

  late final _ffiListFfiStringElementAt =
      _ffiListFfiStringElementAtPtr.asFunction<int Function(int, int)>();

  late final _ffiListFfiStringRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListFfiStringRemove");

  late final _ffiListFfiStringRemove =
      _ffiListFfiStringRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListFfiStringAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListFfiStringAdd");

  late final _ffiListFfiStringAdd =
      _ffiListFfiStringAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListFfiStringInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.IntPtr, ffi.Uint32, ffi.IntPtr)>>("__FfiListFfiStringInsert");

  late final _ffiListFfiStringInsert =
      _ffiListFfiStringInsertPtr.asFunction<void Function(int, int, int)>();
  FfiListInvitation createFfiListInvitation() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListInvitationCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListInvitation");
    return FfiListInvitation._(this, list_box);
  }

  late final _ffiListInvitationCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>(
          "__FfiListInvitationCreate");

  late final _ffiListInvitationCreate =
      _ffiListInvitationCreatePtr.asFunction<int Function()>();

  late final _ffiListInvitationLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListInvitationLen");

  late final _ffiListInvitationLen =
      _ffiListInvitationLenPtr.asFunction<int Function(int)>();

  late final _ffiListInvitationElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListInvitationElementAt");

  late final _ffiListInvitationElementAt =
      _ffiListInvitationElementAtPtr.asFunction<int Function(int, int)>();

  late final _ffiListInvitationRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListInvitationRemove");

  late final _ffiListInvitationRemove =
      _ffiListInvitationRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListInvitationAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListInvitationAdd");

  late final _ffiListInvitationAdd =
      _ffiListInvitationAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListInvitationInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.IntPtr, ffi.Uint32,
              ffi.IntPtr)>>("__FfiListInvitationInsert");

  late final _ffiListInvitationInsert =
      _ffiListInvitationInsertPtr.asFunction<void Function(int, int, int)>();
  FfiListMember createFfiListMember() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListMemberCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListMember");
    return FfiListMember._(this, list_box);
  }

  late final _ffiListMemberCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>(
          "__FfiListMemberCreate");

  late final _ffiListMemberCreate =
      _ffiListMemberCreatePtr.asFunction<int Function()>();

  late final _ffiListMemberLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListMemberLen");

  late final _ffiListMemberLen =
      _ffiListMemberLenPtr.asFunction<int Function(int)>();

  late final _ffiListMemberElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListMemberElementAt");

  late final _ffiListMemberElementAt =
      _ffiListMemberElementAtPtr.asFunction<int Function(int, int)>();

  late final _ffiListMemberRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListMemberRemove");

  late final _ffiListMemberRemove =
      _ffiListMemberRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListMemberAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListMemberAdd");

  late final _ffiListMemberAdd =
      _ffiListMemberAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListMemberInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.IntPtr, ffi.Uint32, ffi.IntPtr)>>("__FfiListMemberInsert");

  late final _ffiListMemberInsert =
      _ffiListMemberInsertPtr.asFunction<void Function(int, int, int)>();
  FfiListNewsEntry createFfiListNewsEntry() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListNewsEntryCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListNewsEntry");
    return FfiListNewsEntry._(this, list_box);
  }

  late final _ffiListNewsEntryCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>(
          "__FfiListNewsEntryCreate");

  late final _ffiListNewsEntryCreate =
      _ffiListNewsEntryCreatePtr.asFunction<int Function()>();

  late final _ffiListNewsEntryLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListNewsEntryLen");

  late final _ffiListNewsEntryLen =
      _ffiListNewsEntryLenPtr.asFunction<int Function(int)>();

  late final _ffiListNewsEntryElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListNewsEntryElementAt");

  late final _ffiListNewsEntryElementAt =
      _ffiListNewsEntryElementAtPtr.asFunction<int Function(int, int)>();

  late final _ffiListNewsEntryRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListNewsEntryRemove");

  late final _ffiListNewsEntryRemove =
      _ffiListNewsEntryRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListNewsEntryAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListNewsEntryAdd");

  late final _ffiListNewsEntryAdd =
      _ffiListNewsEntryAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListNewsEntryInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.IntPtr, ffi.Uint32, ffi.IntPtr)>>("__FfiListNewsEntryInsert");

  late final _ffiListNewsEntryInsert =
      _ffiListNewsEntryInsertPtr.asFunction<void Function(int, int, int)>();
  FfiListNewsSlide createFfiListNewsSlide() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListNewsSlideCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListNewsSlide");
    return FfiListNewsSlide._(this, list_box);
  }

  late final _ffiListNewsSlideCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>(
          "__FfiListNewsSlideCreate");

  late final _ffiListNewsSlideCreate =
      _ffiListNewsSlideCreatePtr.asFunction<int Function()>();

  late final _ffiListNewsSlideLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListNewsSlideLen");

  late final _ffiListNewsSlideLen =
      _ffiListNewsSlideLenPtr.asFunction<int Function(int)>();

  late final _ffiListNewsSlideElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListNewsSlideElementAt");

  late final _ffiListNewsSlideElementAt =
      _ffiListNewsSlideElementAtPtr.asFunction<int Function(int, int)>();

  late final _ffiListNewsSlideRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListNewsSlideRemove");

  late final _ffiListNewsSlideRemove =
      _ffiListNewsSlideRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListNewsSlideAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListNewsSlideAdd");

  late final _ffiListNewsSlideAdd =
      _ffiListNewsSlideAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListNewsSlideInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.IntPtr, ffi.Uint32, ffi.IntPtr)>>("__FfiListNewsSlideInsert");

  late final _ffiListNewsSlideInsert =
      _ffiListNewsSlideInsertPtr.asFunction<void Function(int, int, int)>();
  FfiListObjRef createFfiListObjRef() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListObjRefCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListObjRef");
    return FfiListObjRef._(this, list_box);
  }

  late final _ffiListObjRefCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>(
          "__FfiListObjRefCreate");

  late final _ffiListObjRefCreate =
      _ffiListObjRefCreatePtr.asFunction<int Function()>();

  late final _ffiListObjRefLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListObjRefLen");

  late final _ffiListObjRefLen =
      _ffiListObjRefLenPtr.asFunction<int Function(int)>();

  late final _ffiListObjRefElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListObjRefElementAt");

  late final _ffiListObjRefElementAt =
      _ffiListObjRefElementAtPtr.asFunction<int Function(int, int)>();

  late final _ffiListObjRefRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListObjRefRemove");

  late final _ffiListObjRefRemove =
      _ffiListObjRefRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListObjRefAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListObjRefAdd");

  late final _ffiListObjRefAdd =
      _ffiListObjRefAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListObjRefInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.IntPtr, ffi.Uint32, ffi.IntPtr)>>("__FfiListObjRefInsert");

  late final _ffiListObjRefInsert =
      _ffiListObjRefInsertPtr.asFunction<void Function(int, int, int)>();
  FfiListReceiptRecord createFfiListReceiptRecord() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListReceiptRecordCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListReceiptRecord");
    return FfiListReceiptRecord._(this, list_box);
  }

  late final _ffiListReceiptRecordCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>(
          "__FfiListReceiptRecordCreate");

  late final _ffiListReceiptRecordCreate =
      _ffiListReceiptRecordCreatePtr.asFunction<int Function()>();

  late final _ffiListReceiptRecordLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListReceiptRecordLen");

  late final _ffiListReceiptRecordLen =
      _ffiListReceiptRecordLenPtr.asFunction<int Function(int)>();

  late final _ffiListReceiptRecordElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListReceiptRecordElementAt");

  late final _ffiListReceiptRecordElementAt =
      _ffiListReceiptRecordElementAtPtr.asFunction<int Function(int, int)>();

  late final _ffiListReceiptRecordRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListReceiptRecordRemove");

  late final _ffiListReceiptRecordRemove =
      _ffiListReceiptRecordRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListReceiptRecordAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListReceiptRecordAdd");

  late final _ffiListReceiptRecordAdd =
      _ffiListReceiptRecordAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListReceiptRecordInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.IntPtr, ffi.Uint32,
              ffi.IntPtr)>>("__FfiListReceiptRecordInsert");

  late final _ffiListReceiptRecordInsert =
      _ffiListReceiptRecordInsertPtr.asFunction<void Function(int, int, int)>();
  FfiListRoomMessage createFfiListRoomMessage() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListRoomMessageCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListRoomMessage");
    return FfiListRoomMessage._(this, list_box);
  }

  late final _ffiListRoomMessageCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>(
          "__FfiListRoomMessageCreate");

  late final _ffiListRoomMessageCreate =
      _ffiListRoomMessageCreatePtr.asFunction<int Function()>();

  late final _ffiListRoomMessageLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListRoomMessageLen");

  late final _ffiListRoomMessageLen =
      _ffiListRoomMessageLenPtr.asFunction<int Function(int)>();

  late final _ffiListRoomMessageElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListRoomMessageElementAt");

  late final _ffiListRoomMessageElementAt =
      _ffiListRoomMessageElementAtPtr.asFunction<int Function(int, int)>();

  late final _ffiListRoomMessageRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListRoomMessageRemove");

  late final _ffiListRoomMessageRemove =
      _ffiListRoomMessageRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListRoomMessageAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListRoomMessageAdd");

  late final _ffiListRoomMessageAdd =
      _ffiListRoomMessageAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListRoomMessageInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.IntPtr, ffi.Uint32,
              ffi.IntPtr)>>("__FfiListRoomMessageInsert");

  late final _ffiListRoomMessageInsert =
      _ffiListRoomMessageInsertPtr.asFunction<void Function(int, int, int)>();
  FfiListSpace createFfiListSpace() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListSpaceCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListSpace");
    return FfiListSpace._(this, list_box);
  }

  late final _ffiListSpaceCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>(
          "__FfiListSpaceCreate");

  late final _ffiListSpaceCreate =
      _ffiListSpaceCreatePtr.asFunction<int Function()>();

  late final _ffiListSpaceLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListSpaceLen");

  late final _ffiListSpaceLen =
      _ffiListSpaceLenPtr.asFunction<int Function(int)>();

  late final _ffiListSpaceElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListSpaceElementAt");

  late final _ffiListSpaceElementAt =
      _ffiListSpaceElementAtPtr.asFunction<int Function(int, int)>();

  late final _ffiListSpaceRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListSpaceRemove");

  late final _ffiListSpaceRemove =
      _ffiListSpaceRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListSpaceAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListSpaceAdd");

  late final _ffiListSpaceAdd =
      _ffiListSpaceAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListSpaceInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.IntPtr, ffi.Uint32, ffi.IntPtr)>>("__FfiListSpaceInsert");

  late final _ffiListSpaceInsert =
      _ffiListSpaceInsertPtr.asFunction<void Function(int, int, int)>();
  FfiListSpaceRelation createFfiListSpaceRelation() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListSpaceRelationCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListSpaceRelation");
    return FfiListSpaceRelation._(this, list_box);
  }

  late final _ffiListSpaceRelationCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>(
          "__FfiListSpaceRelationCreate");

  late final _ffiListSpaceRelationCreate =
      _ffiListSpaceRelationCreatePtr.asFunction<int Function()>();

  late final _ffiListSpaceRelationLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListSpaceRelationLen");

  late final _ffiListSpaceRelationLen =
      _ffiListSpaceRelationLenPtr.asFunction<int Function(int)>();

  late final _ffiListSpaceRelationElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListSpaceRelationElementAt");

  late final _ffiListSpaceRelationElementAt =
      _ffiListSpaceRelationElementAtPtr.asFunction<int Function(int, int)>();

  late final _ffiListSpaceRelationRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListSpaceRelationRemove");

  late final _ffiListSpaceRelationRemove =
      _ffiListSpaceRelationRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListSpaceRelationAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListSpaceRelationAdd");

  late final _ffiListSpaceRelationAdd =
      _ffiListSpaceRelationAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListSpaceRelationInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.IntPtr, ffi.Uint32,
              ffi.IntPtr)>>("__FfiListSpaceRelationInsert");

  late final _ffiListSpaceRelationInsert =
      _ffiListSpaceRelationInsertPtr.asFunction<void Function(int, int, int)>();
  FfiListTask createFfiListTask() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListTaskCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListTask");
    return FfiListTask._(this, list_box);
  }

  late final _ffiListTaskCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>("__FfiListTaskCreate");

  late final _ffiListTaskCreate =
      _ffiListTaskCreatePtr.asFunction<int Function()>();

  late final _ffiListTaskLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListTaskLen");

  late final _ffiListTaskLen =
      _ffiListTaskLenPtr.asFunction<int Function(int)>();

  late final _ffiListTaskElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListTaskElementAt");

  late final _ffiListTaskElementAt =
      _ffiListTaskElementAtPtr.asFunction<int Function(int, int)>();

  late final _ffiListTaskRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListTaskRemove");

  late final _ffiListTaskRemove =
      _ffiListTaskRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListTaskAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListTaskAdd");

  late final _ffiListTaskAdd =
      _ffiListTaskAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListTaskInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.IntPtr, ffi.Uint32, ffi.IntPtr)>>("__FfiListTaskInsert");

  late final _ffiListTaskInsert =
      _ffiListTaskInsertPtr.asFunction<void Function(int, int, int)>();
  FfiListTaskList createFfiListTaskList() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListTaskListCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListTaskList");
    return FfiListTaskList._(this, list_box);
  }

  late final _ffiListTaskListCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>(
          "__FfiListTaskListCreate");

  late final _ffiListTaskListCreate =
      _ffiListTaskListCreatePtr.asFunction<int Function()>();

  late final _ffiListTaskListLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListTaskListLen");

  late final _ffiListTaskListLen =
      _ffiListTaskListLenPtr.asFunction<int Function(int)>();

  late final _ffiListTaskListElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListTaskListElementAt");

  late final _ffiListTaskListElementAt =
      _ffiListTaskListElementAtPtr.asFunction<int Function(int, int)>();

  late final _ffiListTaskListRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListTaskListRemove");

  late final _ffiListTaskListRemove =
      _ffiListTaskListRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListTaskListAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListTaskListAdd");

  late final _ffiListTaskListAdd =
      _ffiListTaskListAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListTaskListInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.IntPtr, ffi.Uint32, ffi.IntPtr)>>("__FfiListTaskListInsert");

  late final _ffiListTaskListInsert =
      _ffiListTaskListInsertPtr.asFunction<void Function(int, int, int)>();
  FfiListUserId createFfiListUserId() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListUserIdCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListUserId");
    return FfiListUserId._(this, list_box);
  }

  late final _ffiListUserIdCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>(
          "__FfiListUserIdCreate");

  late final _ffiListUserIdCreate =
      _ffiListUserIdCreatePtr.asFunction<int Function()>();

  late final _ffiListUserIdLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListUserIdLen");

  late final _ffiListUserIdLen =
      _ffiListUserIdLenPtr.asFunction<int Function(int)>();

  late final _ffiListUserIdElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListUserIdElementAt");

  late final _ffiListUserIdElementAt =
      _ffiListUserIdElementAtPtr.asFunction<int Function(int, int)>();

  late final _ffiListUserIdRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListUserIdRemove");

  late final _ffiListUserIdRemove =
      _ffiListUserIdRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListUserIdAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListUserIdAdd");

  late final _ffiListUserIdAdd =
      _ffiListUserIdAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListUserIdInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.IntPtr, ffi.Uint32, ffi.IntPtr)>>("__FfiListUserIdInsert");

  late final _ffiListUserIdInsert =
      _ffiListUserIdInsertPtr.asFunction<void Function(int, int, int)>();
  FfiListUserProfile createFfiListUserProfile() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListUserProfileCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListUserProfile");
    return FfiListUserProfile._(this, list_box);
  }

  late final _ffiListUserProfileCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>(
          "__FfiListUserProfileCreate");

  late final _ffiListUserProfileCreate =
      _ffiListUserProfileCreatePtr.asFunction<int Function()>();

  late final _ffiListUserProfileLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListUserProfileLen");

  late final _ffiListUserProfileLen =
      _ffiListUserProfileLenPtr.asFunction<int Function(int)>();

  late final _ffiListUserProfileElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListUserProfileElementAt");

  late final _ffiListUserProfileElementAt =
      _ffiListUserProfileElementAtPtr.asFunction<int Function(int, int)>();

  late final _ffiListUserProfileRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListUserProfileRemove");

  late final _ffiListUserProfileRemove =
      _ffiListUserProfileRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListUserProfileAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListUserProfileAdd");

  late final _ffiListUserProfileAdd =
      _ffiListUserProfileAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListUserProfileInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.IntPtr, ffi.Uint32,
              ffi.IntPtr)>>("__FfiListUserProfileInsert");

  late final _ffiListUserProfileInsert =
      _ffiListUserProfileInsertPtr.asFunction<void Function(int, int, int)>();
  FfiListVerificationEmoji createFfiListVerificationEmoji() {
    final ffi.Pointer<ffi.Void> list_ptr =
        ffi.Pointer.fromAddress(_ffiListVerificationEmojiCreate());
    final list_box = _Box(this, list_ptr, "drop_box_FfiListVerificationEmoji");
    return FfiListVerificationEmoji._(this, list_box);
  }

  late final _ffiListVerificationEmojiCreatePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function()>>(
          "__FfiListVerificationEmojiCreate");

  late final _ffiListVerificationEmojiCreate =
      _ffiListVerificationEmojiCreatePtr.asFunction<int Function()>();

  late final _ffiListVerificationEmojiLenPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.IntPtr)>>(
          "__FfiListVerificationEmojiLen");

  late final _ffiListVerificationEmojiLen =
      _ffiListVerificationEmojiLenPtr.asFunction<int Function(int)>();

  late final _ffiListVerificationEmojiElementAtPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListVerificationEmojiElementAt");

  late final _ffiListVerificationEmojiElementAt =
      _ffiListVerificationEmojiElementAtPtr
          .asFunction<int Function(int, int)>();

  late final _ffiListVerificationEmojiRemovePtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.Uint32)>>(
          "__FfiListVerificationEmojiRemove");

  late final _ffiListVerificationEmojiRemove =
      _ffiListVerificationEmojiRemovePtr.asFunction<int Function(int, int)>();

  late final _ffiListVerificationEmojiAddPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr, ffi.IntPtr)>>(
          "__FfiListVerificationEmojiAdd");

  late final _ffiListVerificationEmojiAdd =
      _ffiListVerificationEmojiAddPtr.asFunction<void Function(int, int)>();

  late final _ffiListVerificationEmojiInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.IntPtr, ffi.Uint32,
              ffi.IntPtr)>>("__FfiListVerificationEmojiInsert");

  late final _ffiListVerificationEmojiInsert =
      _ffiListVerificationEmojiInsertPtr
          .asFunction<void Function(int, int, int)>();
  late final _destructureRelationTargetTypePtr =
      _lookup<ffi.NativeFunction<_EnumWrapper Function(ffi.IntPtr)>>(
          "destructure_enum_RelationTargetType");

  late final _destructureRelationTargetType = _destructureRelationTargetTypePtr
      .asFunction<_EnumWrapper Function(int)>();
}

/// Representing a time frame
class EfkDuration {
  final Api _api;
  final _Box _box;

  EfkDuration._(this._api, this._box);

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

/// Representing a color
class EfkColor {
  final Api _api;
  final _Box _box;

  EfkColor._(this._api, this._box);

  /// as rgba in u8
  List<dynamic> rgbaU8() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._efkColorRgbaU8(
      tmp0,
    );
    final tmp4 = tmp1.arg0;
    final tmp6 = tmp1.arg1;
    final tmp8 = tmp1.arg2;
    final tmp10 = tmp1.arg3;
    final tmp3 = tmp4;
    final tmp5 = tmp6;
    final tmp7 = tmp8;
    final tmp9 = tmp10;
    final List tmp2 = [];
    tmp2.add(tmp3);
    tmp2.add(tmp5);
    tmp2.add(tmp7);
    tmp2.add(tmp9);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class UtcDateTime {
  final Api _api;
  final _Box _box;

  UtcDateTime._(this._api, this._box);

  int timestamp() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._utcDateTimeTimestamp(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3;
    return tmp2;
  }

  String toRfc2822() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._utcDateTimeToRfc2822(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  String toRfc3339() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._utcDateTimeToRfc3339(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  int timestampMillis() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._utcDateTimeTimestampMillis(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3;
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class RefDetails {
  final Api _api;
  final _Box _box;

  RefDetails._(this._api, this._box);

  /// the target id
  String? targetIdStr() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._refDetailsTargetIdStr(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// if that is in a different room, specified here
  String? roomIdStr() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._refDetailsRoomIdStr(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// gives either `link`, `task`, `task-list` or `calendar_client`
  String typeStr() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._refDetailsTypeStr(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// what type of embed action is requested_inputs
  String embedActionStr() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._refDetailsEmbedActionStr(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// if this is a `task` type, what `task-list-id` does it belong to
  String? taskListIdStr() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._refDetailsTaskListIdStr(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// if ref is `link`, its display title
  String? title() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._refDetailsTitle(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// if ref is `link`, its uri
  String? uri() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._refDetailsUri(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

/// An acter internal link to a different object
class ObjRef {
  final Api _api;
  final _Box _box;

  ObjRef._(this._api, this._box);

  /// where to position the element (if given)
  String? positionStr() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._objRefPositionStr(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// further details of the reference
  RefDetails reference() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._objRefReference(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_RefDetails");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = RefDetails._(_api, tmp3_1);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

/// A foreground and background color setting
class Colorize {
  final Api _api;
  final _Box _box;

  Colorize._(this._api, this._box);

  /// Foreground or text color
  EfkColor? color() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._colorizeColor(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_EfkColor");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = EfkColor._(_api, tmp4_1);
    return tmp2;
  }

  /// Background color
  EfkColor? background() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._colorizeBackground(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_EfkColor");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = EfkColor._(_api, tmp4_1);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

/// A single Slide of a NewsEntry
class NewsSlide {
  final Api _api;
  final _Box _box;

  NewsSlide._(this._api, this._box);

  /// the content of this slide
  String typeStr() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._newsSlideTypeStr(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// the textual content of this slide
  String text() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._newsSlideText(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// the references linked in this slide
  FfiListObjRef references() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._newsSlideReferences(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_FfiListObjRef");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp4 = FfiListObjRef._(_api, tmp3_1);
    final tmp2 = tmp4;
    return tmp2;
  }

  /// if this is an image, hand over the description
  ImageDesc? imageDesc() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._newsSlideImageDesc(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_ImageDesc");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = ImageDesc._(_api, tmp4_1);
    return tmp2;
  }

  /// if this is an image, hand over the data
  Future<FfiBufferUint8> imageBinary() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._newsSlideImageBinary(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__NewsSlide_image_binary_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__newsSlideImageBinaryFuturePoll);
    return tmp2;
  }

  /// if this is an audio, hand over the description
  AudioDesc? audioDesc() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._newsSlideAudioDesc(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_AudioDesc");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = AudioDesc._(_api, tmp4_1);
    return tmp2;
  }

  /// if this is an audio, hand over the data
  Future<FfiBufferUint8> audioBinary() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._newsSlideAudioBinary(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__NewsSlide_audio_binary_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__newsSlideAudioBinaryFuturePoll);
    return tmp2;
  }

  /// if this is a video, hand over the description
  VideoDesc? videoDesc() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._newsSlideVideoDesc(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_VideoDesc");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = VideoDesc._(_api, tmp4_1);
    return tmp2;
  }

  /// if this is a video, hand over the data
  Future<FfiBufferUint8> videoBinary() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._newsSlideVideoBinary(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__NewsSlide_video_binary_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__newsSlideVideoBinaryFuturePoll);
    return tmp2;
  }

  /// if this is a file, hand over the description
  FileDesc? fileDesc() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._newsSlideFileDesc(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_FileDesc");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = FileDesc._(_api, tmp4_1);
    return tmp2;
  }

  /// if this is a file, hand over the data
  Future<FfiBufferUint8> fileBinary() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._newsSlideFileBinary(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__NewsSlide_file_binary_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__newsSlideFileBinaryFuturePoll);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

/// A news entry
class NewsEntry {
  final Api _api;
  final _Box _box;

  NewsEntry._(this._api, this._box);

  int slidesCount() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._newsEntrySlidesCount(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3;
    return tmp2;
  }

  /// The slides belonging to this news item
  NewsSlide? getSlide(
    int pos,
  ) {
    final tmp1 = pos;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1;
    final tmp3 = _api._newsEntryGetSlide(
      tmp0,
      tmp2,
    );
    final tmp5 = tmp3.arg0;
    final tmp6 = tmp3.arg1;
    if (tmp5 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp6_0 = ffi.Pointer.fromAddress(tmp6);
    final tmp6_1 = _Box(_api, tmp6_0, "drop_box_NewsSlide");
    tmp6_1._finalizer = _api._registerFinalizer(tmp6_1);
    final tmp4 = NewsSlide._(_api, tmp6_1);
    return tmp4;
  }

  /// The color setting
  Colorize? colors() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._newsEntryColors(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_Colorize");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = Colorize._(_api, tmp4_1);
    return tmp2;
  }

  /// how many comments on this news entry
  int commentsCount() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._newsEntryCommentsCount(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3;
    return tmp2;
  }

  /// how many likes on this news entry
  int likesCount() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._newsEntryLikesCount(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3;
    return tmp2;
  }

  /// get room id
  RoomId roomId() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._newsEntryRoomId(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_RoomId");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = RoomId._(_api, tmp3_1);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class NewsEntryDraft {
  final Api _api;
  final _Box _box;

  NewsEntryDraft._(this._api, this._box);

  /// create news slide for text msg
  void addTextSlide(
    String body,
  ) {
    final tmp1 = body;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    _api._newsEntryDraftAddTextSlide(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    return;
  }

  /// create news slide for image msg
  void addImageSlide(
    String body,
    String url,
    String? mimetype,
    int? size,
    int? width,
    int? height,
    String? blurhash,
  ) {
    final tmp1 = body;
    final tmp5 = url;
    final tmp9 = mimetype;
    final tmp15 = size;
    final tmp19 = width;
    final tmp23 = height;
    final tmp27 = blurhash;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    var tmp10 = 0;
    var tmp12 = 0;
    var tmp13 = 0;
    var tmp14 = 0;
    var tmp16 = 0;
    var tmp18 = 0;
    var tmp20 = 0;
    var tmp22 = 0;
    var tmp24 = 0;
    var tmp26 = 0;
    var tmp28 = 0;
    var tmp30 = 0;
    var tmp31 = 0;
    var tmp32 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    if (tmp9 == null) {
      tmp10 = 0;
    } else {
      tmp10 = 1;
      final tmp11 = tmp9;
      final tmp11_0 = utf8.encode(tmp11);
      tmp13 = tmp11_0.length;
      final ffi.Pointer<ffi.Uint8> tmp12_0 = _api.__allocate(tmp13 * 1, 1);
      final Uint8List tmp12_1 = tmp12_0.asTypedList(tmp13);
      tmp12_1.setAll(0, tmp11_0);
      tmp12 = tmp12_0.address;
      tmp14 = tmp13;
    }
    if (tmp15 == null) {
      tmp16 = 0;
    } else {
      tmp16 = 1;
      final tmp17 = tmp15;
      tmp18 = tmp17;
    }
    if (tmp19 == null) {
      tmp20 = 0;
    } else {
      tmp20 = 1;
      final tmp21 = tmp19;
      tmp22 = tmp21;
    }
    if (tmp23 == null) {
      tmp24 = 0;
    } else {
      tmp24 = 1;
      final tmp25 = tmp23;
      tmp26 = tmp25;
    }
    if (tmp27 == null) {
      tmp28 = 0;
    } else {
      tmp28 = 1;
      final tmp29 = tmp27;
      final tmp29_0 = utf8.encode(tmp29);
      tmp31 = tmp29_0.length;
      final ffi.Pointer<ffi.Uint8> tmp30_0 = _api.__allocate(tmp31 * 1, 1);
      final Uint8List tmp30_1 = tmp30_0.asTypedList(tmp31);
      tmp30_1.setAll(0, tmp29_0);
      tmp30 = tmp30_0.address;
      tmp32 = tmp31;
    }
    _api._newsEntryDraftAddImageSlide(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
      tmp10,
      tmp12,
      tmp13,
      tmp14,
      tmp16,
      tmp18,
      tmp20,
      tmp22,
      tmp24,
      tmp26,
      tmp28,
      tmp30,
      tmp31,
      tmp32,
    );
    return;
  }

  /// create news slide for audio msg
  void addAudioSlide(
    String body,
    String url,
    int? secs,
    String? mimetype,
    int? size,
  ) {
    final tmp1 = body;
    final tmp5 = url;
    final tmp9 = secs;
    final tmp13 = mimetype;
    final tmp19 = size;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    var tmp10 = 0;
    var tmp12 = 0;
    var tmp14 = 0;
    var tmp16 = 0;
    var tmp17 = 0;
    var tmp18 = 0;
    var tmp20 = 0;
    var tmp22 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    if (tmp9 == null) {
      tmp10 = 0;
    } else {
      tmp10 = 1;
      final tmp11 = tmp9;
      tmp12 = tmp11;
    }
    if (tmp13 == null) {
      tmp14 = 0;
    } else {
      tmp14 = 1;
      final tmp15 = tmp13;
      final tmp15_0 = utf8.encode(tmp15);
      tmp17 = tmp15_0.length;
      final ffi.Pointer<ffi.Uint8> tmp16_0 = _api.__allocate(tmp17 * 1, 1);
      final Uint8List tmp16_1 = tmp16_0.asTypedList(tmp17);
      tmp16_1.setAll(0, tmp15_0);
      tmp16 = tmp16_0.address;
      tmp18 = tmp17;
    }
    if (tmp19 == null) {
      tmp20 = 0;
    } else {
      tmp20 = 1;
      final tmp21 = tmp19;
      tmp22 = tmp21;
    }
    _api._newsEntryDraftAddAudioSlide(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
      tmp10,
      tmp12,
      tmp14,
      tmp16,
      tmp17,
      tmp18,
      tmp20,
      tmp22,
    );
    return;
  }

  /// create news slide for video msg
  void addVideoSlide(
    String body,
    String url,
    int? secs,
    int? height,
    int? width,
    String? mimetype,
    int? size,
    String? blurhash,
  ) {
    final tmp1 = body;
    final tmp5 = url;
    final tmp9 = secs;
    final tmp13 = height;
    final tmp17 = width;
    final tmp21 = mimetype;
    final tmp27 = size;
    final tmp31 = blurhash;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    var tmp10 = 0;
    var tmp12 = 0;
    var tmp14 = 0;
    var tmp16 = 0;
    var tmp18 = 0;
    var tmp20 = 0;
    var tmp22 = 0;
    var tmp24 = 0;
    var tmp25 = 0;
    var tmp26 = 0;
    var tmp28 = 0;
    var tmp30 = 0;
    var tmp32 = 0;
    var tmp34 = 0;
    var tmp35 = 0;
    var tmp36 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    if (tmp9 == null) {
      tmp10 = 0;
    } else {
      tmp10 = 1;
      final tmp11 = tmp9;
      tmp12 = tmp11;
    }
    if (tmp13 == null) {
      tmp14 = 0;
    } else {
      tmp14 = 1;
      final tmp15 = tmp13;
      tmp16 = tmp15;
    }
    if (tmp17 == null) {
      tmp18 = 0;
    } else {
      tmp18 = 1;
      final tmp19 = tmp17;
      tmp20 = tmp19;
    }
    if (tmp21 == null) {
      tmp22 = 0;
    } else {
      tmp22 = 1;
      final tmp23 = tmp21;
      final tmp23_0 = utf8.encode(tmp23);
      tmp25 = tmp23_0.length;
      final ffi.Pointer<ffi.Uint8> tmp24_0 = _api.__allocate(tmp25 * 1, 1);
      final Uint8List tmp24_1 = tmp24_0.asTypedList(tmp25);
      tmp24_1.setAll(0, tmp23_0);
      tmp24 = tmp24_0.address;
      tmp26 = tmp25;
    }
    if (tmp27 == null) {
      tmp28 = 0;
    } else {
      tmp28 = 1;
      final tmp29 = tmp27;
      tmp30 = tmp29;
    }
    if (tmp31 == null) {
      tmp32 = 0;
    } else {
      tmp32 = 1;
      final tmp33 = tmp31;
      final tmp33_0 = utf8.encode(tmp33);
      tmp35 = tmp33_0.length;
      final ffi.Pointer<ffi.Uint8> tmp34_0 = _api.__allocate(tmp35 * 1, 1);
      final Uint8List tmp34_1 = tmp34_0.asTypedList(tmp35);
      tmp34_1.setAll(0, tmp33_0);
      tmp34 = tmp34_0.address;
      tmp36 = tmp35;
    }
    _api._newsEntryDraftAddVideoSlide(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
      tmp10,
      tmp12,
      tmp14,
      tmp16,
      tmp18,
      tmp20,
      tmp22,
      tmp24,
      tmp25,
      tmp26,
      tmp28,
      tmp30,
      tmp32,
      tmp34,
      tmp35,
      tmp36,
    );
    return;
  }

  /// create news slide for file msg
  void addFileSlide(
    String body,
    String url,
    String? mimetype,
    int? size,
  ) {
    final tmp1 = body;
    final tmp5 = url;
    final tmp9 = mimetype;
    final tmp15 = size;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    var tmp10 = 0;
    var tmp12 = 0;
    var tmp13 = 0;
    var tmp14 = 0;
    var tmp16 = 0;
    var tmp18 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    if (tmp9 == null) {
      tmp10 = 0;
    } else {
      tmp10 = 1;
      final tmp11 = tmp9;
      final tmp11_0 = utf8.encode(tmp11);
      tmp13 = tmp11_0.length;
      final ffi.Pointer<ffi.Uint8> tmp12_0 = _api.__allocate(tmp13 * 1, 1);
      final Uint8List tmp12_1 = tmp12_0.asTypedList(tmp13);
      tmp12_1.setAll(0, tmp11_0);
      tmp12 = tmp12_0.address;
      tmp14 = tmp13;
    }
    if (tmp15 == null) {
      tmp16 = 0;
    } else {
      tmp16 = 1;
      final tmp17 = tmp15;
      tmp18 = tmp17;
    }
    _api._newsEntryDraftAddFileSlide(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
      tmp10,
      tmp12,
      tmp13,
      tmp14,
      tmp16,
      tmp18,
    );
    return;
  }

  /// clear slides
  void unsetSlides() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._newsEntryDraftUnsetSlides(
      tmp0,
    );
    return;
  }

  /// set the color for this news entry
  void colors(
    Colorize colors,
  ) {
    final tmp1 = colors;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1._box.move();
    _api._newsEntryDraftColors(
      tmp0,
      tmp2,
    );
    return;
  }

  void unsetColors() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._newsEntryDraftUnsetColors(
      tmp0,
    );
    return;
  }

  /// create this news entry
  Future<EventId> send() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._newsEntryDraftSend(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__NewsEntryDraft_send_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__newsEntryDraftSendFuturePoll);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class NewsEntryUpdateBuilder {
  final Api _api;
  final _Box _box;

  NewsEntryUpdateBuilder._(this._api, this._box);

  /// set the slides for this news entry
  void slides(
    FfiListNewsSlide slides,
  ) {
    final tmp1 = slides;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1._box.move();
    _api._newsEntryUpdateBuilderSlides(
      tmp0,
      tmp2,
    );
    return;
  }

  void unsetSlides() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._newsEntryUpdateBuilderUnsetSlides(
      tmp0,
    );
    return;
  }

  void unsetSlidesUpdate() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._newsEntryUpdateBuilderUnsetSlidesUpdate(
      tmp0,
    );
    return;
  }

  /// set the color for this news entry
  void colors(
    Colorize colors,
  ) {
    final tmp1 = colors;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1._box.move();
    _api._newsEntryUpdateBuilderColors(
      tmp0,
      tmp2,
    );
    return;
  }

  void unsetColors() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._newsEntryUpdateBuilderUnsetColors(
      tmp0,
    );
    return;
  }

  void unsetColorsUpdate() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._newsEntryUpdateBuilderUnsetColorsUpdate(
      tmp0,
    );
    return;
  }

  /// update this news entry
  Future<EventId> send() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._newsEntryUpdateBuilderSend(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 =
        _Box(_api, tmp3_0, "__NewsEntryUpdateBuilder_send_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 =
        _nativeFuture(tmp3_1, _api.__newsEntryUpdateBuilderSendFuturePoll);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class Tag {
  final Api _api;
  final _Box _box;

  Tag._(this._api, this._box);

  /// the title of the tag
  String title() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._tagTitle(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// dash-cased-ascii-version for usage in hashtags (no `#` at the front)
  String hashTag() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._tagHashTag(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// if given, the specific color for this tag
  EfkColor? color() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._tagColor(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_EfkColor");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = EfkColor._(_api, tmp4_1);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

/// Draft a Pin
class PinDraft {
  final Api _api;
  final _Box _box;

  PinDraft._(this._api, this._box);

  /// set the title for this pin
  void title(
    String title,
  ) {
    final tmp1 = title;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    _api._pinDraftTitle(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    return;
  }

  /// set the content for this pin
  void contentText(
    String text,
  ) {
    final tmp1 = text;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    _api._pinDraftContentText(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    return;
  }

  void unsetContent() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._pinDraftUnsetContent(
      tmp0,
    );
    return;
  }

  /// set the url for this pin
  void url(
    String text,
  ) {
    final tmp1 = text;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    _api._pinDraftUrl(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    return;
  }

  void unsetUrl() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._pinDraftUnsetUrl(
      tmp0,
    );
    return;
  }

  Future<EventId> send() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._pinDraftSend(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__PinDraft_send_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__pinDraftSendFuturePoll);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

/// A pin object
class ActerPin {
  final Api _api;
  final _Box _box;

  ActerPin._(this._api, this._box);

  /// get the title of the pin
  String title() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._acterPinTitle(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// get the content_text of the pin
  String? contentText() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._acterPinContentText(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// whether this pin is a link
  bool isLink() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._acterPinIsLink(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3 > 0;
    return tmp2;
  }

  /// get the link content
  String? url() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._acterPinUrl(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// get the link color settings
  EfkColor? color() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._acterPinColor(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_EfkColor");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = EfkColor._(_api, tmp4_1);
    return tmp2;
  }

  /// make a builder for updating the pin
  PinUpdateBuilder updateBuilder() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._acterPinUpdateBuilder(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    final tmp7 = tmp1.arg4;
    if (tmp3 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      final tmp3_0 = utf8.decode(tmp4_0.asTypedList(tmp5));
      if (tmp5 > 0) {
        final ffi.Pointer<ffi.Void> tmp4_0;
        tmp4_0 = ffi.Pointer.fromAddress(tmp4);
        _api.__deallocate(tmp4_0, tmp6, 1);
      }
      throw tmp3_0;
    }
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "drop_box_PinUpdateBuilder");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp2 = PinUpdateBuilder._(_api, tmp7_1);
    return tmp2;
  }

  Stream<void> subscribe() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._acterPinSubscribe(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__ActerPin_subscribe_stream_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeStream(tmp3_1, _api.__acterPinSubscribeStreamPoll);
    return tmp2;
  }

  /// replace the current pin with one with the latest state
  Future<ActerPin> refresh() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._acterPinRefresh(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__ActerPin_refresh_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__acterPinRefreshFuturePoll);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class PinUpdateBuilder {
  final Api _api;
  final _Box _box;

  PinUpdateBuilder._(this._api, this._box);

  /// set the title for this pin
  void title(
    String title,
  ) {
    final tmp1 = title;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    _api._pinUpdateBuilderTitle(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    return;
  }

  void unsetTitleUpdate() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._pinUpdateBuilderUnsetTitleUpdate(
      tmp0,
    );
    return;
  }

  /// set the content for this pin
  void contentText(
    String text,
  ) {
    final tmp1 = text;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    _api._pinUpdateBuilderContentText(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    return;
  }

  void unsetContent() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._pinUpdateBuilderUnsetContent(
      tmp0,
    );
    return;
  }

  void unsetContentUpdate() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._pinUpdateBuilderUnsetContentUpdate(
      tmp0,
    );
    return;
  }

  /// set the url for this pin
  void url(
    String text,
  ) {
    final tmp1 = text;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    _api._pinUpdateBuilderUrl(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    return;
  }

  void unsetUrl() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._pinUpdateBuilderUnsetUrl(
      tmp0,
    );
    return;
  }

  void unsetUrlUpdate() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._pinUpdateBuilderUnsetUrlUpdate(
      tmp0,
    );
    return;
  }

  Future<EventId> send() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._pinUpdateBuilderSend(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__PinUpdateBuilder_send_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__pinUpdateBuilderSendFuturePoll);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class TextMessageContent {
  final Api _api;
  final _Box _box;

  TextMessageContent._(this._api, this._box);

  String body() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._textMessageContentBody(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  String? formatted() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._textMessageContentFormatted(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class CalendarEvent {
  final Api _api;
  final _Box _box;

  CalendarEvent._(this._api, this._box);

  /// the title of the event
  String title() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._calendarEventTitle(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// description text
  TextMessageContent? description() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._calendarEventDescription(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_TextMessageContent");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = TextMessageContent._(_api, tmp4_1);
    return tmp2;
  }

  /// When the event starts
  UtcDateTime utcStart() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._calendarEventUtcStart(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_UtcDateTime");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = UtcDateTime._(_api, tmp3_1);
    return tmp2;
  }

  /// When the event end
  UtcDateTime utcEnd() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._calendarEventUtcEnd(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_UtcDateTime");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = UtcDateTime._(_api, tmp3_1);
    return tmp2;
  }

  /// whether to show the time or just the dates
  bool showWithoutTime() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._calendarEventShowWithoutTime(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3 > 0;
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class MediaSource {
  final Api _api;
  final _Box _box;

  MediaSource._(this._api, this._box);

  String url() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._mediaSourceUrl(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class ThumbnailInfo {
  final Api _api;
  final _Box _box;

  ThumbnailInfo._(this._api, this._box);

  /// thumbnail mimetype
  String? mimetype() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._thumbnailInfoMimetype(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// thumbnail size
  int? size() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._thumbnailInfoSize(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final tmp2 = tmp4;
    return tmp2;
  }

  /// thumbnail width
  int? width() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._thumbnailInfoWidth(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final tmp2 = tmp4;
    return tmp2;
  }

  /// thumbnail height
  int? height() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._thumbnailInfoHeight(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final tmp2 = tmp4;
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class DeviceId {
  final Api _api;
  final _Box _box;

  DeviceId._(this._api, this._box);

  String toString() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._deviceIdToString(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class EventId {
  final Api _api;
  final _Box _box;

  EventId._(this._api, this._box);

  String toString() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._eventIdToString(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class MxcUri {
  final Api _api;
  final _Box _box;

  MxcUri._(this._api, this._box);

  String toString() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._mxcUriToString(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class RoomId {
  final Api _api;
  final _Box _box;

  RoomId._(this._api, this._box);

  String toString() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomIdToString(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class UserId {
  final Api _api;
  final _Box _box;

  UserId._(this._api, this._box);

  String toString() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._userIdToString(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

/// A room Message metadata and content
class RoomEventItem {
  final Api _api;
  final _Box _box;

  RoomEventItem._(this._api, this._box);

  /// Unique ID of this event
  String eventId() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomEventItemEventId(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// The User, who sent that event
  String sender() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomEventItemSender(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// the server receiving timestamp in milliseconds
  int originServerTs() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomEventItemOriginServerTs(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3;
    return tmp2;
  }

  /// one of Message/Redaction/UnableToDecrypt/FailedToParseMessageLike/FailedToParseState
  String eventType() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomEventItemEventType(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// the type of massage, like text, image, audio, video, file etc
  String? subType() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomEventItemSubType(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// contains text fallback and formatted text
  TextDesc? textDesc() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomEventItemTextDesc(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_TextDesc");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = TextDesc._(_api, tmp4_1);
    return tmp2;
  }

  /// contains source data, name, mimetype, size, width and height
  ImageDesc? imageDesc() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomEventItemImageDesc(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_ImageDesc");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = ImageDesc._(_api, tmp4_1);
    return tmp2;
  }

  /// contains source data, name, mimetype, duration and size
  AudioDesc? audioDesc() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomEventItemAudioDesc(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_AudioDesc");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = AudioDesc._(_api, tmp4_1);
    return tmp2;
  }

  /// contains source data, name, mimetype, duration, size, width, height and blurhash
  VideoDesc? videoDesc() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomEventItemVideoDesc(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_VideoDesc");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = VideoDesc._(_api, tmp4_1);
    return tmp2;
  }

  /// contains source data, name, mimetype and size
  FileDesc? fileDesc() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomEventItemFileDesc(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_FileDesc");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = FileDesc._(_api, tmp4_1);
    return tmp2;
  }

  /// original event id, if this msg is reply to another msg
  String? inReplyTo() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomEventItemInReplyTo(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// the emote key list that users reacted about this message
  FfiListFfiString reactionKeys() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomEventItemReactionKeys(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_FfiListFfiString");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp4 = FfiListFfiString._(_api, tmp3_1);
    final tmp2 = tmp4;
    return tmp2;
  }

  /// the details that users reacted using this emote key in this message
  ReactionDesc? reactionDesc(
    String key,
  ) {
    final tmp1 = key;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._roomEventItemReactionDesc(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5.arg0;
    final tmp8 = tmp5.arg1;
    if (tmp7 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp8_0 = ffi.Pointer.fromAddress(tmp8);
    final tmp8_1 = _Box(_api, tmp8_0, "drop_box_ReactionDesc");
    tmp8_1._finalizer = _api._registerFinalizer(tmp8_1);
    final tmp6 = ReactionDesc._(_api, tmp8_1);
    return tmp6;
  }

  /// Whether this message is editable
  bool isEditable() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomEventItemIsEditable(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3 > 0;
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class RoomVirtualItem {
  final Api _api;
  final _Box _box;

  RoomVirtualItem._(this._api, this._box);

  /// one of DayDivider/LoadingIndicator/ReadMarker/TimelineStart
  String eventType() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomVirtualItemEventType(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// contains description text
  String? desc() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomVirtualItemDesc(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

/// A room Message metadata and content
class RoomMessage {
  final Api _api;
  final _Box _box;

  RoomMessage._(this._api, this._box);

  /// one of event/virtual
  String itemType() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomMessageItemType(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// room ID of this event
  RoomId roomId() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomMessageRoomId(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_RoomId");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = RoomId._(_api, tmp3_1);
    return tmp2;
  }

  /// valid only if item_type is "event"
  RoomEventItem? eventItem() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomMessageEventItem(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_RoomEventItem");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = RoomEventItem._(_api, tmp4_1);
    return tmp2;
  }

  /// valid only if item_type is "virtual"
  RoomVirtualItem? virtualItem() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomMessageVirtualItem(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_RoomVirtualItem");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = RoomVirtualItem._(_api, tmp4_1);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class TextDesc {
  final Api _api;
  final _Box _box;

  TextDesc._(this._api, this._box);

  /// fallback text
  String body() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._textDescBody(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// formatted text
  String? formattedBody() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._textDescFormattedBody(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class ImageDesc {
  final Api _api;
  final _Box _box;

  ImageDesc._(this._api, this._box);

  /// file name
  String name() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._imageDescName(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// image source
  MediaSource source() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._imageDescSource(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_MediaSource");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = MediaSource._(_api, tmp3_1);
    return tmp2;
  }

  /// MIME
  String? mimetype() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._imageDescMimetype(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// file size in bytes
  int? size() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._imageDescSize(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final tmp2 = tmp4;
    return tmp2;
  }

  /// image width
  int? width() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._imageDescWidth(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final tmp2 = tmp4;
    return tmp2;
  }

  /// image height
  int? height() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._imageDescHeight(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final tmp2 = tmp4;
    return tmp2;
  }

  /// thumbnail info
  ThumbnailInfo? thumbnailInfo() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._imageDescThumbnailInfo(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_ThumbnailInfo");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = ThumbnailInfo._(_api, tmp4_1);
    return tmp2;
  }

  /// thumbnail source
  MediaSource? thumbnailSource() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._imageDescThumbnailSource(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_MediaSource");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = MediaSource._(_api, tmp4_1);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class AudioDesc {
  final Api _api;
  final _Box _box;

  AudioDesc._(this._api, this._box);

  /// file name
  String name() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._audioDescName(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// audio source
  MediaSource source() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._audioDescSource(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_MediaSource");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = MediaSource._(_api, tmp3_1);
    return tmp2;
  }

  /// MIME
  String? mimetype() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._audioDescMimetype(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// file size in bytes
  int? size() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._audioDescSize(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final tmp2 = tmp4;
    return tmp2;
  }

  /// duration in seconds
  int? duration() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._audioDescDuration(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final tmp2 = tmp4;
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class VideoDesc {
  final Api _api;
  final _Box _box;

  VideoDesc._(this._api, this._box);

  /// file name
  String name() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._videoDescName(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// video source
  MediaSource source() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._videoDescSource(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_MediaSource");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = MediaSource._(_api, tmp3_1);
    return tmp2;
  }

  /// MIME
  String? mimetype() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._videoDescMimetype(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// file size in bytes
  int? size() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._videoDescSize(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final tmp2 = tmp4;
    return tmp2;
  }

  /// image width
  int? width() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._videoDescWidth(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final tmp2 = tmp4;
    return tmp2;
  }

  /// image height
  int? height() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._videoDescHeight(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final tmp2 = tmp4;
    return tmp2;
  }

  /// blurhash
  String? blurhash() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._videoDescBlurhash(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// duration in seconds
  int? duration() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._videoDescDuration(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final tmp2 = tmp4;
    return tmp2;
  }

  /// thumbnail info
  ThumbnailInfo? thumbnailInfo() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._videoDescThumbnailInfo(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_ThumbnailInfo");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = ThumbnailInfo._(_api, tmp4_1);
    return tmp2;
  }

  /// thumbnail source
  MediaSource? thumbnailSource() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._videoDescThumbnailSource(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_MediaSource");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = MediaSource._(_api, tmp4_1);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class FileDesc {
  final Api _api;
  final _Box _box;

  FileDesc._(this._api, this._box);

  /// file name
  String name() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._fileDescName(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// file source
  MediaSource source() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._fileDescSource(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_MediaSource");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = MediaSource._(_api, tmp3_1);
    return tmp2;
  }

  /// MIME
  String? mimetype() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._fileDescMimetype(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// file size in bytes
  int? size() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._fileDescSize(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final tmp2 = tmp4;
    return tmp2;
  }

  /// thumbnail info
  ThumbnailInfo? thumbnailInfo() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._fileDescThumbnailInfo(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_ThumbnailInfo");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = ThumbnailInfo._(_api, tmp4_1);
    return tmp2;
  }

  /// thumbnail source
  MediaSource? thumbnailSource() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._fileDescThumbnailSource(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_MediaSource");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = MediaSource._(_api, tmp4_1);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class ReactionDesc {
  final Api _api;
  final _Box _box;

  ReactionDesc._(this._api, this._box);

  /// how many times this key was clicked
  int count() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._reactionDescCount(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3;
    return tmp2;
  }

  /// which users selected this key
  FfiListFfiString senders() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._reactionDescSenders(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_FfiListFfiString");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp4 = FfiListFfiString._(_api, tmp3_1);
    final tmp2 = tmp4;
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class TimelineDiff {
  final Api _api;
  final _Box _box;

  TimelineDiff._(this._api, this._box);

  /// Append/Insert/Set/Remove/PushBack/PushFront/PopBack/PopFront/Clear/Reset
  String action() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._timelineDiffAction(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// for Append/Reset
  FfiListRoomMessage? values() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._timelineDiffValues(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_FfiListRoomMessage");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp5 = FfiListRoomMessage._(_api, tmp4_1);
    final tmp2 = tmp5;
    return tmp2;
  }

  /// for Insert/Set/Remove
  int? index() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._timelineDiffIndex(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final tmp2 = tmp4;
    return tmp2;
  }

  /// for Insert/Set/PushBack/PushFront
  RoomMessage? value() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._timelineDiffValue(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_RoomMessage");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = RoomMessage._(_api, tmp4_1);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

/// Timeline with Room Events
class TimelineStream {
  final Api _api;
  final _Box _box;

  TimelineStream._(this._api, this._box);

  /// Fires whenever new diff found
  Stream<TimelineDiff> diffRx() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._timelineStreamDiffRx(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__TimelineStream_diff_rx_stream_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeStream(tmp3_1, _api.__timelineStreamDiffRxStreamPoll);
    return tmp2;
  }

  /// Fires whenever new event arrived
  Future<RoomMessage> next() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._timelineStreamNext(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__TimelineStream_next_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__timelineStreamNextFuturePoll);
    return tmp2;
  }

  /// Get the next count messages backwards,
  Future<bool> paginateBackwards(
    int count,
  ) {
    final tmp1 = count;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1;
    final tmp3 = _api._timelineStreamPaginateBackwards(
      tmp0,
      tmp2,
    );
    final tmp5 = tmp3;
    final ffi.Pointer<ffi.Void> tmp5_0 = ffi.Pointer.fromAddress(tmp5);
    final tmp5_1 =
        _Box(_api, tmp5_0, "__TimelineStream_paginate_backwards_future_drop");
    tmp5_1._finalizer = _api._registerFinalizer(tmp5_1);
    final tmp4 =
        _nativeFuture(tmp5_1, _api.__timelineStreamPaginateBackwardsFuturePoll);
    return tmp4;
  }

  /// modify the room message
  Future<bool> edit(
    String newMsg,
    String originalEventId,
    String? txnId,
  ) {
    final tmp1 = newMsg;
    final tmp5 = originalEventId;
    final tmp9 = txnId;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    var tmp10 = 0;
    var tmp12 = 0;
    var tmp13 = 0;
    var tmp14 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    if (tmp9 == null) {
      tmp10 = 0;
    } else {
      tmp10 = 1;
      final tmp11 = tmp9;
      final tmp11_0 = utf8.encode(tmp11);
      tmp13 = tmp11_0.length;
      final ffi.Pointer<ffi.Uint8> tmp12_0 = _api.__allocate(tmp13 * 1, 1);
      final Uint8List tmp12_1 = tmp12_0.asTypedList(tmp13);
      tmp12_1.setAll(0, tmp11_0);
      tmp12 = tmp12_0.address;
      tmp14 = tmp13;
    }
    final tmp15 = _api._timelineStreamEdit(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
      tmp10,
      tmp12,
      tmp13,
      tmp14,
    );
    final tmp17 = tmp15;
    final ffi.Pointer<ffi.Void> tmp17_0 = ffi.Pointer.fromAddress(tmp17);
    final tmp17_1 = _Box(_api, tmp17_0, "__TimelineStream_edit_future_drop");
    tmp17_1._finalizer = _api._registerFinalizer(tmp17_1);
    final tmp16 = _nativeFuture(tmp17_1, _api.__timelineStreamEditFuturePoll);
    return tmp16;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class Conversation {
  final Api _api;
  final _Box _box;

  Conversation._(this._api, this._box);

  /// get the room profile that contains avatar and display name
  RoomProfile getProfile() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._conversationGetProfile(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_RoomProfile");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = RoomProfile._(_api, tmp3_1);
    return tmp2;
  }

  /// what is the description / topic
  String? topic() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._conversationTopic(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// the members currently in the room
  Future<FfiListMember> activeMembers() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._conversationActiveMembers(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 =
        _Box(_api, tmp3_0, "__Conversation_active_members_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 =
        _nativeFuture(tmp3_1, _api.__conversationActiveMembersFuturePoll);
    return tmp2;
  }

  /// get the room member by user id
  Future<Member> getMember(
    String userId,
  ) {
    final tmp1 = userId;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._conversationGetMember(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "__Conversation_get_member_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 = _nativeFuture(tmp7_1, _api.__conversationGetMemberFuturePoll);
    return tmp6;
  }

  /// Get the timeline for the room
  Future<TimelineStream> timelineStream() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._conversationTimelineStream(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 =
        _Box(_api, tmp3_0, "__Conversation_timeline_stream_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 =
        _nativeFuture(tmp3_1, _api.__conversationTimelineStreamFuturePoll);
    return tmp2;
  }

  /// The last message sent to the room
  RoomMessage? latestMessage() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._conversationLatestMessage(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_RoomMessage");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = RoomMessage._(_api, tmp4_1);
    return tmp2;
  }

  /// the room id
  RoomId getRoomId() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._conversationGetRoomId(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_RoomId");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = RoomId._(_api, tmp3_1);
    return tmp2;
  }

  /// Activate typing notice for this room
  /// The typing notice remains active for 4s. It can be deactivate at any
  /// point by setting typing to false. If this method is called while the
  /// typing notice is active nothing will happen. This method can be called
  /// on every key stroke, since it will do nothing while typing is active.
  Future<bool> typingNotice(
    bool typing,
  ) {
    final tmp1 = typing;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1 ? 1 : 0;
    final tmp3 = _api._conversationTypingNotice(
      tmp0,
      tmp2,
    );
    final tmp5 = tmp3;
    final ffi.Pointer<ffi.Void> tmp5_0 = ffi.Pointer.fromAddress(tmp5);
    final tmp5_1 =
        _Box(_api, tmp5_0, "__Conversation_typing_notice_future_drop");
    tmp5_1._finalizer = _api._registerFinalizer(tmp5_1);
    final tmp4 =
        _nativeFuture(tmp5_1, _api.__conversationTypingNoticeFuturePoll);
    return tmp4;
  }

  /// Send a request to notify this room that the user has read specific event.
  Future<bool> readReceipt(
    String eventId,
  ) {
    final tmp1 = eventId;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._conversationReadReceipt(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 =
        _Box(_api, tmp7_0, "__Conversation_read_receipt_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 =
        _nativeFuture(tmp7_1, _api.__conversationReadReceiptFuturePoll);
    return tmp6;
  }

  /// Send a simple plain text message to the room
  /// returns the event_id as given by the server of the event soon after
  /// received over timeline().next()
  Future<EventId> sendPlainMessage(
    String textMessage,
  ) {
    final tmp1 = textMessage;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._conversationSendPlainMessage(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 =
        _Box(_api, tmp7_0, "__Conversation_send_plain_message_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 =
        _nativeFuture(tmp7_1, _api.__conversationSendPlainMessageFuturePoll);
    return tmp6;
  }

  /// Send a text message in MarkDown format to the room
  Future<EventId> sendFormattedMessage(
    String markdownMessage,
  ) {
    final tmp1 = markdownMessage;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._conversationSendFormattedMessage(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 =
        _Box(_api, tmp7_0, "__Conversation_send_formatted_message_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 = _nativeFuture(
        tmp7_1, _api.__conversationSendFormattedMessageFuturePoll);
    return tmp6;
  }

  /// Send reaction about existing event
  Future<EventId> sendReaction(
    String eventId,
    String key,
  ) {
    final tmp1 = eventId;
    final tmp5 = key;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    final tmp9 = _api._conversationSendReaction(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
    );
    final tmp11 = tmp9;
    final ffi.Pointer<ffi.Void> tmp11_0 = ffi.Pointer.fromAddress(tmp11);
    final tmp11_1 =
        _Box(_api, tmp11_0, "__Conversation_send_reaction_future_drop");
    tmp11_1._finalizer = _api._registerFinalizer(tmp11_1);
    final tmp10 =
        _nativeFuture(tmp11_1, _api.__conversationSendReactionFuturePoll);
    return tmp10;
  }

  /// send the image message to this room
  Future<EventId> sendImageMessage(
    String uri,
    String name,
    String mimetype,
    int? size,
    int? width,
    int? height,
    String? blurhash,
  ) {
    final tmp1 = uri;
    final tmp5 = name;
    final tmp9 = mimetype;
    final tmp13 = size;
    final tmp17 = width;
    final tmp21 = height;
    final tmp25 = blurhash;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    var tmp10 = 0;
    var tmp11 = 0;
    var tmp12 = 0;
    var tmp14 = 0;
    var tmp16 = 0;
    var tmp18 = 0;
    var tmp20 = 0;
    var tmp22 = 0;
    var tmp24 = 0;
    var tmp26 = 0;
    var tmp28 = 0;
    var tmp29 = 0;
    var tmp30 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    final tmp9_0 = utf8.encode(tmp9);
    tmp11 = tmp9_0.length;
    final ffi.Pointer<ffi.Uint8> tmp10_0 = _api.__allocate(tmp11 * 1, 1);
    final Uint8List tmp10_1 = tmp10_0.asTypedList(tmp11);
    tmp10_1.setAll(0, tmp9_0);
    tmp10 = tmp10_0.address;
    tmp12 = tmp11;
    if (tmp13 == null) {
      tmp14 = 0;
    } else {
      tmp14 = 1;
      final tmp15 = tmp13;
      tmp16 = tmp15;
    }
    if (tmp17 == null) {
      tmp18 = 0;
    } else {
      tmp18 = 1;
      final tmp19 = tmp17;
      tmp20 = tmp19;
    }
    if (tmp21 == null) {
      tmp22 = 0;
    } else {
      tmp22 = 1;
      final tmp23 = tmp21;
      tmp24 = tmp23;
    }
    if (tmp25 == null) {
      tmp26 = 0;
    } else {
      tmp26 = 1;
      final tmp27 = tmp25;
      final tmp27_0 = utf8.encode(tmp27);
      tmp29 = tmp27_0.length;
      final ffi.Pointer<ffi.Uint8> tmp28_0 = _api.__allocate(tmp29 * 1, 1);
      final Uint8List tmp28_1 = tmp28_0.asTypedList(tmp29);
      tmp28_1.setAll(0, tmp27_0);
      tmp28 = tmp28_0.address;
      tmp30 = tmp29;
    }
    final tmp31 = _api._conversationSendImageMessage(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
      tmp10,
      tmp11,
      tmp12,
      tmp14,
      tmp16,
      tmp18,
      tmp20,
      tmp22,
      tmp24,
      tmp26,
      tmp28,
      tmp29,
      tmp30,
    );
    final tmp33 = tmp31;
    final ffi.Pointer<ffi.Void> tmp33_0 = ffi.Pointer.fromAddress(tmp33);
    final tmp33_1 =
        _Box(_api, tmp33_0, "__Conversation_send_image_message_future_drop");
    tmp33_1._finalizer = _api._registerFinalizer(tmp33_1);
    final tmp32 =
        _nativeFuture(tmp33_1, _api.__conversationSendImageMessageFuturePoll);
    return tmp32;
  }

  /// decrypted image file data
  /// The reason that this function belongs to room object is because ChatScreen keeps it as member variable
  /// If this function belongs to message object, we may have to load too many message objects in ChatScreen
  Future<FfiBufferUint8> imageBinary(
    String eventId,
  ) {
    final tmp1 = eventId;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._conversationImageBinary(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 =
        _Box(_api, tmp7_0, "__Conversation_image_binary_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 =
        _nativeFuture(tmp7_1, _api.__conversationImageBinaryFuturePoll);
    return tmp6;
  }

  /// send the audio message to this room
  Future<EventId> sendAudioMessage(
    String uri,
    String name,
    String mimetype,
    int? secs,
    int? size,
  ) {
    final tmp1 = uri;
    final tmp5 = name;
    final tmp9 = mimetype;
    final tmp13 = secs;
    final tmp17 = size;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    var tmp10 = 0;
    var tmp11 = 0;
    var tmp12 = 0;
    var tmp14 = 0;
    var tmp16 = 0;
    var tmp18 = 0;
    var tmp20 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    final tmp9_0 = utf8.encode(tmp9);
    tmp11 = tmp9_0.length;
    final ffi.Pointer<ffi.Uint8> tmp10_0 = _api.__allocate(tmp11 * 1, 1);
    final Uint8List tmp10_1 = tmp10_0.asTypedList(tmp11);
    tmp10_1.setAll(0, tmp9_0);
    tmp10 = tmp10_0.address;
    tmp12 = tmp11;
    if (tmp13 == null) {
      tmp14 = 0;
    } else {
      tmp14 = 1;
      final tmp15 = tmp13;
      tmp16 = tmp15;
    }
    if (tmp17 == null) {
      tmp18 = 0;
    } else {
      tmp18 = 1;
      final tmp19 = tmp17;
      tmp20 = tmp19;
    }
    final tmp21 = _api._conversationSendAudioMessage(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
      tmp10,
      tmp11,
      tmp12,
      tmp14,
      tmp16,
      tmp18,
      tmp20,
    );
    final tmp23 = tmp21;
    final ffi.Pointer<ffi.Void> tmp23_0 = ffi.Pointer.fromAddress(tmp23);
    final tmp23_1 =
        _Box(_api, tmp23_0, "__Conversation_send_audio_message_future_drop");
    tmp23_1._finalizer = _api._registerFinalizer(tmp23_1);
    final tmp22 =
        _nativeFuture(tmp23_1, _api.__conversationSendAudioMessageFuturePoll);
    return tmp22;
  }

  /// decrypted audio buffer data
  /// The reason that this function belongs to room object is because ChatScreen keeps it as member variable
  /// If this function belongs to message object, we may have to load too many message objects in ChatScreen
  Future<FfiBufferUint8> audioBinary(
    String eventId,
  ) {
    final tmp1 = eventId;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._conversationAudioBinary(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 =
        _Box(_api, tmp7_0, "__Conversation_audio_binary_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 =
        _nativeFuture(tmp7_1, _api.__conversationAudioBinaryFuturePoll);
    return tmp6;
  }

  /// send the video message to this room
  Future<EventId> sendVideoMessage(
    String uri,
    String name,
    String mimetype,
    int? secs,
    int? height,
    int? width,
    int? size,
    String? blurhash,
  ) {
    final tmp1 = uri;
    final tmp5 = name;
    final tmp9 = mimetype;
    final tmp13 = secs;
    final tmp17 = height;
    final tmp21 = width;
    final tmp25 = size;
    final tmp29 = blurhash;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    var tmp10 = 0;
    var tmp11 = 0;
    var tmp12 = 0;
    var tmp14 = 0;
    var tmp16 = 0;
    var tmp18 = 0;
    var tmp20 = 0;
    var tmp22 = 0;
    var tmp24 = 0;
    var tmp26 = 0;
    var tmp28 = 0;
    var tmp30 = 0;
    var tmp32 = 0;
    var tmp33 = 0;
    var tmp34 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    final tmp9_0 = utf8.encode(tmp9);
    tmp11 = tmp9_0.length;
    final ffi.Pointer<ffi.Uint8> tmp10_0 = _api.__allocate(tmp11 * 1, 1);
    final Uint8List tmp10_1 = tmp10_0.asTypedList(tmp11);
    tmp10_1.setAll(0, tmp9_0);
    tmp10 = tmp10_0.address;
    tmp12 = tmp11;
    if (tmp13 == null) {
      tmp14 = 0;
    } else {
      tmp14 = 1;
      final tmp15 = tmp13;
      tmp16 = tmp15;
    }
    if (tmp17 == null) {
      tmp18 = 0;
    } else {
      tmp18 = 1;
      final tmp19 = tmp17;
      tmp20 = tmp19;
    }
    if (tmp21 == null) {
      tmp22 = 0;
    } else {
      tmp22 = 1;
      final tmp23 = tmp21;
      tmp24 = tmp23;
    }
    if (tmp25 == null) {
      tmp26 = 0;
    } else {
      tmp26 = 1;
      final tmp27 = tmp25;
      tmp28 = tmp27;
    }
    if (tmp29 == null) {
      tmp30 = 0;
    } else {
      tmp30 = 1;
      final tmp31 = tmp29;
      final tmp31_0 = utf8.encode(tmp31);
      tmp33 = tmp31_0.length;
      final ffi.Pointer<ffi.Uint8> tmp32_0 = _api.__allocate(tmp33 * 1, 1);
      final Uint8List tmp32_1 = tmp32_0.asTypedList(tmp33);
      tmp32_1.setAll(0, tmp31_0);
      tmp32 = tmp32_0.address;
      tmp34 = tmp33;
    }
    final tmp35 = _api._conversationSendVideoMessage(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
      tmp10,
      tmp11,
      tmp12,
      tmp14,
      tmp16,
      tmp18,
      tmp20,
      tmp22,
      tmp24,
      tmp26,
      tmp28,
      tmp30,
      tmp32,
      tmp33,
      tmp34,
    );
    final tmp37 = tmp35;
    final ffi.Pointer<ffi.Void> tmp37_0 = ffi.Pointer.fromAddress(tmp37);
    final tmp37_1 =
        _Box(_api, tmp37_0, "__Conversation_send_video_message_future_drop");
    tmp37_1._finalizer = _api._registerFinalizer(tmp37_1);
    final tmp36 =
        _nativeFuture(tmp37_1, _api.__conversationSendVideoMessageFuturePoll);
    return tmp36;
  }

  /// decrypted video buffer data
  /// The reason that this function belongs to room object is because ChatScreen keeps it as member variable
  /// If this function belongs to message object, we may have to load too many message objects in ChatScreen
  Future<FfiBufferUint8> videoBinary(
    String eventId,
  ) {
    final tmp1 = eventId;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._conversationVideoBinary(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 =
        _Box(_api, tmp7_0, "__Conversation_video_binary_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 =
        _nativeFuture(tmp7_1, _api.__conversationVideoBinaryFuturePoll);
    return tmp6;
  }

  /// send the file message to this room
  Future<EventId> sendFileMessage(
    String uri,
    String name,
    String mimetype,
    int size,
  ) {
    final tmp1 = uri;
    final tmp5 = name;
    final tmp9 = mimetype;
    final tmp13 = size;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    var tmp10 = 0;
    var tmp11 = 0;
    var tmp12 = 0;
    var tmp14 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    final tmp9_0 = utf8.encode(tmp9);
    tmp11 = tmp9_0.length;
    final ffi.Pointer<ffi.Uint8> tmp10_0 = _api.__allocate(tmp11 * 1, 1);
    final Uint8List tmp10_1 = tmp10_0.asTypedList(tmp11);
    tmp10_1.setAll(0, tmp9_0);
    tmp10 = tmp10_0.address;
    tmp12 = tmp11;
    tmp14 = tmp13;
    final tmp15 = _api._conversationSendFileMessage(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
      tmp10,
      tmp11,
      tmp12,
      tmp14,
    );
    final tmp17 = tmp15;
    final ffi.Pointer<ffi.Void> tmp17_0 = ffi.Pointer.fromAddress(tmp17);
    final tmp17_1 =
        _Box(_api, tmp17_0, "__Conversation_send_file_message_future_drop");
    tmp17_1._finalizer = _api._registerFinalizer(tmp17_1);
    final tmp16 =
        _nativeFuture(tmp17_1, _api.__conversationSendFileMessageFuturePoll);
    return tmp16;
  }

  /// decrypted file buffer data
  /// The reason that this function belongs to room object is because ChatScreen keeps it as member variable
  /// If this function belongs to message object, we may have to load too many message objects in ChatScreen
  Future<FfiBufferUint8> fileBinary(
    String eventId,
  ) {
    final tmp1 = eventId;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._conversationFileBinary(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "__Conversation_file_binary_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 = _nativeFuture(tmp7_1, _api.__conversationFileBinaryFuturePoll);
    return tmp6;
  }

  /// get the user status on this room
  String roomType() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._conversationRoomType(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// invite the new user to this room
  Future<bool> inviteUser(
    String userId,
  ) {
    final tmp1 = userId;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._conversationInviteUser(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "__Conversation_invite_user_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 = _nativeFuture(tmp7_1, _api.__conversationInviteUserFuturePoll);
    return tmp6;
  }

  /// join this room
  Future<bool> join() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._conversationJoin(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Conversation_join_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__conversationJoinFuturePoll);
    return tmp2;
  }

  /// leave this room
  Future<bool> leave() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._conversationLeave(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Conversation_leave_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__conversationLeaveFuturePoll);
    return tmp2;
  }

  /// get the users that were invited to this room
  Future<FfiListAccount> getInvitees() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._conversationGetInvitees(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 =
        _Box(_api, tmp3_0, "__Conversation_get_invitees_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 =
        _nativeFuture(tmp3_1, _api.__conversationGetInviteesFuturePoll);
    return tmp2;
  }

  /// download media (image/audio/video/file) to specified path
  Future<String> downloadMedia(
    String eventId,
    String dirPath,
  ) {
    final tmp1 = eventId;
    final tmp5 = dirPath;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    final tmp9 = _api._conversationDownloadMedia(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
    );
    final tmp11 = tmp9;
    final ffi.Pointer<ffi.Void> tmp11_0 = ffi.Pointer.fromAddress(tmp11);
    final tmp11_1 =
        _Box(_api, tmp11_0, "__Conversation_download_media_future_drop");
    tmp11_1._finalizer = _api._registerFinalizer(tmp11_1);
    final tmp10 =
        _nativeFuture(tmp11_1, _api.__conversationDownloadMediaFuturePoll);
    return tmp10;
  }

  /// get the path that media (image/audio/video/file) was saved
  Future<String> mediaPath(
    String eventId,
  ) {
    final tmp1 = eventId;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._conversationMediaPath(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "__Conversation_media_path_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 = _nativeFuture(tmp7_1, _api.__conversationMediaPathFuturePoll);
    return tmp6;
  }

  /// initially called to get receipt status of room members
  Future<FfiListReceiptRecord> userReceipts() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._conversationUserReceipts(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 =
        _Box(_api, tmp3_0, "__Conversation_user_receipts_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 =
        _nativeFuture(tmp3_1, _api.__conversationUserReceiptsFuturePoll);
    return tmp2;
  }

  /// whether this room is encrypted one
  Future<bool> isEncrypted() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._conversationIsEncrypted(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 =
        _Box(_api, tmp3_0, "__Conversation_is_encrypted_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 =
        _nativeFuture(tmp3_1, _api.__conversationIsEncryptedFuturePoll);
    return tmp2;
  }

  /// get original of reply msg
  Future<RoomMessage> getMessage(
    String eventId,
  ) {
    final tmp1 = eventId;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._conversationGetMessage(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "__Conversation_get_message_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 = _nativeFuture(tmp7_1, _api.__conversationGetMessageFuturePoll);
    return tmp6;
  }

  /// send reply as text
  Future<EventId> sendTextReply(
    String msg,
    String eventId,
    String? txnId,
  ) {
    final tmp1 = msg;
    final tmp5 = eventId;
    final tmp9 = txnId;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    var tmp10 = 0;
    var tmp12 = 0;
    var tmp13 = 0;
    var tmp14 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    if (tmp9 == null) {
      tmp10 = 0;
    } else {
      tmp10 = 1;
      final tmp11 = tmp9;
      final tmp11_0 = utf8.encode(tmp11);
      tmp13 = tmp11_0.length;
      final ffi.Pointer<ffi.Uint8> tmp12_0 = _api.__allocate(tmp13 * 1, 1);
      final Uint8List tmp12_1 = tmp12_0.asTypedList(tmp13);
      tmp12_1.setAll(0, tmp11_0);
      tmp12 = tmp12_0.address;
      tmp14 = tmp13;
    }
    final tmp15 = _api._conversationSendTextReply(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
      tmp10,
      tmp12,
      tmp13,
      tmp14,
    );
    final tmp17 = tmp15;
    final ffi.Pointer<ffi.Void> tmp17_0 = ffi.Pointer.fromAddress(tmp17);
    final tmp17_1 =
        _Box(_api, tmp17_0, "__Conversation_send_text_reply_future_drop");
    tmp17_1._finalizer = _api._registerFinalizer(tmp17_1);
    final tmp16 =
        _nativeFuture(tmp17_1, _api.__conversationSendTextReplyFuturePoll);
    return tmp16;
  }

  /// send reply as image
  Future<EventId> sendImageReply(
    String uri,
    String name,
    String mimetype,
    int? size,
    int? width,
    int? height,
    String eventId,
    String? txnId,
  ) {
    final tmp1 = uri;
    final tmp5 = name;
    final tmp9 = mimetype;
    final tmp13 = size;
    final tmp17 = width;
    final tmp21 = height;
    final tmp25 = eventId;
    final tmp29 = txnId;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    var tmp10 = 0;
    var tmp11 = 0;
    var tmp12 = 0;
    var tmp14 = 0;
    var tmp16 = 0;
    var tmp18 = 0;
    var tmp20 = 0;
    var tmp22 = 0;
    var tmp24 = 0;
    var tmp26 = 0;
    var tmp27 = 0;
    var tmp28 = 0;
    var tmp30 = 0;
    var tmp32 = 0;
    var tmp33 = 0;
    var tmp34 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    final tmp9_0 = utf8.encode(tmp9);
    tmp11 = tmp9_0.length;
    final ffi.Pointer<ffi.Uint8> tmp10_0 = _api.__allocate(tmp11 * 1, 1);
    final Uint8List tmp10_1 = tmp10_0.asTypedList(tmp11);
    tmp10_1.setAll(0, tmp9_0);
    tmp10 = tmp10_0.address;
    tmp12 = tmp11;
    if (tmp13 == null) {
      tmp14 = 0;
    } else {
      tmp14 = 1;
      final tmp15 = tmp13;
      tmp16 = tmp15;
    }
    if (tmp17 == null) {
      tmp18 = 0;
    } else {
      tmp18 = 1;
      final tmp19 = tmp17;
      tmp20 = tmp19;
    }
    if (tmp21 == null) {
      tmp22 = 0;
    } else {
      tmp22 = 1;
      final tmp23 = tmp21;
      tmp24 = tmp23;
    }
    final tmp25_0 = utf8.encode(tmp25);
    tmp27 = tmp25_0.length;
    final ffi.Pointer<ffi.Uint8> tmp26_0 = _api.__allocate(tmp27 * 1, 1);
    final Uint8List tmp26_1 = tmp26_0.asTypedList(tmp27);
    tmp26_1.setAll(0, tmp25_0);
    tmp26 = tmp26_0.address;
    tmp28 = tmp27;
    if (tmp29 == null) {
      tmp30 = 0;
    } else {
      tmp30 = 1;
      final tmp31 = tmp29;
      final tmp31_0 = utf8.encode(tmp31);
      tmp33 = tmp31_0.length;
      final ffi.Pointer<ffi.Uint8> tmp32_0 = _api.__allocate(tmp33 * 1, 1);
      final Uint8List tmp32_1 = tmp32_0.asTypedList(tmp33);
      tmp32_1.setAll(0, tmp31_0);
      tmp32 = tmp32_0.address;
      tmp34 = tmp33;
    }
    final tmp35 = _api._conversationSendImageReply(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
      tmp10,
      tmp11,
      tmp12,
      tmp14,
      tmp16,
      tmp18,
      tmp20,
      tmp22,
      tmp24,
      tmp26,
      tmp27,
      tmp28,
      tmp30,
      tmp32,
      tmp33,
      tmp34,
    );
    final tmp37 = tmp35;
    final ffi.Pointer<ffi.Void> tmp37_0 = ffi.Pointer.fromAddress(tmp37);
    final tmp37_1 =
        _Box(_api, tmp37_0, "__Conversation_send_image_reply_future_drop");
    tmp37_1._finalizer = _api._registerFinalizer(tmp37_1);
    final tmp36 =
        _nativeFuture(tmp37_1, _api.__conversationSendImageReplyFuturePoll);
    return tmp36;
  }

  /// send reply as audio
  Future<EventId> sendAudioReply(
    String uri,
    String name,
    String mimetype,
    int? secs,
    int? size,
    String eventId,
    String? txnId,
  ) {
    final tmp1 = uri;
    final tmp5 = name;
    final tmp9 = mimetype;
    final tmp13 = secs;
    final tmp17 = size;
    final tmp21 = eventId;
    final tmp25 = txnId;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    var tmp10 = 0;
    var tmp11 = 0;
    var tmp12 = 0;
    var tmp14 = 0;
    var tmp16 = 0;
    var tmp18 = 0;
    var tmp20 = 0;
    var tmp22 = 0;
    var tmp23 = 0;
    var tmp24 = 0;
    var tmp26 = 0;
    var tmp28 = 0;
    var tmp29 = 0;
    var tmp30 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    final tmp9_0 = utf8.encode(tmp9);
    tmp11 = tmp9_0.length;
    final ffi.Pointer<ffi.Uint8> tmp10_0 = _api.__allocate(tmp11 * 1, 1);
    final Uint8List tmp10_1 = tmp10_0.asTypedList(tmp11);
    tmp10_1.setAll(0, tmp9_0);
    tmp10 = tmp10_0.address;
    tmp12 = tmp11;
    if (tmp13 == null) {
      tmp14 = 0;
    } else {
      tmp14 = 1;
      final tmp15 = tmp13;
      tmp16 = tmp15;
    }
    if (tmp17 == null) {
      tmp18 = 0;
    } else {
      tmp18 = 1;
      final tmp19 = tmp17;
      tmp20 = tmp19;
    }
    final tmp21_0 = utf8.encode(tmp21);
    tmp23 = tmp21_0.length;
    final ffi.Pointer<ffi.Uint8> tmp22_0 = _api.__allocate(tmp23 * 1, 1);
    final Uint8List tmp22_1 = tmp22_0.asTypedList(tmp23);
    tmp22_1.setAll(0, tmp21_0);
    tmp22 = tmp22_0.address;
    tmp24 = tmp23;
    if (tmp25 == null) {
      tmp26 = 0;
    } else {
      tmp26 = 1;
      final tmp27 = tmp25;
      final tmp27_0 = utf8.encode(tmp27);
      tmp29 = tmp27_0.length;
      final ffi.Pointer<ffi.Uint8> tmp28_0 = _api.__allocate(tmp29 * 1, 1);
      final Uint8List tmp28_1 = tmp28_0.asTypedList(tmp29);
      tmp28_1.setAll(0, tmp27_0);
      tmp28 = tmp28_0.address;
      tmp30 = tmp29;
    }
    final tmp31 = _api._conversationSendAudioReply(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
      tmp10,
      tmp11,
      tmp12,
      tmp14,
      tmp16,
      tmp18,
      tmp20,
      tmp22,
      tmp23,
      tmp24,
      tmp26,
      tmp28,
      tmp29,
      tmp30,
    );
    final tmp33 = tmp31;
    final ffi.Pointer<ffi.Void> tmp33_0 = ffi.Pointer.fromAddress(tmp33);
    final tmp33_1 =
        _Box(_api, tmp33_0, "__Conversation_send_audio_reply_future_drop");
    tmp33_1._finalizer = _api._registerFinalizer(tmp33_1);
    final tmp32 =
        _nativeFuture(tmp33_1, _api.__conversationSendAudioReplyFuturePoll);
    return tmp32;
  }

  /// send reply as video
  Future<EventId> sendVideoReply(
    String uri,
    String name,
    String mimetype,
    int? secs,
    int? width,
    int? height,
    int? size,
    String? blurhash,
    String eventId,
    String? txnId,
  ) {
    final tmp1 = uri;
    final tmp5 = name;
    final tmp9 = mimetype;
    final tmp13 = secs;
    final tmp17 = width;
    final tmp21 = height;
    final tmp25 = size;
    final tmp29 = blurhash;
    final tmp35 = eventId;
    final tmp39 = txnId;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    var tmp10 = 0;
    var tmp11 = 0;
    var tmp12 = 0;
    var tmp14 = 0;
    var tmp16 = 0;
    var tmp18 = 0;
    var tmp20 = 0;
    var tmp22 = 0;
    var tmp24 = 0;
    var tmp26 = 0;
    var tmp28 = 0;
    var tmp30 = 0;
    var tmp32 = 0;
    var tmp33 = 0;
    var tmp34 = 0;
    var tmp36 = 0;
    var tmp37 = 0;
    var tmp38 = 0;
    var tmp40 = 0;
    var tmp42 = 0;
    var tmp43 = 0;
    var tmp44 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    final tmp9_0 = utf8.encode(tmp9);
    tmp11 = tmp9_0.length;
    final ffi.Pointer<ffi.Uint8> tmp10_0 = _api.__allocate(tmp11 * 1, 1);
    final Uint8List tmp10_1 = tmp10_0.asTypedList(tmp11);
    tmp10_1.setAll(0, tmp9_0);
    tmp10 = tmp10_0.address;
    tmp12 = tmp11;
    if (tmp13 == null) {
      tmp14 = 0;
    } else {
      tmp14 = 1;
      final tmp15 = tmp13;
      tmp16 = tmp15;
    }
    if (tmp17 == null) {
      tmp18 = 0;
    } else {
      tmp18 = 1;
      final tmp19 = tmp17;
      tmp20 = tmp19;
    }
    if (tmp21 == null) {
      tmp22 = 0;
    } else {
      tmp22 = 1;
      final tmp23 = tmp21;
      tmp24 = tmp23;
    }
    if (tmp25 == null) {
      tmp26 = 0;
    } else {
      tmp26 = 1;
      final tmp27 = tmp25;
      tmp28 = tmp27;
    }
    if (tmp29 == null) {
      tmp30 = 0;
    } else {
      tmp30 = 1;
      final tmp31 = tmp29;
      final tmp31_0 = utf8.encode(tmp31);
      tmp33 = tmp31_0.length;
      final ffi.Pointer<ffi.Uint8> tmp32_0 = _api.__allocate(tmp33 * 1, 1);
      final Uint8List tmp32_1 = tmp32_0.asTypedList(tmp33);
      tmp32_1.setAll(0, tmp31_0);
      tmp32 = tmp32_0.address;
      tmp34 = tmp33;
    }
    final tmp35_0 = utf8.encode(tmp35);
    tmp37 = tmp35_0.length;
    final ffi.Pointer<ffi.Uint8> tmp36_0 = _api.__allocate(tmp37 * 1, 1);
    final Uint8List tmp36_1 = tmp36_0.asTypedList(tmp37);
    tmp36_1.setAll(0, tmp35_0);
    tmp36 = tmp36_0.address;
    tmp38 = tmp37;
    if (tmp39 == null) {
      tmp40 = 0;
    } else {
      tmp40 = 1;
      final tmp41 = tmp39;
      final tmp41_0 = utf8.encode(tmp41);
      tmp43 = tmp41_0.length;
      final ffi.Pointer<ffi.Uint8> tmp42_0 = _api.__allocate(tmp43 * 1, 1);
      final Uint8List tmp42_1 = tmp42_0.asTypedList(tmp43);
      tmp42_1.setAll(0, tmp41_0);
      tmp42 = tmp42_0.address;
      tmp44 = tmp43;
    }
    final tmp45 = _api._conversationSendVideoReply(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
      tmp10,
      tmp11,
      tmp12,
      tmp14,
      tmp16,
      tmp18,
      tmp20,
      tmp22,
      tmp24,
      tmp26,
      tmp28,
      tmp30,
      tmp32,
      tmp33,
      tmp34,
      tmp36,
      tmp37,
      tmp38,
      tmp40,
      tmp42,
      tmp43,
      tmp44,
    );
    final tmp47 = tmp45;
    final ffi.Pointer<ffi.Void> tmp47_0 = ffi.Pointer.fromAddress(tmp47);
    final tmp47_1 =
        _Box(_api, tmp47_0, "__Conversation_send_video_reply_future_drop");
    tmp47_1._finalizer = _api._registerFinalizer(tmp47_1);
    final tmp46 =
        _nativeFuture(tmp47_1, _api.__conversationSendVideoReplyFuturePoll);
    return tmp46;
  }

  /// send reply as file
  Future<EventId> sendFileReply(
    String uri,
    String name,
    String mimetype,
    int? size,
    String eventId,
    String? txnId,
  ) {
    final tmp1 = uri;
    final tmp5 = name;
    final tmp9 = mimetype;
    final tmp13 = size;
    final tmp17 = eventId;
    final tmp21 = txnId;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    var tmp10 = 0;
    var tmp11 = 0;
    var tmp12 = 0;
    var tmp14 = 0;
    var tmp16 = 0;
    var tmp18 = 0;
    var tmp19 = 0;
    var tmp20 = 0;
    var tmp22 = 0;
    var tmp24 = 0;
    var tmp25 = 0;
    var tmp26 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    final tmp9_0 = utf8.encode(tmp9);
    tmp11 = tmp9_0.length;
    final ffi.Pointer<ffi.Uint8> tmp10_0 = _api.__allocate(tmp11 * 1, 1);
    final Uint8List tmp10_1 = tmp10_0.asTypedList(tmp11);
    tmp10_1.setAll(0, tmp9_0);
    tmp10 = tmp10_0.address;
    tmp12 = tmp11;
    if (tmp13 == null) {
      tmp14 = 0;
    } else {
      tmp14 = 1;
      final tmp15 = tmp13;
      tmp16 = tmp15;
    }
    final tmp17_0 = utf8.encode(tmp17);
    tmp19 = tmp17_0.length;
    final ffi.Pointer<ffi.Uint8> tmp18_0 = _api.__allocate(tmp19 * 1, 1);
    final Uint8List tmp18_1 = tmp18_0.asTypedList(tmp19);
    tmp18_1.setAll(0, tmp17_0);
    tmp18 = tmp18_0.address;
    tmp20 = tmp19;
    if (tmp21 == null) {
      tmp22 = 0;
    } else {
      tmp22 = 1;
      final tmp23 = tmp21;
      final tmp23_0 = utf8.encode(tmp23);
      tmp25 = tmp23_0.length;
      final ffi.Pointer<ffi.Uint8> tmp24_0 = _api.__allocate(tmp25 * 1, 1);
      final Uint8List tmp24_1 = tmp24_0.asTypedList(tmp25);
      tmp24_1.setAll(0, tmp23_0);
      tmp24 = tmp24_0.address;
      tmp26 = tmp25;
    }
    final tmp27 = _api._conversationSendFileReply(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
      tmp10,
      tmp11,
      tmp12,
      tmp14,
      tmp16,
      tmp18,
      tmp19,
      tmp20,
      tmp22,
      tmp24,
      tmp25,
      tmp26,
    );
    final tmp29 = tmp27;
    final ffi.Pointer<ffi.Void> tmp29_0 = ffi.Pointer.fromAddress(tmp29);
    final tmp29_1 =
        _Box(_api, tmp29_0, "__Conversation_send_file_reply_future_drop");
    tmp29_1._finalizer = _api._registerFinalizer(tmp29_1);
    final tmp28 =
        _nativeFuture(tmp29_1, _api.__conversationSendFileReplyFuturePoll);
    return tmp28;
  }

  /// redact any message (including text/image/file and reaction)
  Future<EventId> redactMessage(
    String eventId,
    String? reason,
    String? txnId,
  ) {
    final tmp1 = eventId;
    final tmp5 = reason;
    final tmp11 = txnId;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp8 = 0;
    var tmp9 = 0;
    var tmp10 = 0;
    var tmp12 = 0;
    var tmp14 = 0;
    var tmp15 = 0;
    var tmp16 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    if (tmp5 == null) {
      tmp6 = 0;
    } else {
      tmp6 = 1;
      final tmp7 = tmp5;
      final tmp7_0 = utf8.encode(tmp7);
      tmp9 = tmp7_0.length;
      final ffi.Pointer<ffi.Uint8> tmp8_0 = _api.__allocate(tmp9 * 1, 1);
      final Uint8List tmp8_1 = tmp8_0.asTypedList(tmp9);
      tmp8_1.setAll(0, tmp7_0);
      tmp8 = tmp8_0.address;
      tmp10 = tmp9;
    }
    if (tmp11 == null) {
      tmp12 = 0;
    } else {
      tmp12 = 1;
      final tmp13 = tmp11;
      final tmp13_0 = utf8.encode(tmp13);
      tmp15 = tmp13_0.length;
      final ffi.Pointer<ffi.Uint8> tmp14_0 = _api.__allocate(tmp15 * 1, 1);
      final Uint8List tmp14_1 = tmp14_0.asTypedList(tmp15);
      tmp14_1.setAll(0, tmp13_0);
      tmp14 = tmp14_0.address;
      tmp16 = tmp15;
    }
    final tmp17 = _api._conversationRedactMessage(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp8,
      tmp9,
      tmp10,
      tmp12,
      tmp14,
      tmp15,
      tmp16,
    );
    final tmp19 = tmp17;
    final ffi.Pointer<ffi.Void> tmp19_0 = ffi.Pointer.fromAddress(tmp19);
    final tmp19_1 =
        _Box(_api, tmp19_0, "__Conversation_redact_message_future_drop");
    tmp19_1._finalizer = _api._registerFinalizer(tmp19_1);
    final tmp18 =
        _nativeFuture(tmp19_1, _api.__conversationRedactMessageFuturePoll);
    return tmp18;
  }

  /// update the power levels of specified member
  Future<EventId> updatePowerLevel(
    String userId,
    int level,
  ) {
    final tmp1 = userId;
    final tmp5 = level;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    tmp6 = tmp5;
    final tmp7 = _api._conversationUpdatePowerLevel(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
    );
    final tmp9 = tmp7;
    final ffi.Pointer<ffi.Void> tmp9_0 = ffi.Pointer.fromAddress(tmp9);
    final tmp9_1 =
        _Box(_api, tmp9_0, "__Conversation_update_power_level_future_drop");
    tmp9_1._finalizer = _api._registerFinalizer(tmp9_1);
    final tmp8 =
        _nativeFuture(tmp9_1, _api.__conversationUpdatePowerLevelFuturePoll);
    return tmp8;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class CommentDraft {
  final Api _api;
  final _Box _box;

  CommentDraft._(this._api, this._box);

  /// set the content of the draft to body
  void contentText(
    String body,
  ) {
    final tmp1 = body;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    _api._commentDraftContentText(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    return;
  }

  /// set the content to a formatted body of html_body, where body is the tag-stripped version
  void contentFormatted(
    String body,
    String htmlBody,
  ) {
    final tmp1 = body;
    final tmp5 = htmlBody;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    _api._commentDraftContentFormatted(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
    );
    return;
  }

  Future<EventId> send() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._commentDraftSend(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__CommentDraft_send_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__commentDraftSendFuturePoll);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class Comment {
  final Api _api;
  final _Box _box;

  Comment._(this._api, this._box);

  /// Who send this comment
  UserId sender() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._commentSender(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_UserId");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = UserId._(_api, tmp3_1);
    return tmp2;
  }

  /// When was this comment acknowledged by the server
  int originServerTs() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._commentOriginServerTs(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3;
    return tmp2;
  }

  /// what is the comment's content in raw text
  String contentText() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._commentContentText(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// what is the comment's content in html text
  String? contentFormatted() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._commentContentFormatted(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// create a draft builder to reply to this comment
  CommentDraft replyBuilder() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._commentReplyBuilder(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_CommentDraft");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = CommentDraft._(_api, tmp3_1);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

/// Reference to the comments section of a particular item
class CommentsManager {
  final Api _api;
  final _Box _box;

  CommentsManager._(this._api, this._box);

  /// Get the list of comments (in arrival order)
  Future<FfiListComment> comments() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._commentsManagerComments(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__CommentsManager_comments_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 =
        _nativeFuture(tmp3_1, _api.__commentsManagerCommentsFuturePoll);
    return tmp2;
  }

  /// Does this item have any comments?
  bool hasComments() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._commentsManagerHasComments(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3 > 0;
    return tmp2;
  }

  /// How many comments does this item have
  int commentsCount() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._commentsManagerCommentsCount(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3;
    return tmp2;
  }

  /// draft a new comment for this item
  CommentDraft commentDraft() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._commentsManagerCommentDraft(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_CommentDraft");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = CommentDraft._(_api, tmp3_1);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class Task {
  final Api _api;
  final _Box _box;

  Task._(this._api, this._box);

  /// the name of this task
  String title() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskTitle(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// the name of this task
  String? descriptionText() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskDescriptionText(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// the users assigned
  FfiListUserId assignees() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskAssignees(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_FfiListUserId");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp4 = FfiListUserId._(_api, tmp3_1);
    final tmp2 = tmp4;
    return tmp2;
  }

  /// other users to inform about updates
  FfiListUserId subscribers() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskSubscribers(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_FfiListUserId");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp4 = FfiListUserId._(_api, tmp3_1);
    final tmp2 = tmp4;
    return tmp2;
  }

  /// order in the list
  int sortOrder() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskSortOrder(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3;
    return tmp2;
  }

  /// does this list have a special role?
  /// Highest = 1,
  /// SecondHighest = 2,
  /// Three = 3,
  /// Four = 4,
  /// Five = 5,
  /// Six = 6,
  /// Seven = 7,
  /// --- No value
  /// SecondLowest = 8,
  /// Lowest = 9,
  int? priority() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskPriority(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final tmp2 = tmp4;
    return tmp2;
  }

  /// When this is due
  UtcDateTime? utcDue() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskUtcDue(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_UtcDateTime");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = UtcDateTime._(_api, tmp4_1);
    return tmp2;
  }

  /// When this was started
  UtcDateTime? utcStart() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskUtcStart(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_UtcDateTime");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = UtcDateTime._(_api, tmp4_1);
    return tmp2;
  }

  /// Has this been colored in?
  EfkColor? color() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskColor(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_EfkColor");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = EfkColor._(_api, tmp4_1);
    return tmp2;
  }

  /// is this task already done?
  bool isDone() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskIsDone(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3 > 0;
    return tmp2;
  }

  /// if it has been started, haw far is it in percent 0->100
  /// None if not yet started
  int? progressPercent() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskProgressPercent(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final tmp2 = tmp4;
    return tmp2;
  }

  /// tags on this task
  FfiListFfiString keywords() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskKeywords(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_FfiListFfiString");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp4 = FfiListFfiString._(_api, tmp3_1);
    final tmp2 = tmp4;
    return tmp2;
  }

  /// categories this task is in
  FfiListFfiString categories() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskCategories(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_FfiListFfiString");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp4 = FfiListFfiString._(_api, tmp3_1);
    final tmp2 = tmp4;
    return tmp2;
  }

  /// make a builder for updating the task
  TaskUpdateBuilder updateBuilder() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskUpdateBuilder(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    final tmp7 = tmp1.arg4;
    if (tmp3 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      final tmp3_0 = utf8.decode(tmp4_0.asTypedList(tmp5));
      if (tmp5 > 0) {
        final ffi.Pointer<ffi.Void> tmp4_0;
        tmp4_0 = ffi.Pointer.fromAddress(tmp4);
        _api.__deallocate(tmp4_0, tmp6, 1);
      }
      throw tmp3_0;
    }
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "drop_box_TaskUpdateBuilder");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp2 = TaskUpdateBuilder._(_api, tmp7_1);
    return tmp2;
  }

  Stream<void> subscribe() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskSubscribe(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Task_subscribe_stream_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeStream(tmp3_1, _api.__taskSubscribeStreamPoll);
    return tmp2;
  }

  /// replace the current task with one with the latest state
  Future<Task> refresh() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskRefresh(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Task_refresh_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__taskRefreshFuturePoll);
    return tmp2;
  }

  /// get the comments manager for this task
  Future<CommentsManager> comments() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskComments(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Task_comments_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__taskCommentsFuturePoll);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class TaskUpdateBuilder {
  final Api _api;
  final _Box _box;

  TaskUpdateBuilder._(this._api, this._box);

  /// set the title for this task
  void title(
    String title,
  ) {
    final tmp1 = title;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    _api._taskUpdateBuilderTitle(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    return;
  }

  void unsetTitleUpdate() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskUpdateBuilderUnsetTitleUpdate(
      tmp0,
    );
    return;
  }

  /// set the description for this task list
  void descriptionText(
    String text,
  ) {
    final tmp1 = text;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    _api._taskUpdateBuilderDescriptionText(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    return;
  }

  void unsetDescription() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskUpdateBuilderUnsetDescription(
      tmp0,
    );
    return;
  }

  void unsetDescriptionUpdate() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskUpdateBuilderUnsetDescriptionUpdate(
      tmp0,
    );
    return;
  }

  /// set the sort order for this task list
  void sortOrder(
    int sortOrder,
  ) {
    final tmp1 = sortOrder;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1;
    _api._taskUpdateBuilderSortOrder(
      tmp0,
      tmp2,
    );
    return;
  }

  void unsetSortOrderUpdate() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskUpdateBuilderUnsetSortOrderUpdate(
      tmp0,
    );
    return;
  }

  /// set the color for this task list
  void color(
    EfkColor color,
  ) {
    final tmp1 = color;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1._box.move();
    _api._taskUpdateBuilderColor(
      tmp0,
      tmp2,
    );
    return;
  }

  void unsetColor() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskUpdateBuilderUnsetColor(
      tmp0,
    );
    return;
  }

  void unsetColorUpdate() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskUpdateBuilderUnsetColorUpdate(
      tmp0,
    );
    return;
  }

  /// set the utc_due for this task list in rfc3339 format
  void utcDueFromRfc3339(
    String utcDue,
  ) {
    final tmp1 = utcDue;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._taskUpdateBuilderUtcDueFromRfc3339(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5.arg0;
    final tmp8 = tmp5.arg1;
    final tmp9 = tmp5.arg2;
    final tmp10 = tmp5.arg3;
    if (tmp7 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp8_0 = ffi.Pointer.fromAddress(tmp8);
      final tmp7_0 = utf8.decode(tmp8_0.asTypedList(tmp9));
      if (tmp9 > 0) {
        final ffi.Pointer<ffi.Void> tmp8_0;
        tmp8_0 = ffi.Pointer.fromAddress(tmp8);
        _api.__deallocate(tmp8_0, tmp10, 1);
      }
      throw tmp7_0;
    }
    return;
  }

  /// set the utc_due for this task list in rfc2822 format
  void utcDueFromRfc2822(
    String utcDue,
  ) {
    final tmp1 = utcDue;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._taskUpdateBuilderUtcDueFromRfc2822(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5.arg0;
    final tmp8 = tmp5.arg1;
    final tmp9 = tmp5.arg2;
    final tmp10 = tmp5.arg3;
    if (tmp7 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp8_0 = ffi.Pointer.fromAddress(tmp8);
      final tmp7_0 = utf8.decode(tmp8_0.asTypedList(tmp9));
      if (tmp9 > 0) {
        final ffi.Pointer<ffi.Void> tmp8_0;
        tmp8_0 = ffi.Pointer.fromAddress(tmp8);
        _api.__deallocate(tmp8_0, tmp10, 1);
      }
      throw tmp7_0;
    }
    return;
  }

  /// set the utc_due for this task list in custom format
  void utcDueFromFormat(
    String utcDue,
    String format,
  ) {
    final tmp1 = utcDue;
    final tmp5 = format;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    final tmp9 = _api._taskUpdateBuilderUtcDueFromFormat(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
    );
    final tmp11 = tmp9.arg0;
    final tmp12 = tmp9.arg1;
    final tmp13 = tmp9.arg2;
    final tmp14 = tmp9.arg3;
    if (tmp11 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp12_0 = ffi.Pointer.fromAddress(tmp12);
      final tmp11_0 = utf8.decode(tmp12_0.asTypedList(tmp13));
      if (tmp13 > 0) {
        final ffi.Pointer<ffi.Void> tmp12_0;
        tmp12_0 = ffi.Pointer.fromAddress(tmp12);
        _api.__deallocate(tmp12_0, tmp14, 1);
      }
      throw tmp11_0;
    }
    return;
  }

  void unsetUtcDue() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskUpdateBuilderUnsetUtcDue(
      tmp0,
    );
    return;
  }

  void unsetUtcDueUpdate() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskUpdateBuilderUnsetUtcDueUpdate(
      tmp0,
    );
    return;
  }

  /// set the utc_start for this task list in rfc3339 format
  void utcStartFromRfc3339(
    String utcStart,
  ) {
    final tmp1 = utcStart;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._taskUpdateBuilderUtcStartFromRfc3339(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5.arg0;
    final tmp8 = tmp5.arg1;
    final tmp9 = tmp5.arg2;
    final tmp10 = tmp5.arg3;
    if (tmp7 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp8_0 = ffi.Pointer.fromAddress(tmp8);
      final tmp7_0 = utf8.decode(tmp8_0.asTypedList(tmp9));
      if (tmp9 > 0) {
        final ffi.Pointer<ffi.Void> tmp8_0;
        tmp8_0 = ffi.Pointer.fromAddress(tmp8);
        _api.__deallocate(tmp8_0, tmp10, 1);
      }
      throw tmp7_0;
    }
    return;
  }

  /// set the utc_start for this task list in rfc2822 format
  void utcStartFromRfc2822(
    String utcStart,
  ) {
    final tmp1 = utcStart;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._taskUpdateBuilderUtcStartFromRfc2822(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5.arg0;
    final tmp8 = tmp5.arg1;
    final tmp9 = tmp5.arg2;
    final tmp10 = tmp5.arg3;
    if (tmp7 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp8_0 = ffi.Pointer.fromAddress(tmp8);
      final tmp7_0 = utf8.decode(tmp8_0.asTypedList(tmp9));
      if (tmp9 > 0) {
        final ffi.Pointer<ffi.Void> tmp8_0;
        tmp8_0 = ffi.Pointer.fromAddress(tmp8);
        _api.__deallocate(tmp8_0, tmp10, 1);
      }
      throw tmp7_0;
    }
    return;
  }

  /// set the utc_start for this task list in custom format
  void utcStartFromFormat(
    String utcStart,
    String format,
  ) {
    final tmp1 = utcStart;
    final tmp5 = format;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    final tmp9 = _api._taskUpdateBuilderUtcStartFromFormat(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
    );
    final tmp11 = tmp9.arg0;
    final tmp12 = tmp9.arg1;
    final tmp13 = tmp9.arg2;
    final tmp14 = tmp9.arg3;
    if (tmp11 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp12_0 = ffi.Pointer.fromAddress(tmp12);
      final tmp11_0 = utf8.decode(tmp12_0.asTypedList(tmp13));
      if (tmp13 > 0) {
        final ffi.Pointer<ffi.Void> tmp12_0;
        tmp12_0 = ffi.Pointer.fromAddress(tmp12);
        _api.__deallocate(tmp12_0, tmp14, 1);
      }
      throw tmp11_0;
    }
    return;
  }

  void unsetUtcStart() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskUpdateBuilderUnsetUtcStart(
      tmp0,
    );
    return;
  }

  void unsetUtcStartUpdate() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskUpdateBuilderUnsetUtcStartUpdate(
      tmp0,
    );
    return;
  }

  /// set the sort order for this task list
  void progressPercent(
    int progressPercent,
  ) {
    final tmp1 = progressPercent;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1;
    _api._taskUpdateBuilderProgressPercent(
      tmp0,
      tmp2,
    );
    return;
  }

  void unsetProgressPercent() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskUpdateBuilderUnsetProgressPercent(
      tmp0,
    );
    return;
  }

  void unsetProgressPercentUpdate() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskUpdateBuilderUnsetProgressPercentUpdate(
      tmp0,
    );
    return;
  }

  /// set the keywords for this task list
  void keywords(
    FfiListFfiString keywords,
  ) {
    final tmp1 = keywords;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1._box.move();
    _api._taskUpdateBuilderKeywords(
      tmp0,
      tmp2,
    );
    return;
  }

  void unsetKeywords() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskUpdateBuilderUnsetKeywords(
      tmp0,
    );
    return;
  }

  void unsetKeywordsUpdate() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskUpdateBuilderUnsetKeywordsUpdate(
      tmp0,
    );
    return;
  }

  /// set the categories for this task list
  void categories(
    FfiListFfiString categories,
  ) {
    final tmp1 = categories;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1._box.move();
    _api._taskUpdateBuilderCategories(
      tmp0,
      tmp2,
    );
    return;
  }

  void unsetCategories() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskUpdateBuilderUnsetCategories(
      tmp0,
    );
    return;
  }

  void unsetCategoriesUpdate() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskUpdateBuilderUnsetCategoriesUpdate(
      tmp0,
    );
    return;
  }

  /// set the assignees for this task list
  void assignees(
    FfiListUserId assignees,
  ) {
    final tmp1 = assignees;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1._box.move();
    _api._taskUpdateBuilderAssignees(
      tmp0,
      tmp2,
    );
    return;
  }

  void unsetAssignees() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskUpdateBuilderUnsetAssignees(
      tmp0,
    );
    return;
  }

  void unsetAssigneesUpdate() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskUpdateBuilderUnsetAssigneesUpdate(
      tmp0,
    );
    return;
  }

  /// set the subscribers for this task list
  void subscribers(
    FfiListUserId subscribers,
  ) {
    final tmp1 = subscribers;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1._box.move();
    _api._taskUpdateBuilderSubscribers(
      tmp0,
      tmp2,
    );
    return;
  }

  void unsetSubscribers() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskUpdateBuilderUnsetSubscribers(
      tmp0,
    );
    return;
  }

  void unsetSubscribersUpdate() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskUpdateBuilderUnsetSubscribersUpdate(
      tmp0,
    );
    return;
  }

  /// send this task list draft
  /// mark it done
  void markDone() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskUpdateBuilderMarkDone(
      tmp0,
    );
    return;
  }

  /// mark as not done
  void markUndone() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskUpdateBuilderMarkUndone(
      tmp0,
    );
    return;
  }

  /// update this task
  Future<EventId> send() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskUpdateBuilderSend(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__TaskUpdateBuilder_send_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__taskUpdateBuilderSendFuturePoll);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class TaskDraft {
  final Api _api;
  final _Box _box;

  TaskDraft._(this._api, this._box);

  /// set the title for this task
  void title(
    String title,
  ) {
    final tmp1 = title;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    _api._taskDraftTitle(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    return;
  }

  /// set the description for this task
  void descriptionText(
    String text,
  ) {
    final tmp1 = text;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    _api._taskDraftDescriptionText(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    return;
  }

  void unsetDescription() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskDraftUnsetDescription(
      tmp0,
    );
    return;
  }

  /// set the sort order for this task
  void sortOrder(
    int sortOrder,
  ) {
    final tmp1 = sortOrder;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1;
    _api._taskDraftSortOrder(
      tmp0,
      tmp2,
    );
    return;
  }

  /// set the color for this task
  void color(
    EfkColor color,
  ) {
    final tmp1 = color;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1._box.move();
    _api._taskDraftColor(
      tmp0,
      tmp2,
    );
    return;
  }

  void unsetColor() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskDraftUnsetColor(
      tmp0,
    );
    return;
  }

  /// set the utc_due for this task in rfc3339 format
  void utcDueFromRfc3339(
    String utcDue,
  ) {
    final tmp1 = utcDue;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._taskDraftUtcDueFromRfc3339(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5.arg0;
    final tmp8 = tmp5.arg1;
    final tmp9 = tmp5.arg2;
    final tmp10 = tmp5.arg3;
    if (tmp7 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp8_0 = ffi.Pointer.fromAddress(tmp8);
      final tmp7_0 = utf8.decode(tmp8_0.asTypedList(tmp9));
      if (tmp9 > 0) {
        final ffi.Pointer<ffi.Void> tmp8_0;
        tmp8_0 = ffi.Pointer.fromAddress(tmp8);
        _api.__deallocate(tmp8_0, tmp10, 1);
      }
      throw tmp7_0;
    }
    return;
  }

  /// set the utc_due for this task in rfc2822 format
  void utcDueFromRfc2822(
    String utcDue,
  ) {
    final tmp1 = utcDue;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._taskDraftUtcDueFromRfc2822(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5.arg0;
    final tmp8 = tmp5.arg1;
    final tmp9 = tmp5.arg2;
    final tmp10 = tmp5.arg3;
    if (tmp7 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp8_0 = ffi.Pointer.fromAddress(tmp8);
      final tmp7_0 = utf8.decode(tmp8_0.asTypedList(tmp9));
      if (tmp9 > 0) {
        final ffi.Pointer<ffi.Void> tmp8_0;
        tmp8_0 = ffi.Pointer.fromAddress(tmp8);
        _api.__deallocate(tmp8_0, tmp10, 1);
      }
      throw tmp7_0;
    }
    return;
  }

  /// set the utc_due for this task in custom format
  void utcDueFromFormat(
    String utcDue,
    String format,
  ) {
    final tmp1 = utcDue;
    final tmp5 = format;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    final tmp9 = _api._taskDraftUtcDueFromFormat(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
    );
    final tmp11 = tmp9.arg0;
    final tmp12 = tmp9.arg1;
    final tmp13 = tmp9.arg2;
    final tmp14 = tmp9.arg3;
    if (tmp11 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp12_0 = ffi.Pointer.fromAddress(tmp12);
      final tmp11_0 = utf8.decode(tmp12_0.asTypedList(tmp13));
      if (tmp13 > 0) {
        final ffi.Pointer<ffi.Void> tmp12_0;
        tmp12_0 = ffi.Pointer.fromAddress(tmp12);
        _api.__deallocate(tmp12_0, tmp14, 1);
      }
      throw tmp11_0;
    }
    return;
  }

  void unsetUtcDue() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskDraftUnsetUtcDue(
      tmp0,
    );
    return;
  }

  /// set the utc_start for this task in rfc3339 format
  void utcStartFromRfc3339(
    String utcStart,
  ) {
    final tmp1 = utcStart;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._taskDraftUtcStartFromRfc3339(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5.arg0;
    final tmp8 = tmp5.arg1;
    final tmp9 = tmp5.arg2;
    final tmp10 = tmp5.arg3;
    if (tmp7 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp8_0 = ffi.Pointer.fromAddress(tmp8);
      final tmp7_0 = utf8.decode(tmp8_0.asTypedList(tmp9));
      if (tmp9 > 0) {
        final ffi.Pointer<ffi.Void> tmp8_0;
        tmp8_0 = ffi.Pointer.fromAddress(tmp8);
        _api.__deallocate(tmp8_0, tmp10, 1);
      }
      throw tmp7_0;
    }
    return;
  }

  /// set the utc_start for this task in rfc2822 format
  void utcStartFromRfc2822(
    String utcStart,
  ) {
    final tmp1 = utcStart;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._taskDraftUtcStartFromRfc2822(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5.arg0;
    final tmp8 = tmp5.arg1;
    final tmp9 = tmp5.arg2;
    final tmp10 = tmp5.arg3;
    if (tmp7 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp8_0 = ffi.Pointer.fromAddress(tmp8);
      final tmp7_0 = utf8.decode(tmp8_0.asTypedList(tmp9));
      if (tmp9 > 0) {
        final ffi.Pointer<ffi.Void> tmp8_0;
        tmp8_0 = ffi.Pointer.fromAddress(tmp8);
        _api.__deallocate(tmp8_0, tmp10, 1);
      }
      throw tmp7_0;
    }
    return;
  }

  /// set the utc_start for this task in custom format
  void utcStartFromFormat(
    String utcStart,
    String format,
  ) {
    final tmp1 = utcStart;
    final tmp5 = format;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    final tmp9 = _api._taskDraftUtcStartFromFormat(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
    );
    final tmp11 = tmp9.arg0;
    final tmp12 = tmp9.arg1;
    final tmp13 = tmp9.arg2;
    final tmp14 = tmp9.arg3;
    if (tmp11 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp12_0 = ffi.Pointer.fromAddress(tmp12);
      final tmp11_0 = utf8.decode(tmp12_0.asTypedList(tmp13));
      if (tmp13 > 0) {
        final ffi.Pointer<ffi.Void> tmp12_0;
        tmp12_0 = ffi.Pointer.fromAddress(tmp12);
        _api.__deallocate(tmp12_0, tmp14, 1);
      }
      throw tmp11_0;
    }
    return;
  }

  void unsetUtcStart() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskDraftUnsetUtcStart(
      tmp0,
    );
    return;
  }

  /// set the sort order for this task
  void progressPercent(
    int progressPercent,
  ) {
    final tmp1 = progressPercent;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1;
    _api._taskDraftProgressPercent(
      tmp0,
      tmp2,
    );
    return;
  }

  void unsetProgressPercent() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskDraftUnsetProgressPercent(
      tmp0,
    );
    return;
  }

  /// set the keywords for this task
  void keywords(
    FfiListFfiString keywords,
  ) {
    final tmp1 = keywords;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1._box.move();
    _api._taskDraftKeywords(
      tmp0,
      tmp2,
    );
    return;
  }

  void unsetKeywords() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskDraftUnsetKeywords(
      tmp0,
    );
    return;
  }

  /// set the categories for this task
  void categories(
    FfiListFfiString categories,
  ) {
    final tmp1 = categories;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1._box.move();
    _api._taskDraftCategories(
      tmp0,
      tmp2,
    );
    return;
  }

  void unsetCategories() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskDraftUnsetCategories(
      tmp0,
    );
    return;
  }

  /// set the assignees for this task
  void assignees(
    FfiListUserId assignees,
  ) {
    final tmp1 = assignees;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1._box.move();
    _api._taskDraftAssignees(
      tmp0,
      tmp2,
    );
    return;
  }

  void unsetAssignees() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskDraftUnsetAssignees(
      tmp0,
    );
    return;
  }

  /// set the subscribers for this task
  void subscribers(
    FfiListUserId subscribers,
  ) {
    final tmp1 = subscribers;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1._box.move();
    _api._taskDraftSubscribers(
      tmp0,
      tmp2,
    );
    return;
  }

  void unsetSubscribers() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskDraftUnsetSubscribers(
      tmp0,
    );
    return;
  }

  /// create this task
  Future<EventId> send() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskDraftSend(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__TaskDraft_send_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__taskDraftSendFuturePoll);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class TaskList {
  final Api _api;
  final _Box _box;

  TaskList._(this._api, this._box);

  /// the name of this task list
  String name() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskListName(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// the name of this task list
  String? descriptionText() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskListDescriptionText(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// who wants to be informed on updates about this?
  FfiListUserId subscribers() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskListSubscribers(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_FfiListUserId");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp4 = FfiListUserId._(_api, tmp3_1);
    final tmp2 = tmp4;
    return tmp2;
  }

  /// does this list have a special role?
  String? role() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskListRole(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// order in the list
  int sortOrder() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskListSortOrder(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3;
    return tmp2;
  }

  /// Has this been colored in?
  EfkColor? color() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskListColor(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_EfkColor");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = EfkColor._(_api, tmp4_1);
    return tmp2;
  }

  /// Does this have any special time zone
  String? timeZone() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskListTimeZone(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// tags on this task
  FfiListFfiString keywords() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskListKeywords(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_FfiListFfiString");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp4 = FfiListFfiString._(_api, tmp3_1);
    final tmp2 = tmp4;
    return tmp2;
  }

  /// categories this task is in
  FfiListFfiString categories() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskListCategories(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_FfiListFfiString");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp4 = FfiListFfiString._(_api, tmp3_1);
    final tmp2 = tmp4;
    return tmp2;
  }

  /// The tasks belonging to this tasklist
  Future<FfiListTask> tasks() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskListTasks(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__TaskList_tasks_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__taskListTasksFuturePoll);
    return tmp2;
  }

  /// make a builder for creating the task draft
  TaskDraft taskBuilder() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskListTaskBuilder(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    final tmp7 = tmp1.arg4;
    if (tmp3 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      final tmp3_0 = utf8.decode(tmp4_0.asTypedList(tmp5));
      if (tmp5 > 0) {
        final ffi.Pointer<ffi.Void> tmp4_0;
        tmp4_0 = ffi.Pointer.fromAddress(tmp4);
        _api.__deallocate(tmp4_0, tmp6, 1);
      }
      throw tmp3_0;
    }
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "drop_box_TaskDraft");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp2 = TaskDraft._(_api, tmp7_1);
    return tmp2;
  }

  /// make a builder for updating the task list
  TaskListUpdateBuilder updateBuilder() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskListUpdateBuilder(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    final tmp7 = tmp1.arg4;
    if (tmp3 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      final tmp3_0 = utf8.decode(tmp4_0.asTypedList(tmp5));
      if (tmp5 > 0) {
        final ffi.Pointer<ffi.Void> tmp4_0;
        tmp4_0 = ffi.Pointer.fromAddress(tmp4);
        _api.__deallocate(tmp4_0, tmp6, 1);
      }
      throw tmp3_0;
    }
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "drop_box_TaskListUpdateBuilder");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp2 = TaskListUpdateBuilder._(_api, tmp7_1);
    return tmp2;
  }

  Stream<void> subscribe() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskListSubscribe(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__TaskList_subscribe_stream_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeStream(tmp3_1, _api.__taskListSubscribeStreamPoll);
    return tmp2;
  }

  /// replace the current task with one with the latest state
  Future<TaskList> refresh() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskListRefresh(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__TaskList_refresh_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__taskListRefreshFuturePoll);
    return tmp2;
  }

  /// the space this TaskList belongs to
  Space space() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskListSpace(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_Space");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = Space._(_api, tmp3_1);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class TaskListDraft {
  final Api _api;
  final _Box _box;

  TaskListDraft._(this._api, this._box);

  /// set the name for this task list
  void name(
    String name,
  ) {
    final tmp1 = name;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    _api._taskListDraftName(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    return;
  }

  /// set the description for this task list
  void descriptionText(
    String text,
  ) {
    final tmp1 = text;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    _api._taskListDraftDescriptionText(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    return;
  }

  void unsetDescription() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskListDraftUnsetDescription(
      tmp0,
    );
    return;
  }

  /// set the sort order for this task list
  void sortOrder(
    int sortOrder,
  ) {
    final tmp1 = sortOrder;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1;
    _api._taskListDraftSortOrder(
      tmp0,
      tmp2,
    );
    return;
  }

  /// set the color for this task list
  void color(
    EfkColor color,
  ) {
    final tmp1 = color;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1._box.move();
    _api._taskListDraftColor(
      tmp0,
      tmp2,
    );
    return;
  }

  void unsetColor() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskListDraftUnsetColor(
      tmp0,
    );
    return;
  }

  /// set the keywords for this task list
  void keywords(
    FfiListFfiString keywords,
  ) {
    final tmp1 = keywords;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1._box.move();
    _api._taskListDraftKeywords(
      tmp0,
      tmp2,
    );
    return;
  }

  void unsetKeywords() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskListDraftUnsetKeywords(
      tmp0,
    );
    return;
  }

  /// set the categories for this task list
  void categories(
    FfiListFfiString categories,
  ) {
    final tmp1 = categories;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1._box.move();
    _api._taskListDraftCategories(
      tmp0,
      tmp2,
    );
    return;
  }

  void unsetCategories() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskListDraftUnsetCategories(
      tmp0,
    );
    return;
  }

  /// set the subscribers for this task list
  void subscribers(
    FfiListUserId subscribers,
  ) {
    final tmp1 = subscribers;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1._box.move();
    _api._taskListDraftSubscribers(
      tmp0,
      tmp2,
    );
    return;
  }

  void unsetSubscribers() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskListDraftUnsetSubscribers(
      tmp0,
    );
    return;
  }

  /// create this task list
  Future<EventId> send() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskListDraftSend(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__TaskListDraft_send_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__taskListDraftSendFuturePoll);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class TaskListUpdateBuilder {
  final Api _api;
  final _Box _box;

  TaskListUpdateBuilder._(this._api, this._box);

  /// set the name for this task list
  void name(
    String name,
  ) {
    final tmp1 = name;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    _api._taskListUpdateBuilderName(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    return;
  }

  /// set the description for this task list
  void descriptionText(
    String text,
  ) {
    final tmp1 = text;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    _api._taskListUpdateBuilderDescriptionText(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    return;
  }

  void unsetDescription() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskListUpdateBuilderUnsetDescription(
      tmp0,
    );
    return;
  }

  void unsetDescriptionUpdate() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskListUpdateBuilderUnsetDescriptionUpdate(
      tmp0,
    );
    return;
  }

  /// set the sort order for this task list
  void sortOrder(
    int sortOrder,
  ) {
    final tmp1 = sortOrder;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1;
    _api._taskListUpdateBuilderSortOrder(
      tmp0,
      tmp2,
    );
    return;
  }

  /// set the color for this task list
  void color(
    EfkColor color,
  ) {
    final tmp1 = color;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1._box.move();
    _api._taskListUpdateBuilderColor(
      tmp0,
      tmp2,
    );
    return;
  }

  void unsetColor() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskListUpdateBuilderUnsetColor(
      tmp0,
    );
    return;
  }

  void unsetColorUpdate() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskListUpdateBuilderUnsetColorUpdate(
      tmp0,
    );
    return;
  }

  /// set the keywords for this task list
  void keywords(
    FfiListFfiString keywords,
  ) {
    final tmp1 = keywords;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1._box.move();
    _api._taskListUpdateBuilderKeywords(
      tmp0,
      tmp2,
    );
    return;
  }

  void unsetKeywords() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskListUpdateBuilderUnsetKeywords(
      tmp0,
    );
    return;
  }

  void unsetKeywordsUpdate() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskListUpdateBuilderUnsetKeywordsUpdate(
      tmp0,
    );
    return;
  }

  /// set the categories for this task list
  void categories(
    FfiListFfiString categories,
  ) {
    final tmp1 = categories;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1._box.move();
    _api._taskListUpdateBuilderCategories(
      tmp0,
      tmp2,
    );
    return;
  }

  void unsetCategories() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskListUpdateBuilderUnsetCategories(
      tmp0,
    );
    return;
  }

  void unsetCategoriesUpdate() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskListUpdateBuilderUnsetCategoriesUpdate(
      tmp0,
    );
    return;
  }

  /// set the subscribers for this task list
  void subscribers(
    FfiListUserId subscribers,
  ) {
    final tmp1 = subscribers;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1._box.move();
    _api._taskListUpdateBuilderSubscribers(
      tmp0,
      tmp2,
    );
    return;
  }

  void unsetSubscribers() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskListUpdateBuilderUnsetSubscribers(
      tmp0,
    );
    return;
  }

  void unsetSubscribersUpdate() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._taskListUpdateBuilderUnsetSubscribersUpdate(
      tmp0,
    );
    return;
  }

  /// update this task
  Future<EventId> send() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._taskListUpdateBuilderSend(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 =
        _Box(_api, tmp3_0, "__TaskListUpdateBuilder_send_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 =
        _nativeFuture(tmp3_1, _api.__taskListUpdateBuilderSendFuturePoll);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class SpaceRelation {
  final Api _api;
  final _Box _box;

  SpaceRelation._(this._api, this._box);

  /// the room ID this Relation links to
  RoomId roomId() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._spaceRelationRoomId(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_RoomId");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = RoomId._(_api, tmp3_1);
    return tmp2;
  }

  /// is this a suggested room?
  bool suggested() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._spaceRelationSuggested(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3 > 0;
    return tmp2;
  }

  /// how to find this room
  FfiListFfiString via() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._spaceRelationVia(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_FfiListFfiString");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp4 = FfiListFfiString._(_api, tmp3_1);
    final tmp2 = tmp4;
    return tmp2;
  }

  /// of what type is the targeted room?
  String targetType() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._spaceRelationTargetType(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class SpaceRelations {
  final Api _api;
  final _Box _box;

  SpaceRelations._(this._api, this._box);

  /// do we have a canonical parent?!?
  SpaceRelation? mainParent() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._spaceRelationsMainParent(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "drop_box_SpaceRelation");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = SpaceRelation._(_api, tmp4_1);
    return tmp2;
  }

  /// other parents we belong to
  FfiListSpaceRelation otherParents() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._spaceRelationsOtherParents(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_FfiListSpaceRelation");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp4 = FfiListSpaceRelation._(_api, tmp3_1);
    final tmp2 = tmp4;
    return tmp2;
  }

  /// children
  FfiListSpaceRelation children() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._spaceRelationsChildren(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_FfiListSpaceRelation");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp4 = FfiListSpaceRelation._(_api, tmp3_1);
    final tmp2 = tmp4;
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class Space {
  final Api _api;
  final _Box _box;

  Space._(this._api, this._box);

  /// get the room profile that contains avatar and display name
  RoomProfile getProfile() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._spaceGetProfile(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_RoomProfile");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = RoomProfile._(_api, tmp3_1);
    return tmp2;
  }

  /// get the room profile that contains avatar and display name
  Future<SpaceRelations> spaceRelations() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._spaceSpaceRelations(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Space_space_relations_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__spaceSpaceRelationsFuturePoll);
    return tmp2;
  }

  /// what is the description / topic
  String? topic() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._spaceTopic(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// the members currently in the space
  Future<FfiListMember> activeMembers() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._spaceActiveMembers(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Space_active_members_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__spaceActiveMembersFuturePoll);
    return tmp2;
  }

  /// the room id
  RoomId getRoomId() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._spaceGetRoomId(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_RoomId");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = RoomId._(_api, tmp3_1);
    return tmp2;
  }

  Future<Member> getMember(
    String userId,
  ) {
    final tmp1 = userId;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._spaceGetMember(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "__Space_get_member_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 = _nativeFuture(tmp7_1, _api.__spaceGetMemberFuturePoll);
    return tmp6;
  }

  /// whether this room is encrypted one
  Future<bool> isEncrypted() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._spaceIsEncrypted(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Space_is_encrypted_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__spaceIsEncryptedFuturePoll);
    return tmp2;
  }

  /// the Tasks lists of this Space
  Future<FfiListTaskList> taskLists() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._spaceTaskLists(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Space_task_lists_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__spaceTaskListsFuturePoll);
    return tmp2;
  }

  /// the Tasks list of this Space
  Future<TaskList> taskList(
    String key,
  ) {
    final tmp1 = key;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._spaceTaskList(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "__Space_task_list_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 = _nativeFuture(tmp7_1, _api.__spaceTaskListFuturePoll);
    return tmp6;
  }

  /// task list draft builder
  TaskListDraft taskListDraft() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._spaceTaskListDraft(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    final tmp7 = tmp1.arg4;
    if (tmp3 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      final tmp3_0 = utf8.decode(tmp4_0.asTypedList(tmp5));
      if (tmp5 > 0) {
        final ffi.Pointer<ffi.Void> tmp4_0;
        tmp4_0 = ffi.Pointer.fromAddress(tmp4);
        _api.__deallocate(tmp4_0, tmp6, 1);
      }
      throw tmp3_0;
    }
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "drop_box_TaskListDraft");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp2 = TaskListDraft._(_api, tmp7_1);
    return tmp2;
  }

  /// get latest news
  Future<FfiListNewsEntry> latestNewsEntries(
    int count,
  ) {
    final tmp1 = count;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1;
    final tmp3 = _api._spaceLatestNewsEntries(
      tmp0,
      tmp2,
    );
    final tmp5 = tmp3;
    final ffi.Pointer<ffi.Void> tmp5_0 = ffi.Pointer.fromAddress(tmp5);
    final tmp5_1 =
        _Box(_api, tmp5_0, "__Space_latest_news_entries_future_drop");
    tmp5_1._finalizer = _api._registerFinalizer(tmp5_1);
    final tmp4 = _nativeFuture(tmp5_1, _api.__spaceLatestNewsEntriesFuturePoll);
    return tmp4;
  }

  /// get all calendar events
  Future<FfiListCalendarEvent> calendarEvents() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._spaceCalendarEvents(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Space_calendar_events_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__spaceCalendarEventsFuturePoll);
    return tmp2;
  }

  /// create news draft
  NewsEntryDraft newsDraft() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._spaceNewsDraft(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    final tmp7 = tmp1.arg4;
    if (tmp3 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      final tmp3_0 = utf8.decode(tmp4_0.asTypedList(tmp5));
      if (tmp5 > 0) {
        final ffi.Pointer<ffi.Void> tmp4_0;
        tmp4_0 = ffi.Pointer.fromAddress(tmp4);
        _api.__deallocate(tmp4_0, tmp6, 1);
      }
      throw tmp3_0;
    }
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "drop_box_NewsEntryDraft");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp2 = NewsEntryDraft._(_api, tmp7_1);
    return tmp2;
  }

  /// the pins of this Space
  Future<FfiListActerPin> pins() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._spacePins(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Space_pins_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__spacePinsFuturePoll);
    return tmp2;
  }

  /// the links pinned to this Space
  Future<FfiListActerPin> pinnedLinks() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._spacePinnedLinks(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Space_pinned_links_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__spacePinnedLinksFuturePoll);
    return tmp2;
  }

  /// pin draft builder
  PinDraft pinDraft() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._spacePinDraft(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    final tmp7 = tmp1.arg4;
    if (tmp3 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      final tmp3_0 = utf8.decode(tmp4_0.asTypedList(tmp5));
      if (tmp5 > 0) {
        final ffi.Pointer<ffi.Void> tmp4_0;
        tmp4_0 = ffi.Pointer.fromAddress(tmp4);
        _api.__deallocate(tmp4_0, tmp6, 1);
      }
      throw tmp3_0;
    }
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "drop_box_PinDraft");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp2 = PinDraft._(_api, tmp7_1);
    return tmp2;
  }

  /// send the image message to this room
  Future<EventId> sendImageMessage(
    String uri,
    String name,
    String mimetype,
    int? size,
    int? width,
    int? height,
    String? blurhash,
  ) {
    final tmp1 = uri;
    final tmp5 = name;
    final tmp9 = mimetype;
    final tmp13 = size;
    final tmp17 = width;
    final tmp21 = height;
    final tmp25 = blurhash;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    var tmp10 = 0;
    var tmp11 = 0;
    var tmp12 = 0;
    var tmp14 = 0;
    var tmp16 = 0;
    var tmp18 = 0;
    var tmp20 = 0;
    var tmp22 = 0;
    var tmp24 = 0;
    var tmp26 = 0;
    var tmp28 = 0;
    var tmp29 = 0;
    var tmp30 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    final tmp9_0 = utf8.encode(tmp9);
    tmp11 = tmp9_0.length;
    final ffi.Pointer<ffi.Uint8> tmp10_0 = _api.__allocate(tmp11 * 1, 1);
    final Uint8List tmp10_1 = tmp10_0.asTypedList(tmp11);
    tmp10_1.setAll(0, tmp9_0);
    tmp10 = tmp10_0.address;
    tmp12 = tmp11;
    if (tmp13 == null) {
      tmp14 = 0;
    } else {
      tmp14 = 1;
      final tmp15 = tmp13;
      tmp16 = tmp15;
    }
    if (tmp17 == null) {
      tmp18 = 0;
    } else {
      tmp18 = 1;
      final tmp19 = tmp17;
      tmp20 = tmp19;
    }
    if (tmp21 == null) {
      tmp22 = 0;
    } else {
      tmp22 = 1;
      final tmp23 = tmp21;
      tmp24 = tmp23;
    }
    if (tmp25 == null) {
      tmp26 = 0;
    } else {
      tmp26 = 1;
      final tmp27 = tmp25;
      final tmp27_0 = utf8.encode(tmp27);
      tmp29 = tmp27_0.length;
      final ffi.Pointer<ffi.Uint8> tmp28_0 = _api.__allocate(tmp29 * 1, 1);
      final Uint8List tmp28_1 = tmp28_0.asTypedList(tmp29);
      tmp28_1.setAll(0, tmp27_0);
      tmp28 = tmp28_0.address;
      tmp30 = tmp29;
    }
    final tmp31 = _api._spaceSendImageMessage(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
      tmp10,
      tmp11,
      tmp12,
      tmp14,
      tmp16,
      tmp18,
      tmp20,
      tmp22,
      tmp24,
      tmp26,
      tmp28,
      tmp29,
      tmp30,
    );
    final tmp33 = tmp31;
    final ffi.Pointer<ffi.Void> tmp33_0 = ffi.Pointer.fromAddress(tmp33);
    final tmp33_1 =
        _Box(_api, tmp33_0, "__Space_send_image_message_future_drop");
    tmp33_1._finalizer = _api._registerFinalizer(tmp33_1);
    final tmp32 =
        _nativeFuture(tmp33_1, _api.__spaceSendImageMessageFuturePoll);
    return tmp32;
  }

  /// decrypted image buffer data
  /// The reason that this function belongs to room object is because ChatScreen keeps it as member variable
  /// If this function belongs to message object, we may have to load too many message objects in ChatScreen
  Future<FfiBufferUint8> imageBinary(
    String eventId,
  ) {
    final tmp1 = eventId;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._spaceImageBinary(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "__Space_image_binary_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 = _nativeFuture(tmp7_1, _api.__spaceImageBinaryFuturePoll);
    return tmp6;
  }

  /// send the audio message to this room
  Future<EventId> sendAudioMessage(
    String uri,
    String name,
    String mimetype,
    int? secs,
    int? size,
  ) {
    final tmp1 = uri;
    final tmp5 = name;
    final tmp9 = mimetype;
    final tmp13 = secs;
    final tmp17 = size;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    var tmp10 = 0;
    var tmp11 = 0;
    var tmp12 = 0;
    var tmp14 = 0;
    var tmp16 = 0;
    var tmp18 = 0;
    var tmp20 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    final tmp9_0 = utf8.encode(tmp9);
    tmp11 = tmp9_0.length;
    final ffi.Pointer<ffi.Uint8> tmp10_0 = _api.__allocate(tmp11 * 1, 1);
    final Uint8List tmp10_1 = tmp10_0.asTypedList(tmp11);
    tmp10_1.setAll(0, tmp9_0);
    tmp10 = tmp10_0.address;
    tmp12 = tmp11;
    if (tmp13 == null) {
      tmp14 = 0;
    } else {
      tmp14 = 1;
      final tmp15 = tmp13;
      tmp16 = tmp15;
    }
    if (tmp17 == null) {
      tmp18 = 0;
    } else {
      tmp18 = 1;
      final tmp19 = tmp17;
      tmp20 = tmp19;
    }
    final tmp21 = _api._spaceSendAudioMessage(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
      tmp10,
      tmp11,
      tmp12,
      tmp14,
      tmp16,
      tmp18,
      tmp20,
    );
    final tmp23 = tmp21;
    final ffi.Pointer<ffi.Void> tmp23_0 = ffi.Pointer.fromAddress(tmp23);
    final tmp23_1 =
        _Box(_api, tmp23_0, "__Space_send_audio_message_future_drop");
    tmp23_1._finalizer = _api._registerFinalizer(tmp23_1);
    final tmp22 =
        _nativeFuture(tmp23_1, _api.__spaceSendAudioMessageFuturePoll);
    return tmp22;
  }

  /// decrypted audio buffer data
  /// The reason that this function belongs to room object is because ChatScreen keeps it as member variable
  /// If this function belongs to message object, we may have to load too many message objects in ChatScreen
  Future<FfiBufferUint8> audioBinary(
    String eventId,
  ) {
    final tmp1 = eventId;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._spaceAudioBinary(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "__Space_audio_binary_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 = _nativeFuture(tmp7_1, _api.__spaceAudioBinaryFuturePoll);
    return tmp6;
  }

  /// send the video message to this room
  Future<EventId> sendVideoMessage(
    String uri,
    String name,
    String mimetype,
    int? secs,
    int? height,
    int? width,
    int? size,
    String? blurhash,
  ) {
    final tmp1 = uri;
    final tmp5 = name;
    final tmp9 = mimetype;
    final tmp13 = secs;
    final tmp17 = height;
    final tmp21 = width;
    final tmp25 = size;
    final tmp29 = blurhash;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    var tmp10 = 0;
    var tmp11 = 0;
    var tmp12 = 0;
    var tmp14 = 0;
    var tmp16 = 0;
    var tmp18 = 0;
    var tmp20 = 0;
    var tmp22 = 0;
    var tmp24 = 0;
    var tmp26 = 0;
    var tmp28 = 0;
    var tmp30 = 0;
    var tmp32 = 0;
    var tmp33 = 0;
    var tmp34 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    final tmp9_0 = utf8.encode(tmp9);
    tmp11 = tmp9_0.length;
    final ffi.Pointer<ffi.Uint8> tmp10_0 = _api.__allocate(tmp11 * 1, 1);
    final Uint8List tmp10_1 = tmp10_0.asTypedList(tmp11);
    tmp10_1.setAll(0, tmp9_0);
    tmp10 = tmp10_0.address;
    tmp12 = tmp11;
    if (tmp13 == null) {
      tmp14 = 0;
    } else {
      tmp14 = 1;
      final tmp15 = tmp13;
      tmp16 = tmp15;
    }
    if (tmp17 == null) {
      tmp18 = 0;
    } else {
      tmp18 = 1;
      final tmp19 = tmp17;
      tmp20 = tmp19;
    }
    if (tmp21 == null) {
      tmp22 = 0;
    } else {
      tmp22 = 1;
      final tmp23 = tmp21;
      tmp24 = tmp23;
    }
    if (tmp25 == null) {
      tmp26 = 0;
    } else {
      tmp26 = 1;
      final tmp27 = tmp25;
      tmp28 = tmp27;
    }
    if (tmp29 == null) {
      tmp30 = 0;
    } else {
      tmp30 = 1;
      final tmp31 = tmp29;
      final tmp31_0 = utf8.encode(tmp31);
      tmp33 = tmp31_0.length;
      final ffi.Pointer<ffi.Uint8> tmp32_0 = _api.__allocate(tmp33 * 1, 1);
      final Uint8List tmp32_1 = tmp32_0.asTypedList(tmp33);
      tmp32_1.setAll(0, tmp31_0);
      tmp32 = tmp32_0.address;
      tmp34 = tmp33;
    }
    final tmp35 = _api._spaceSendVideoMessage(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
      tmp10,
      tmp11,
      tmp12,
      tmp14,
      tmp16,
      tmp18,
      tmp20,
      tmp22,
      tmp24,
      tmp26,
      tmp28,
      tmp30,
      tmp32,
      tmp33,
      tmp34,
    );
    final tmp37 = tmp35;
    final ffi.Pointer<ffi.Void> tmp37_0 = ffi.Pointer.fromAddress(tmp37);
    final tmp37_1 =
        _Box(_api, tmp37_0, "__Space_send_video_message_future_drop");
    tmp37_1._finalizer = _api._registerFinalizer(tmp37_1);
    final tmp36 =
        _nativeFuture(tmp37_1, _api.__spaceSendVideoMessageFuturePoll);
    return tmp36;
  }

  /// decrypted video buffer data
  /// The reason that this function belongs to room object is because ChatScreen keeps it as member variable
  /// If this function belongs to message object, we may have to load too many message objects in ChatScreen
  Future<FfiBufferUint8> videoBinary(
    String eventId,
  ) {
    final tmp1 = eventId;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._spaceVideoBinary(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "__Space_video_binary_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 = _nativeFuture(tmp7_1, _api.__spaceVideoBinaryFuturePoll);
    return tmp6;
  }

  /// send the file message to this room
  Future<EventId> sendFileMessage(
    String uri,
    String name,
    String mimetype,
    int size,
  ) {
    final tmp1 = uri;
    final tmp5 = name;
    final tmp9 = mimetype;
    final tmp13 = size;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    var tmp10 = 0;
    var tmp11 = 0;
    var tmp12 = 0;
    var tmp14 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5_0 = utf8.encode(tmp5);
    tmp7 = tmp5_0.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final Uint8List tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5_0);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    final tmp9_0 = utf8.encode(tmp9);
    tmp11 = tmp9_0.length;
    final ffi.Pointer<ffi.Uint8> tmp10_0 = _api.__allocate(tmp11 * 1, 1);
    final Uint8List tmp10_1 = tmp10_0.asTypedList(tmp11);
    tmp10_1.setAll(0, tmp9_0);
    tmp10 = tmp10_0.address;
    tmp12 = tmp11;
    tmp14 = tmp13;
    final tmp15 = _api._spaceSendFileMessage(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
      tmp10,
      tmp11,
      tmp12,
      tmp14,
    );
    final tmp17 = tmp15;
    final ffi.Pointer<ffi.Void> tmp17_0 = ffi.Pointer.fromAddress(tmp17);
    final tmp17_1 =
        _Box(_api, tmp17_0, "__Space_send_file_message_future_drop");
    tmp17_1._finalizer = _api._registerFinalizer(tmp17_1);
    final tmp16 = _nativeFuture(tmp17_1, _api.__spaceSendFileMessageFuturePoll);
    return tmp16;
  }

  /// decrypted file buffer data
  /// The reason that this function belongs to room object is because ChatScreen keeps it as member variable
  /// If this function belongs to message object, we may have to load too many message objects in ChatScreen
  Future<FfiBufferUint8> fileBinary(
    String eventId,
  ) {
    final tmp1 = eventId;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._spaceFileBinary(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "__Space_file_binary_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 = _nativeFuture(tmp7_1, _api.__spaceFileBinaryFuturePoll);
    return tmp6;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class Member {
  final Api _api;
  final _Box _box;

  Member._(this._api, this._box);

  /// get the user profile that contains avatar and display name
  UserProfile getProfile() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._memberGetProfile(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_UserProfile");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = UserProfile._(_api, tmp3_1);
    return tmp2;
  }

  /// Full user_id
  UserId userId() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._memberUserId(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_UserId");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = UserId._(_api, tmp3_1);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class Account {
  final Api _api;
  final _Box _box;

  Account._(this._api, this._box);

  /// get user id of this account
  UserId userId() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._accountUserId(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_UserId");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = UserId._(_api, tmp3_1);
    return tmp2;
  }

  /// The display_name of the account
  Future<String> displayName() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._accountDisplayName(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Account_display_name_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__accountDisplayNameFuturePoll);
    return tmp2;
  }

  /// Change the display name of the account
  Future<bool> setDisplayName(
    String name,
  ) {
    final tmp1 = name;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._accountSetDisplayName(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "__Account_set_display_name_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 = _nativeFuture(tmp7_1, _api.__accountSetDisplayNameFuturePoll);
    return tmp6;
  }

  /// The avatar of the client
  Future<FfiBufferUint8> avatar() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._accountAvatar(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Account_avatar_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__accountAvatarFuturePoll);
    return tmp2;
  }

  /// Change the avatar of the account
  /// provide the c_type as MIME, e.g. `image/jpeg`
  Future<MxcUri> setAvatar(
    String cType,
    List<int> data,
  ) {
    final tmp1 = cType;
    final tmp5 = data;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp7 = 0;
    var tmp8 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    tmp7 = tmp5.length;
    final ffi.Pointer<ffi.Uint8> tmp6_0 = _api.__allocate(tmp7 * 1, 1);
    final tmp6_1 = tmp6_0.asTypedList(tmp7);
    tmp6_1.setAll(0, tmp5);
    tmp6 = tmp6_0.address;
    tmp8 = tmp7;
    final tmp9 = _api._accountSetAvatar(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp7,
      tmp8,
    );
    final tmp11 = tmp9;
    final ffi.Pointer<ffi.Void> tmp11_0 = ffi.Pointer.fromAddress(tmp11);
    final tmp11_1 = _Box(_api, tmp11_0, "__Account_set_avatar_future_drop");
    tmp11_1._finalizer = _api._registerFinalizer(tmp11_1);
    final tmp10 = _nativeFuture(tmp11_1, _api.__accountSetAvatarFuturePoll);
    return tmp10;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class SyncState {
  final Api _api;
  final _Box _box;

  SyncState._(this._api, this._box);

  /// Get event handler of first synchronization on every launch
  Stream<bool>? firstSyncedRx() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._syncStateFirstSyncedRx(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 =
        _Box(_api, tmp4_0, "__SyncState_first_synced_rx_stream_drop");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = _nativeStream(tmp4_1, _api.__syncStateFirstSyncedRxStreamPoll);
    return tmp2;
  }

  /// stop the sync loop
  void cancel() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    _api._syncStateCancel(
      tmp0,
    );
    return;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class CreateSpaceSettings {
  final Api _api;
  final _Box _box;

  CreateSpaceSettings._(this._api, this._box);

  /// set the alias of space
  void alias(
    String value,
  ) {
    final tmp1 = value;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    _api._createSpaceSettingsAlias(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    return;
  }

  /// set the space's visibility to either Public or Private
  void visibility(
    String value,
  ) {
    final tmp1 = value;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    _api._createSpaceSettingsVisibility(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    return;
  }

  /// add the id of user that will be invited to this space
  void addInvitee(
    String value,
  ) {
    final tmp1 = value;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    _api._createSpaceSettingsAddInvitee(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    return;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

/// Main entry point for `acter`.
class Client {
  final Api _api;
  final _Box _box;

  Client._(this._api, this._box);

  /// start the sync
  SyncState startSync() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientStartSync(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_SyncState");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = SyncState._(_api, tmp3_1);
    return tmp2;
  }

  /// Get the restore token for this session
  Future<String> restoreToken() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientRestoreToken(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Client_restore_token_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__clientRestoreTokenFuturePoll);
    return tmp2;
  }

  /// Whether the client is registered as a guest account
  bool isGuest() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientIsGuest(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3 > 0;
    return tmp2;
  }

  /// Whether the client has finished a first sync run
  bool hasFirstSynced() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientHasFirstSynced(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3 > 0;
    return tmp2;
  }

  /// Whether the client is syncing
  bool isSyncing() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientIsSyncing(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3 > 0;
    return tmp2;
  }

  /// Whether the client is logged in
  bool loggedIn() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientLoggedIn(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3 > 0;
    return tmp2;
  }

  /// return the account of the logged in user, if given
  Account account() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientAccount(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    final tmp7 = tmp1.arg4;
    if (tmp3 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      final tmp3_0 = utf8.decode(tmp4_0.asTypedList(tmp5));
      if (tmp5 > 0) {
        final ffi.Pointer<ffi.Void> tmp4_0;
        tmp4_0 = ffi.Pointer.fromAddress(tmp4);
        _api.__deallocate(tmp4_0, tmp6, 1);
      }
      throw tmp3_0;
    }
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "drop_box_Account");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp2 = Account._(_api, tmp7_1);
    return tmp2;
  }

  DeviceId deviceId() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientDeviceId(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    final tmp7 = tmp1.arg4;
    if (tmp3 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      final tmp3_0 = utf8.decode(tmp4_0.asTypedList(tmp5));
      if (tmp5 > 0) {
        final ffi.Pointer<ffi.Void> tmp4_0;
        tmp4_0 = ffi.Pointer.fromAddress(tmp4);
        _api.__deallocate(tmp4_0, tmp6, 1);
      }
      throw tmp3_0;
    }
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "drop_box_DeviceId");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp2 = DeviceId._(_api, tmp7_1);
    return tmp2;
  }

  /// The user_id of the client
  /// deprecated, please use account() instead.
  UserId userId() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientUserId(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    final tmp7 = tmp1.arg4;
    if (tmp3 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      final tmp3_0 = utf8.decode(tmp4_0.asTypedList(tmp5));
      if (tmp5 > 0) {
        final ffi.Pointer<ffi.Void> tmp4_0;
        tmp4_0 = ffi.Pointer.fromAddress(tmp4);
        _api.__deallocate(tmp4_0, tmp6, 1);
      }
      throw tmp3_0;
    }
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "drop_box_UserId");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp2 = UserId._(_api, tmp7_1);
    return tmp2;
  }

  /// get conversation room
  Future<Conversation> conversation(
    String roomOrId,
  ) {
    final tmp1 = roomOrId;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._clientConversation(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "__Client_conversation_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 = _nativeFuture(tmp7_1, _api.__clientConversationFuturePoll);
    return tmp6;
  }

  /// get the user profile that contains avatar and display name
  UserProfile getUserProfile() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientGetUserProfile(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    final tmp7 = tmp1.arg4;
    if (tmp3 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      final tmp3_0 = utf8.decode(tmp4_0.asTypedList(tmp5));
      if (tmp5 > 0) {
        final ffi.Pointer<ffi.Void> tmp4_0;
        tmp4_0 = ffi.Pointer.fromAddress(tmp4);
        _api.__deallocate(tmp4_0, tmp6, 1);
      }
      throw tmp3_0;
    }
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "drop_box_UserProfile");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp2 = UserProfile._(_api, tmp7_1);
    return tmp2;
  }

  /// The conversations the user is involved in
  Future<FfiListConversation> conversations() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientConversations(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Client_conversations_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__clientConversationsFuturePoll);
    return tmp2;
  }

  /// The update event of conversations the user is involved in
  Stream<FfiListConversation> conversationsRx() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientConversationsRx(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Client_conversations_rx_stream_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeStream(tmp3_1, _api.__clientConversationsRxStreamPoll);
    return tmp2;
  }

  /// The spaces the user is part of
  Future<FfiListSpace> spaces() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientSpaces(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Client_spaces_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__clientSpacesFuturePoll);
    return tmp2;
  }

  /// Get the following space the user is part of by
  /// roomId or room alias;
  Future<Space> getSpace(
    String idOrAlias,
  ) {
    final tmp1 = idOrAlias;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._clientGetSpace(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "__Client_get_space_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 = _nativeFuture(tmp7_1, _api.__clientGetSpaceFuturePoll);
    return tmp6;
  }

  /// Get the Pinned Links for the client
  Future<FfiListActerPin> pinnedLinks() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientPinnedLinks(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Client_pinned_links_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__clientPinnedLinksFuturePoll);
    return tmp2;
  }

  /// Get the invitation event stream
  Stream<FfiListInvitation> invitationsRx() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientInvitationsRx(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Client_invitations_rx_stream_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeStream(tmp3_1, _api.__clientInvitationsRxStreamPoll);
    return tmp2;
  }

  /// the users out of room
  Future<FfiListUserProfile> suggestedUsersToInvite(
    String roomName,
  ) {
    final tmp1 = roomName;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._clientSuggestedUsersToInvite(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 =
        _Box(_api, tmp7_0, "__Client_suggested_users_to_invite_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 =
        _nativeFuture(tmp7_1, _api.__clientSuggestedUsersToInviteFuturePoll);
    return tmp6;
  }

  /// Whether the user already verified the device
  Future<bool> verifiedDevice(
    String devId,
  ) {
    final tmp1 = devId;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._clientVerifiedDevice(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "__Client_verified_device_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 = _nativeFuture(tmp7_1, _api.__clientVerifiedDeviceFuturePoll);
    return tmp6;
  }

  /// log out this client
  Future<bool> logout() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientLogout(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Client_logout_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__clientLogoutFuturePoll);
    return tmp2;
  }

  /// Get the verification event receiver
  Stream<VerificationEvent>? verificationEventRx() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientVerificationEventRx(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 =
        _Box(_api, tmp4_0, "__Client_verification_event_rx_stream_drop");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 =
        _nativeStream(tmp4_1, _api.__clientVerificationEventRxStreamPoll);
    return tmp2;
  }

  /// Return the event handler of device changed
  Stream<DeviceChangedEvent>? deviceChangedEventRx() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientDeviceChangedEventRx(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 =
        _Box(_api, tmp4_0, "__Client_device_changed_event_rx_stream_drop");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 =
        _nativeStream(tmp4_1, _api.__clientDeviceChangedEventRxStreamPoll);
    return tmp2;
  }

  /// Return the event handler of device left
  Stream<DeviceLeftEvent>? deviceLeftEventRx() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientDeviceLeftEventRx(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 =
        _Box(_api, tmp4_0, "__Client_device_left_event_rx_stream_drop");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 =
        _nativeStream(tmp4_1, _api.__clientDeviceLeftEventRxStreamPoll);
    return tmp2;
  }

  /// Return the typing event receiver
  Stream<TypingEvent>? typingEventRx() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientTypingEventRx(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "__Client_typing_event_rx_stream_drop");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = _nativeStream(tmp4_1, _api.__clientTypingEventRxStreamPoll);
    return tmp2;
  }

  /// Return the receipt event receiver
  Stream<ReceiptEvent>? receiptEventRx() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientReceiptEventRx(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 = _Box(_api, tmp4_0, "__Client_receipt_event_rx_stream_drop");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 = _nativeStream(tmp4_1, _api.__clientReceiptEventRxStreamPoll);
    return tmp2;
  }

  /// Return the message receiver
  Stream<RoomMessage>? incomingMessageRx() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientIncomingMessageRx(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Void> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp4_1 =
        _Box(_api, tmp4_0, "__Client_incoming_message_rx_stream_drop");
    tmp4_1._finalizer = _api._registerFinalizer(tmp4_1);
    final tmp2 =
        _nativeStream(tmp4_1, _api.__clientIncomingMessageRxStreamPoll);
    return tmp2;
  }

  /// create default space
  Future<RoomId> createActerSpace(
    CreateSpaceSettings settings,
  ) {
    final tmp1 = settings;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1._box.move();
    final tmp3 = _api._clientCreateActerSpace(
      tmp0,
      tmp2,
    );
    final tmp5 = tmp3;
    final ffi.Pointer<ffi.Void> tmp5_0 = ffi.Pointer.fromAddress(tmp5);
    final tmp5_1 =
        _Box(_api, tmp5_0, "__Client_create_acter_space_future_drop");
    tmp5_1._finalizer = _api._registerFinalizer(tmp5_1);
    final tmp4 = _nativeFuture(tmp5_1, _api.__clientCreateActerSpaceFuturePoll);
    return tmp4;
  }

  /// listen to updates to any model key
  Stream<bool> subscribe(
    String key,
  ) {
    final tmp1 = key;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._clientSubscribe(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "__Client_subscribe_stream_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 = _nativeStream(tmp7_1, _api.__clientSubscribeStreamPoll);
    return tmp6;
  }

  /// Fetch the Comment or use its event_id to wait for it to come down the wire
  Future<Comment> waitForComment(
    String key,
    EfkDuration? timeout,
  ) {
    final tmp1 = key;
    final tmp5 = timeout;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp8 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    if (tmp5 == null) {
      tmp6 = 0;
    } else {
      tmp6 = 1;
      final tmp7 = tmp5;
      tmp8 = tmp7._box.move();
    }
    final tmp9 = _api._clientWaitForComment(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp8,
    );
    final tmp11 = tmp9;
    final ffi.Pointer<ffi.Void> tmp11_0 = ffi.Pointer.fromAddress(tmp11);
    final tmp11_1 =
        _Box(_api, tmp11_0, "__Client_wait_for_comment_future_drop");
    tmp11_1._finalizer = _api._registerFinalizer(tmp11_1);
    final tmp10 = _nativeFuture(tmp11_1, _api.__clientWaitForCommentFuturePoll);
    return tmp10;
  }

  /// Fetch the NewsEntry or use its event_id to wait for it to come down the wire
  Future<NewsEntry> waitForNews(
    String key,
    EfkDuration? timeout,
  ) {
    final tmp1 = key;
    final tmp5 = timeout;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp8 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    if (tmp5 == null) {
      tmp6 = 0;
    } else {
      tmp6 = 1;
      final tmp7 = tmp5;
      tmp8 = tmp7._box.move();
    }
    final tmp9 = _api._clientWaitForNews(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp8,
    );
    final tmp11 = tmp9;
    final ffi.Pointer<ffi.Void> tmp11_0 = ffi.Pointer.fromAddress(tmp11);
    final tmp11_1 = _Box(_api, tmp11_0, "__Client_wait_for_news_future_drop");
    tmp11_1._finalizer = _api._registerFinalizer(tmp11_1);
    final tmp10 = _nativeFuture(tmp11_1, _api.__clientWaitForNewsFuturePoll);
    return tmp10;
  }

  /// Get the latest News for the client
  Future<FfiListNewsEntry> latestNewsEntries(
    int count,
  ) {
    final tmp1 = count;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1;
    final tmp3 = _api._clientLatestNewsEntries(
      tmp0,
      tmp2,
    );
    final tmp5 = tmp3;
    final ffi.Pointer<ffi.Void> tmp5_0 = ffi.Pointer.fromAddress(tmp5);
    final tmp5_1 =
        _Box(_api, tmp5_0, "__Client_latest_news_entries_future_drop");
    tmp5_1._finalizer = _api._registerFinalizer(tmp5_1);
    final tmp4 =
        _nativeFuture(tmp5_1, _api.__clientLatestNewsEntriesFuturePoll);
    return tmp4;
  }

  /// Fetch the ActerPin or use its event_id to wait for it to come down the wire
  Future<ActerPin> waitForPin(
    String key,
    EfkDuration? timeout,
  ) {
    final tmp1 = key;
    final tmp5 = timeout;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp8 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    if (tmp5 == null) {
      tmp6 = 0;
    } else {
      tmp6 = 1;
      final tmp7 = tmp5;
      tmp8 = tmp7._box.move();
    }
    final tmp9 = _api._clientWaitForPin(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp8,
    );
    final tmp11 = tmp9;
    final ffi.Pointer<ffi.Void> tmp11_0 = ffi.Pointer.fromAddress(tmp11);
    final tmp11_1 = _Box(_api, tmp11_0, "__Client_wait_for_pin_future_drop");
    tmp11_1._finalizer = _api._registerFinalizer(tmp11_1);
    final tmp10 = _nativeFuture(tmp11_1, _api.__clientWaitForPinFuturePoll);
    return tmp10;
  }

  /// Get the Pins for the client
  Future<FfiListActerPin> pins() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientPins(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Client_pins_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__clientPinsFuturePoll);
    return tmp2;
  }

  /// Fetch the Tasklist or use its event_id to wait for it to come down the wire
  Future<TaskList> waitForTaskList(
    String key,
    EfkDuration? timeout,
  ) {
    final tmp1 = key;
    final tmp5 = timeout;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp8 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    if (tmp5 == null) {
      tmp6 = 0;
    } else {
      tmp6 = 1;
      final tmp7 = tmp5;
      tmp8 = tmp7._box.move();
    }
    final tmp9 = _api._clientWaitForTaskList(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp8,
    );
    final tmp11 = tmp9;
    final ffi.Pointer<ffi.Void> tmp11_0 = ffi.Pointer.fromAddress(tmp11);
    final tmp11_1 =
        _Box(_api, tmp11_0, "__Client_wait_for_task_list_future_drop");
    tmp11_1._finalizer = _api._registerFinalizer(tmp11_1);
    final tmp10 =
        _nativeFuture(tmp11_1, _api.__clientWaitForTaskListFuturePoll);
    return tmp10;
  }

  /// the Tasks lists for the client
  Future<FfiListTaskList> taskLists() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientTaskLists(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Client_task_lists_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__clientTaskListsFuturePoll);
    return tmp2;
  }

  /// Fetch the Task or use its event_id to wait for it to come down the wire
  Future<Task> waitForTask(
    String key,
    EfkDuration? timeout,
  ) {
    final tmp1 = key;
    final tmp5 = timeout;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    var tmp8 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    if (tmp5 == null) {
      tmp6 = 0;
    } else {
      tmp6 = 1;
      final tmp7 = tmp5;
      tmp8 = tmp7._box.move();
    }
    final tmp9 = _api._clientWaitForTask(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
      tmp8,
    );
    final tmp11 = tmp9;
    final ffi.Pointer<ffi.Void> tmp11_0 = ffi.Pointer.fromAddress(tmp11);
    final tmp11_1 = _Box(_api, tmp11_0, "__Client_wait_for_task_future_drop");
    tmp11_1._finalizer = _api._registerFinalizer(tmp11_1);
    final tmp10 = _nativeFuture(tmp11_1, _api.__clientWaitForTaskFuturePoll);
    return tmp10;
  }

  /// the Tasks list for the client
  Future<TaskList> taskList(
    String key,
  ) {
    final tmp1 = key;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._clientTaskList(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0, "__Client_task_list_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 = _nativeFuture(tmp7_1, _api.__clientTaskListFuturePoll);
    return tmp6;
  }

  /// get all calendar events
  Future<FfiListCalendarEvent> calendarEvents() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._clientCalendarEvents(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Client_calendar_events_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__clientCalendarEventsFuturePoll);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class DispName {
  final Api _api;
  final _Box _box;

  DispName._(this._api, this._box);

  /// get text
  String? text() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._dispNameText(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class UserProfile {
  final Api _api;
  final _Box _box;

  UserProfile._(this._api, this._box);

  /// get user id
  UserId userId() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._userProfileUserId(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_UserId");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = UserId._(_api, tmp3_1);
    return tmp2;
  }

  /// whether to have avatar
  Future<bool> hasAvatar() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._userProfileHasAvatar(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__UserProfile_has_avatar_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__userProfileHasAvatarFuturePoll);
    return tmp2;
  }

  /// get the binary data of avatar
  Future<FfiBufferUint8> getAvatar() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._userProfileGetAvatar(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__UserProfile_get_avatar_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__userProfileGetAvatarFuturePoll);
    return tmp2;
  }

  /// get the binary data of thumbnail
  Future<FfiBufferUint8> getThumbnail(
    int width,
    int height,
  ) {
    final tmp1 = width;
    final tmp3 = height;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1;
    tmp4 = tmp3;
    final tmp5 = _api._userProfileGetThumbnail(
      tmp0,
      tmp2,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 =
        _Box(_api, tmp7_0, "__UserProfile_get_thumbnail_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 =
        _nativeFuture(tmp7_1, _api.__userProfileGetThumbnailFuturePoll);
    return tmp6;
  }

  /// get the display name
  Future<DispName> getDisplayName() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._userProfileGetDisplayName(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 =
        _Box(_api, tmp3_0, "__UserProfile_get_display_name_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 =
        _nativeFuture(tmp3_1, _api.__userProfileGetDisplayNameFuturePoll);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class RoomProfile {
  final Api _api;
  final _Box _box;

  RoomProfile._(this._api, this._box);

  /// whether to have avatar
  bool hasAvatar() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomProfileHasAvatar(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    final tmp7 = tmp1.arg4;
    if (tmp3 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      final tmp3_0 = utf8.decode(tmp4_0.asTypedList(tmp5));
      if (tmp5 > 0) {
        final ffi.Pointer<ffi.Void> tmp4_0;
        tmp4_0 = ffi.Pointer.fromAddress(tmp4);
        _api.__deallocate(tmp4_0, tmp6, 1);
      }
      throw tmp3_0;
    }
    final tmp2 = tmp7 > 0;
    return tmp2;
  }

  /// get the binary data of avatar
  Future<FfiBufferUint8> getAvatar() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomProfileGetAvatar(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__RoomProfile_get_avatar_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__roomProfileGetAvatarFuturePoll);
    return tmp2;
  }

  /// get the binary data of thumbnail
  Future<FfiBufferUint8> getThumbnail(
    int width,
    int height,
  ) {
    final tmp1 = width;
    final tmp3 = height;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1;
    tmp4 = tmp3;
    final tmp5 = _api._roomProfileGetThumbnail(
      tmp0,
      tmp2,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 =
        _Box(_api, tmp7_0, "__RoomProfile_get_thumbnail_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 =
        _nativeFuture(tmp7_1, _api.__roomProfileGetThumbnailFuturePoll);
    return tmp6;
  }

  /// get the display name
  Future<DispName> getDisplayName() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._roomProfileGetDisplayName(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 =
        _Box(_api, tmp3_0, "__RoomProfile_get_display_name_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 =
        _nativeFuture(tmp3_1, _api.__roomProfileGetDisplayNameFuturePoll);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class Invitation {
  final Api _api;
  final _Box _box;

  Invitation._(this._api, this._box);

  /// get the timestamp of this invitation in milliseconds
  int? originServerTs() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._invitationOriginServerTs(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final tmp2 = tmp4;
    return tmp2;
  }

  /// get the room id of this invitation
  RoomId roomId() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._invitationRoomId(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_RoomId");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = RoomId._(_api, tmp3_1);
    return tmp2;
  }

  /// get the room name of this invitation
  Future<String> roomName() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._invitationRoomName(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Invitation_room_name_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__invitationRoomNameFuturePoll);
    return tmp2;
  }

  /// get the user id of this invitation sender
  UserId sender() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._invitationSender(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_UserId");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = UserId._(_api, tmp3_1);
    return tmp2;
  }

  /// get the user profile that contains avatar and display name
  UserProfile getSenderProfile() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._invitationGetSenderProfile(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_UserProfile");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = UserProfile._(_api, tmp3_1);
    return tmp2;
  }

  /// accept invitation about me to this room
  Future<bool> accept() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._invitationAccept(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Invitation_accept_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__invitationAcceptFuturePoll);
    return tmp2;
  }

  /// reject invitation about me to this room
  Future<bool> reject() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._invitationReject(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "__Invitation_reject_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(tmp3_1, _api.__invitationRejectFuturePoll);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class VerificationEvent {
  final Api _api;
  final _Box _box;

  VerificationEvent._(this._api, this._box);

  /// Get event type
  String eventType() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._verificationEventEventType(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// Get flow id (EventId or TransactionId)
  String? flowId() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._verificationEventFlowId(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// Get user id of event sender
  String sender() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._verificationEventSender(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// An error code for why the process/request was cancelled by the user.
  String? cancelCode() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._verificationEventCancelCode(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// A description for why the process/request was cancelled by the user.
  String? reason() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._verificationEventReason(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// Bob accepts the verification request from Alice
  Future<bool> acceptVerificationRequest() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._verificationEventAcceptVerificationRequest(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0,
        "__VerificationEvent_accept_verification_request_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(
        tmp3_1, _api.__verificationEventAcceptVerificationRequestFuturePoll);
    return tmp2;
  }

  /// Bob cancels the verification request from Alice
  Future<bool> cancelVerificationRequest() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._verificationEventCancelVerificationRequest(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0,
        "__VerificationEvent_cancel_verification_request_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(
        tmp3_1, _api.__verificationEventCancelVerificationRequestFuturePoll);
    return tmp2;
  }

  /// Bob accepts the verification request from Alice with specified methods
  Future<bool> acceptVerificationRequestWithMethods(
    FfiListFfiString methods,
  ) {
    final tmp1 = methods;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1._box.move();
    final tmp3 = _api._verificationEventAcceptVerificationRequestWithMethods(
      tmp0,
      tmp2,
    );
    final tmp5 = tmp3;
    final ffi.Pointer<ffi.Void> tmp5_0 = ffi.Pointer.fromAddress(tmp5);
    final tmp5_1 = _Box(_api, tmp5_0,
        "__VerificationEvent_accept_verification_request_with_methods_future_drop");
    tmp5_1._finalizer = _api._registerFinalizer(tmp5_1);
    final tmp4 = _nativeFuture(tmp5_1,
        _api.__verificationEventAcceptVerificationRequestWithMethodsFuturePoll);
    return tmp4;
  }

  /// Alice starts the SAS verification
  Future<bool> startSasVerification() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._verificationEventStartSasVerification(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(
        _api, tmp3_0, "__VerificationEvent_start_sas_verification_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(
        tmp3_1, _api.__verificationEventStartSasVerificationFuturePoll);
    return tmp2;
  }

  /// Whether verification request was launched from this device
  bool wasTriggeredFromThisDevice() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._verificationEventWasTriggeredFromThisDevice(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    final tmp7 = tmp1.arg4;
    if (tmp3 == 0) {
      final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      final tmp3_0 = utf8.decode(tmp4_0.asTypedList(tmp5));
      if (tmp5 > 0) {
        final ffi.Pointer<ffi.Void> tmp4_0;
        tmp4_0 = ffi.Pointer.fromAddress(tmp4);
        _api.__deallocate(tmp4_0, tmp6, 1);
      }
      throw tmp3_0;
    }
    final tmp2 = tmp7 > 0;
    return tmp2;
  }

  /// Bob accepts the SAS verification
  Future<bool> acceptSasVerification() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._verificationEventAcceptSasVerification(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0,
        "__VerificationEvent_accept_sas_verification_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(
        tmp3_1, _api.__verificationEventAcceptSasVerificationFuturePoll);
    return tmp2;
  }

  /// Bob cancels the SAS verification
  Future<bool> cancelSasVerification() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._verificationEventCancelSasVerification(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0,
        "__VerificationEvent_cancel_sas_verification_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(
        tmp3_1, _api.__verificationEventCancelSasVerificationFuturePoll);
    return tmp2;
  }

  /// Alice sends the verification key to Bob and vice versa
  Future<bool> sendVerificationKey() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._verificationEventSendVerificationKey(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(
        _api, tmp3_0, "__VerificationEvent_send_verification_key_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(
        tmp3_1, _api.__verificationEventSendVerificationKeyFuturePoll);
    return tmp2;
  }

  /// Alice cancels the verification key from Bob and vice versa
  Future<bool> cancelVerificationKey() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._verificationEventCancelVerificationKey(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0,
        "__VerificationEvent_cancel_verification_key_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(
        tmp3_1, _api.__verificationEventCancelVerificationKeyFuturePoll);
    return tmp2;
  }

  /// Alice gets the verification emoji from Bob and vice versa
  Future<FfiListVerificationEmoji> getVerificationEmoji() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._verificationEventGetVerificationEmoji(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(
        _api, tmp3_0, "__VerificationEvent_get_verification_emoji_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(
        tmp3_1, _api.__verificationEventGetVerificationEmojiFuturePoll);
    return tmp2;
  }

  /// Alice says to Bob that SAS verification matches and vice versa
  Future<bool> confirmSasVerification() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._verificationEventConfirmSasVerification(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0,
        "__VerificationEvent_confirm_sas_verification_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(
        tmp3_1, _api.__verificationEventConfirmSasVerificationFuturePoll);
    return tmp2;
  }

  /// Alice says to Bob that SAS verification doesn't match and vice versa
  Future<bool> mismatchSasVerification() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._verificationEventMismatchSasVerification(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0,
        "__VerificationEvent_mismatch_sas_verification_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(
        tmp3_1, _api.__verificationEventMismatchSasVerificationFuturePoll);
    return tmp2;
  }

  /// Alice and Bob reviews the AnyToDeviceEvent::KeyVerificationMac
  Future<bool> reviewVerificationMac() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._verificationEventReviewVerificationMac(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0,
        "__VerificationEvent_review_verification_mac_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(
        tmp3_1, _api.__verificationEventReviewVerificationMacFuturePoll);
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

class VerificationEmoji {
  final Api _api;
  final _Box _box;

  VerificationEmoji._(this._api, this._box);

  /// binary representation of emoji unicode
  int symbol() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._verificationEmojiSymbol(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3;
    return tmp2;
  }

  /// text description of emoji unicode
  String description() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._verificationEmojiDescription(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

/// Deliver receipt event from rust to flutter
class ReceiptEvent {
  final Api _api;
  final _Box _box;

  ReceiptEvent._(this._api, this._box);

  /// Get transaction id or flow id
  RoomId roomId() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._receiptEventRoomId(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_RoomId");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = RoomId._(_api, tmp3_1);
    return tmp2;
  }

  /// Get records
  FfiListReceiptRecord receiptRecords() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._receiptEventReceiptRecords(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_FfiListReceiptRecord");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp4 = FfiListReceiptRecord._(_api, tmp3_1);
    final tmp2 = tmp4;
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

/// Deliver receipt record from rust to flutter
class ReceiptRecord {
  final Api _api;
  final _Box _box;

  ReceiptRecord._(this._api, this._box);

  /// Get id of event that this user read message from peer
  String eventId() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._receiptRecordEventId(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// Get id of user that read this message
  String seenBy() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._receiptRecordSeenBy(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final ffi.Pointer<ffi.Uint8> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp2 = utf8.decode(tmp3_0.asTypedList(tmp4));
    if (tmp5 > 0) {
      final ffi.Pointer<ffi.Void> tmp3_0;
      tmp3_0 = ffi.Pointer.fromAddress(tmp3);
      _api.__deallocate(tmp3_0, tmp5 * 1, 1);
    }
    return tmp2;
  }

  /// Get time that this user read message from peer in milliseconds
  int? ts() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._receiptRecordTs(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final tmp2 = tmp4;
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

/// Deliver devices changed event from rust to flutter
class DeviceChangedEvent {
  final Api _api;
  final _Box _box;

  DeviceChangedEvent._(this._api, this._box);

  /// Get the device list, excluding verified ones
  Future<FfiListDeviceRecord> deviceRecords(
    bool verified,
  ) {
    final tmp1 = verified;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1 ? 1 : 0;
    final tmp3 = _api._deviceChangedEventDeviceRecords(
      tmp0,
      tmp2,
    );
    final tmp5 = tmp3;
    final ffi.Pointer<ffi.Void> tmp5_0 = ffi.Pointer.fromAddress(tmp5);
    final tmp5_1 =
        _Box(_api, tmp5_0, "__DeviceChangedEvent_device_records_future_drop");
    tmp5_1._finalizer = _api._registerFinalizer(tmp5_1);
    final tmp4 =
        _nativeFuture(tmp5_1, _api.__deviceChangedEventDeviceRecordsFuturePoll);
    return tmp4;
  }

  /// Request verification to any devices of user
  Future<bool> requestVerificationToUser() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._deviceChangedEventRequestVerificationToUser(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0,
        "__DeviceChangedEvent_request_verification_to_user_future_drop");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = _nativeFuture(
        tmp3_1, _api.__deviceChangedEventRequestVerificationToUserFuturePoll);
    return tmp2;
  }

  /// Request verification to specific device
  Future<bool> requestVerificationToDevice(
    String devId,
  ) {
    final tmp1 = devId;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    final tmp5 = _api._deviceChangedEventRequestVerificationToDevice(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
    );
    final tmp7 = tmp5;
    final ffi.Pointer<ffi.Void> tmp7_0 = ffi.Pointer.fromAddress(tmp7);
    final tmp7_1 = _Box(_api, tmp7_0,
        "__DeviceChangedEvent_request_verification_to_device_future_drop");
    tmp7_1._finalizer = _api._registerFinalizer(tmp7_1);
    final tmp6 = _nativeFuture(
        tmp7_1, _api.__deviceChangedEventRequestVerificationToDeviceFuturePoll);
    return tmp6;
  }

  /// Request verification to any devices of user with methods
  Future<bool> requestVerificationToUserWithMethods(
    FfiListFfiString methods,
  ) {
    final tmp1 = methods;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1._box.move();
    final tmp3 = _api._deviceChangedEventRequestVerificationToUserWithMethods(
      tmp0,
      tmp2,
    );
    final tmp5 = tmp3;
    final ffi.Pointer<ffi.Void> tmp5_0 = ffi.Pointer.fromAddress(tmp5);
    final tmp5_1 = _Box(_api, tmp5_0,
        "__DeviceChangedEvent_request_verification_to_user_with_methods_future_drop");
    tmp5_1._finalizer = _api._registerFinalizer(tmp5_1);
    final tmp4 = _nativeFuture(tmp5_1,
        _api.__deviceChangedEventRequestVerificationToUserWithMethodsFuturePoll);
    return tmp4;
  }

  /// Request verification to specific device with methods
  Future<bool> requestVerificationToDeviceWithMethods(
    String devId,
    FfiListFfiString methods,
  ) {
    final tmp1 = devId;
    final tmp5 = methods;
    var tmp0 = 0;
    var tmp2 = 0;
    var tmp3 = 0;
    var tmp4 = 0;
    var tmp6 = 0;
    tmp0 = _box.borrow();
    final tmp1_0 = utf8.encode(tmp1);
    tmp3 = tmp1_0.length;
    final ffi.Pointer<ffi.Uint8> tmp2_0 = _api.__allocate(tmp3 * 1, 1);
    final Uint8List tmp2_1 = tmp2_0.asTypedList(tmp3);
    tmp2_1.setAll(0, tmp1_0);
    tmp2 = tmp2_0.address;
    tmp4 = tmp3;
    tmp6 = tmp5._box.move();
    final tmp7 = _api._deviceChangedEventRequestVerificationToDeviceWithMethods(
      tmp0,
      tmp2,
      tmp3,
      tmp4,
      tmp6,
    );
    final tmp9 = tmp7;
    final ffi.Pointer<ffi.Void> tmp9_0 = ffi.Pointer.fromAddress(tmp9);
    final tmp9_1 = _Box(_api, tmp9_0,
        "__DeviceChangedEvent_request_verification_to_device_with_methods_future_drop");
    tmp9_1._finalizer = _api._registerFinalizer(tmp9_1);
    final tmp8 = _nativeFuture(tmp9_1,
        _api.__deviceChangedEventRequestVerificationToDeviceWithMethodsFuturePoll);
    return tmp8;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

/// Deliver devices left event from rust to flutter
class DeviceLeftEvent {
  final Api _api;
  final _Box _box;

  DeviceLeftEvent._(this._api, this._box);

  /// Get the device list, including deleted ones
  Future<FfiListDeviceRecord> deviceRecords(
    bool deleted,
  ) {
    final tmp1 = deleted;
    var tmp0 = 0;
    var tmp2 = 0;
    tmp0 = _box.borrow();
    tmp2 = tmp1 ? 1 : 0;
    final tmp3 = _api._deviceLeftEventDeviceRecords(
      tmp0,
      tmp2,
    );
    final tmp5 = tmp3;
    final ffi.Pointer<ffi.Void> tmp5_0 = ffi.Pointer.fromAddress(tmp5);
    final tmp5_1 =
        _Box(_api, tmp5_0, "__DeviceLeftEvent_device_records_future_drop");
    tmp5_1._finalizer = _api._registerFinalizer(tmp5_1);
    final tmp4 =
        _nativeFuture(tmp5_1, _api.__deviceLeftEventDeviceRecordsFuturePoll);
    return tmp4;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

/// Provide various device infos
class DeviceRecord {
  final Api _api;
  final _Box _box;

  DeviceRecord._(this._api, this._box);

  /// whether this device was verified
  bool verified() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._deviceRecordVerified(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3 > 0;
    return tmp2;
  }

  /// whether this device was deleted
  bool deleted() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._deviceRecordDeleted(
      tmp0,
    );
    final tmp3 = tmp1;
    final tmp2 = tmp3 > 0;
    return tmp2;
  }

  /// get the id of this device user
  UserId userId() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._deviceRecordUserId(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_UserId");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = UserId._(_api, tmp3_1);
    return tmp2;
  }

  /// get the id of this device
  DeviceId deviceId() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._deviceRecordDeviceId(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_DeviceId");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = DeviceId._(_api, tmp3_1);
    return tmp2;
  }

  /// get the display name of this device
  String? displayName() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._deviceRecordDisplayName(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// last seen ip of this device
  String? lastSeenIp() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._deviceRecordLastSeenIp(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    final tmp5 = tmp1.arg2;
    final tmp6 = tmp1.arg3;
    if (tmp3 == 0) {
      return null;
    }
    final ffi.Pointer<ffi.Uint8> tmp4_0 = ffi.Pointer.fromAddress(tmp4);
    final tmp2 = utf8.decode(tmp4_0.asTypedList(tmp5));
    if (tmp6 > 0) {
      final ffi.Pointer<ffi.Void> tmp4_0;
      tmp4_0 = ffi.Pointer.fromAddress(tmp4);
      _api.__deallocate(tmp4_0, tmp6 * 1, 1);
    }
    return tmp2;
  }

  /// last seen timestamp of this device in milliseconds
  int? lastSeenTs() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._deviceRecordLastSeenTs(
      tmp0,
    );
    final tmp3 = tmp1.arg0;
    final tmp4 = tmp1.arg1;
    if (tmp3 == 0) {
      return null;
    }
    final tmp2 = tmp4;
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

/// Deliver typing event from rust to flutter
class TypingEvent {
  final Api _api;
  final _Box _box;

  TypingEvent._(this._api, this._box);

  /// Get transaction id or flow id
  RoomId roomId() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._typingEventRoomId(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_RoomId");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp2 = RoomId._(_api, tmp3_1);
    return tmp2;
  }

  /// Get list of user id
  FfiListUserId userIds() {
    var tmp0 = 0;
    tmp0 = _box.borrow();
    final tmp1 = _api._typingEventUserIds(
      tmp0,
    );
    final tmp3 = tmp1;
    final ffi.Pointer<ffi.Void> tmp3_0 = ffi.Pointer.fromAddress(tmp3);
    final tmp3_1 = _Box(_api, tmp3_0, "drop_box_FfiListUserId");
    tmp3_1._finalizer = _api._registerFinalizer(tmp3_1);
    final tmp4 = FfiListUserId._(_api, tmp3_1);
    final tmp2 = tmp4;
    return tmp2;
  }

  /// Manually drops the object and unregisters the FinalizableHandle.
  void drop() {
    _box.drop();
  }
}

enum RelationTargetTypeTag {
  Unknown,
  ChatRoom,
  Space,
  ActerSpace,
}

class RelationTargetType {
  final Api _api;
  final _Box _box;

  RelationTargetTypeTag? _tag;
  Object? _inner;

  void destructureSelf() {
    final parts = this._api._destructureRelationTargetType(this._box.borrow());
    switch (parts.tag) {
      case 0:
        this._tag = RelationTargetTypeTag.Unknown;

        break;
      case 1:
        this._tag = RelationTargetTypeTag.ChatRoom;

        break;
      case 2:
        this._tag = RelationTargetTypeTag.Space;

        break;
      case 3:
        this._tag = RelationTargetTypeTag.ActerSpace;

        break;
      default:
        throw new StateError(
            "Destructuring enum gave back an invalid tag: ${parts.tag}");
    }
  }

  /// The tag of this enum object
  RelationTargetTypeTag get tag {
    if (_tag == null) {
      destructureSelf();
    }
    return _tag!;
  }

  /// The data contained inside this enum object. You will need
  /// to cast it to the correct type based on the value of tag
  Object? get inner {
    if (_inner == null) {
      destructureSelf();
    }
    return _inner;
  }

  RelationTargetType._(this._api, this._box);
}

class _InitLoggingReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _RotateLogFileReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Int64()
  external int arg4;
  @ffi.Uint64()
  external int arg5;
  @ffi.Uint64()
  external int arg6;
}

class _WriteLogReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _EfkColorRgbaU8Return extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Uint8()
  external int arg2;
  @ffi.Uint8()
  external int arg3;
}

class _UtcDateTimeToRfc2822Return extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _UtcDateTimeToRfc3339Return extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _RefDetailsTargetIdStrReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _RefDetailsRoomIdStrReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _RefDetailsTypeStrReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _RefDetailsEmbedActionStrReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _RefDetailsTaskListIdStrReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _RefDetailsTitleReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _RefDetailsUriReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _ObjRefPositionStrReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _ColorizeColorReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _ColorizeBackgroundReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _NewsSlideTypeStrReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _NewsSlideTextReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _NewsSlideImageDescReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _NewsSlideAudioDescReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _NewsSlideVideoDescReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _NewsSlideFileDescReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _NewsEntryGetSlideReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _NewsEntryColorsReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _TagTitleReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _TagHashTagReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _TagColorReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _ActerPinTitleReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _ActerPinContentTextReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _ActerPinUrlReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _ActerPinColorReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _ActerPinUpdateBuilderReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Int64()
  external int arg4;
}

class _TextMessageContentBodyReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _TextMessageContentFormattedReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _CalendarEventTitleReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _CalendarEventDescriptionReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _MediaSourceUrlReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _ThumbnailInfoMimetypeReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _ThumbnailInfoSizeReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint32()
  external int arg1;
}

class _ThumbnailInfoWidthReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint32()
  external int arg1;
}

class _ThumbnailInfoHeightReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint32()
  external int arg1;
}

class _DeviceIdToStringReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _EventIdToStringReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _MxcUriToStringReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _RoomIdToStringReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _UserIdToStringReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _RoomEventItemEventIdReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _RoomEventItemSenderReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _RoomEventItemEventTypeReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _RoomEventItemSubTypeReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _RoomEventItemTextDescReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _RoomEventItemImageDescReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _RoomEventItemAudioDescReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _RoomEventItemVideoDescReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _RoomEventItemFileDescReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _RoomEventItemInReplyToReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _RoomEventItemReactionDescReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _RoomVirtualItemEventTypeReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _RoomVirtualItemDescReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _RoomMessageItemTypeReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _RoomMessageEventItemReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _RoomMessageVirtualItemReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _TextDescBodyReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _TextDescFormattedBodyReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _ImageDescNameReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _ImageDescMimetypeReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _ImageDescSizeReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint32()
  external int arg1;
}

class _ImageDescWidthReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint32()
  external int arg1;
}

class _ImageDescHeightReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint32()
  external int arg1;
}

class _ImageDescThumbnailInfoReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _ImageDescThumbnailSourceReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _AudioDescNameReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _AudioDescMimetypeReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _AudioDescSizeReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint32()
  external int arg1;
}

class _AudioDescDurationReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint32()
  external int arg1;
}

class _VideoDescNameReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _VideoDescMimetypeReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _VideoDescSizeReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint32()
  external int arg1;
}

class _VideoDescWidthReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint32()
  external int arg1;
}

class _VideoDescHeightReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint32()
  external int arg1;
}

class _VideoDescBlurhashReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _VideoDescDurationReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint32()
  external int arg1;
}

class _VideoDescThumbnailInfoReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _VideoDescThumbnailSourceReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _FileDescNameReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _FileDescMimetypeReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _FileDescSizeReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint32()
  external int arg1;
}

class _FileDescThumbnailInfoReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _FileDescThumbnailSourceReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _TimelineDiffActionReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _TimelineDiffValuesReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _TimelineDiffIndexReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
}

class _TimelineDiffValueReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _ConversationTopicReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _ConversationLatestMessageReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _ConversationRoomTypeReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _CommentContentTextReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _CommentContentFormattedReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _TaskTitleReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _TaskDescriptionTextReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _TaskPriorityReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
}

class _TaskUtcDueReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _TaskUtcStartReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _TaskColorReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _TaskProgressPercentReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
}

class _TaskUpdateBuilderReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Int64()
  external int arg4;
}

class _TaskUpdateBuilderUtcDueFromRfc3339Return extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _TaskUpdateBuilderUtcDueFromRfc2822Return extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _TaskUpdateBuilderUtcDueFromFormatReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _TaskUpdateBuilderUtcStartFromRfc3339Return extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _TaskUpdateBuilderUtcStartFromRfc2822Return extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _TaskUpdateBuilderUtcStartFromFormatReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _TaskDraftUtcDueFromRfc3339Return extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _TaskDraftUtcDueFromRfc2822Return extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _TaskDraftUtcDueFromFormatReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _TaskDraftUtcStartFromRfc3339Return extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _TaskDraftUtcStartFromRfc2822Return extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _TaskDraftUtcStartFromFormatReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _TaskListNameReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _TaskListDescriptionTextReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _TaskListRoleReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _TaskListColorReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _TaskListTimeZoneReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _TaskListTaskBuilderReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Int64()
  external int arg4;
}

class _TaskListUpdateBuilderReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Int64()
  external int arg4;
}

class _SpaceRelationTargetTypeReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _SpaceRelationsMainParentReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _SpaceTopicReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _SpaceTaskListDraftReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Int64()
  external int arg4;
}

class _SpaceNewsDraftReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Int64()
  external int arg4;
}

class _SpacePinDraftReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Int64()
  external int arg4;
}

class _SyncStateFirstSyncedRxReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _ClientAccountReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Int64()
  external int arg4;
}

class _ClientDeviceIdReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Int64()
  external int arg4;
}

class _ClientUserIdReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Int64()
  external int arg4;
}

class _ClientGetUserProfileReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Int64()
  external int arg4;
}

class _ClientVerificationEventRxReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _ClientDeviceChangedEventRxReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _ClientDeviceLeftEventRxReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _ClientTypingEventRxReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _ClientReceiptEventRxReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _ClientIncomingMessageRxReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _DispNameTextReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _RoomProfileHasAvatarReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint8()
  external int arg4;
}

class _InvitationOriginServerTsReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
}

class _VerificationEventEventTypeReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _VerificationEventFlowIdReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _VerificationEventSenderReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _VerificationEventCancelCodeReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _VerificationEventReasonReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _VerificationEventWasTriggeredFromThisDeviceReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint8()
  external int arg4;
}

class _VerificationEmojiDescriptionReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _ReceiptRecordEventIdReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _ReceiptRecordSeenByReturn extends ffi.Struct {
  @ffi.Int64()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
}

class _ReceiptRecordTsReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
}

class _DeviceRecordDisplayNameReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _DeviceRecordLastSeenIpReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
  @ffi.Uint64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
}

class _DeviceRecordLastSeenTsReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint64()
  external int arg1;
}

class _LoginNewClientFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _LoginWithTokenFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _GuestClientFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _RegisterWithTokenFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _NewsSlideImageBinaryFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _NewsSlideAudioBinaryFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _NewsSlideVideoBinaryFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _NewsSlideFileBinaryFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _NewsEntryDraftSendFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _NewsEntryUpdateBuilderSendFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _PinDraftSendFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ActerPinRefreshFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _PinUpdateBuilderSendFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _TimelineStreamNextFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _TimelineStreamPaginateBackwardsFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _TimelineStreamEditFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _ConversationActiveMembersFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationGetMemberFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationTimelineStreamFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationTypingNoticeFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _ConversationReadReceiptFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _ConversationSendPlainMessageFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationSendFormattedMessageFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationSendReactionFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationSendImageMessageFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationImageBinaryFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationSendAudioMessageFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationAudioBinaryFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationSendVideoMessageFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationVideoBinaryFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationSendFileMessageFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationFileBinaryFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationInviteUserFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _ConversationJoinFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _ConversationLeaveFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _ConversationGetInviteesFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationDownloadMediaFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
  @ffi.Uint64()
  external int arg6;
  @ffi.Uint64()
  external int arg7;
}

class _ConversationMediaPathFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
  @ffi.Uint64()
  external int arg6;
  @ffi.Uint64()
  external int arg7;
}

class _ConversationUserReceiptsFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationIsEncryptedFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _ConversationGetMessageFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationSendTextReplyFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationSendImageReplyFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationSendAudioReplyFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationSendVideoReplyFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationSendFileReplyFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationRedactMessageFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ConversationUpdatePowerLevelFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _CommentDraftSendFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _CommentsManagerCommentsFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _TaskRefreshFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _TaskCommentsFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _TaskUpdateBuilderSendFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _TaskDraftSendFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _TaskListTasksFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _TaskListRefreshFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _TaskListDraftSendFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _TaskListUpdateBuilderSendFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _SpaceSpaceRelationsFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _SpaceActiveMembersFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _SpaceGetMemberFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _SpaceIsEncryptedFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _SpaceTaskListsFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _SpaceTaskListFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _SpaceLatestNewsEntriesFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _SpaceCalendarEventsFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _SpacePinsFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _SpacePinnedLinksFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _SpaceSendImageMessageFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _SpaceImageBinaryFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _SpaceSendAudioMessageFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _SpaceAudioBinaryFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _SpaceSendVideoMessageFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _SpaceVideoBinaryFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _SpaceSendFileMessageFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _SpaceFileBinaryFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _AccountDisplayNameFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
  @ffi.Uint64()
  external int arg6;
  @ffi.Uint64()
  external int arg7;
}

class _AccountSetDisplayNameFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _AccountAvatarFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _AccountSetAvatarFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ClientRestoreTokenFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
  @ffi.Uint64()
  external int arg6;
  @ffi.Uint64()
  external int arg7;
}

class _ClientConversationFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ClientConversationsFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ClientSpacesFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ClientGetSpaceFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ClientPinnedLinksFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ClientSuggestedUsersToInviteFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ClientVerifiedDeviceFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _ClientLogoutFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _ClientCreateActerSpaceFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ClientWaitForCommentFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ClientWaitForNewsFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ClientLatestNewsEntriesFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ClientWaitForPinFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ClientPinsFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ClientWaitForTaskListFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ClientTaskListsFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ClientWaitForTaskFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ClientTaskListFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _ClientCalendarEventsFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _UserProfileHasAvatarFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _UserProfileGetAvatarFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _UserProfileGetThumbnailFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _UserProfileGetDisplayNameFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _RoomProfileGetAvatarFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _RoomProfileGetThumbnailFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _RoomProfileGetDisplayNameFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _InvitationRoomNameFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
  @ffi.Uint64()
  external int arg6;
  @ffi.Uint64()
  external int arg7;
}

class _InvitationAcceptFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _InvitationRejectFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _VerificationEventAcceptVerificationRequestFuturePollReturn
    extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _VerificationEventCancelVerificationRequestFuturePollReturn
    extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _VerificationEventAcceptVerificationRequestWithMethodsFuturePollReturn
    extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _VerificationEventStartSasVerificationFuturePollReturn
    extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _VerificationEventAcceptSasVerificationFuturePollReturn
    extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _VerificationEventCancelSasVerificationFuturePollReturn
    extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _VerificationEventSendVerificationKeyFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _VerificationEventCancelVerificationKeyFuturePollReturn
    extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _VerificationEventGetVerificationEmojiFuturePollReturn
    extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _VerificationEventConfirmSasVerificationFuturePollReturn
    extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _VerificationEventMismatchSasVerificationFuturePollReturn
    extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _VerificationEventReviewVerificationMacFuturePollReturn
    extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _DeviceChangedEventDeviceRecordsFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _DeviceChangedEventRequestVerificationToUserFuturePollReturn
    extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _DeviceChangedEventRequestVerificationToDeviceFuturePollReturn
    extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _DeviceChangedEventRequestVerificationToUserWithMethodsFuturePollReturn
    extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _DeviceChangedEventRequestVerificationToDeviceWithMethodsFuturePollReturn
    extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Uint8()
  external int arg5;
}

class _DeviceLeftEventDeviceRecordsFuturePollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
  @ffi.Int64()
  external int arg2;
  @ffi.Uint64()
  external int arg3;
  @ffi.Uint64()
  external int arg4;
  @ffi.Int64()
  external int arg5;
}

class _TimelineStreamDiffRxStreamPollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _SyncStateFirstSyncedRxStreamPollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
}

class _ClientConversationsRxStreamPollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _ClientInvitationsRxStreamPollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _ClientVerificationEventRxStreamPollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _ClientDeviceChangedEventRxStreamPollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _ClientDeviceLeftEventRxStreamPollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _ClientTypingEventRxStreamPollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _ClientReceiptEventRxStreamPollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _ClientIncomingMessageRxStreamPollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Int64()
  external int arg1;
}

class _ClientSubscribeStreamPollReturn extends ffi.Struct {
  @ffi.Uint8()
  external int arg0;
  @ffi.Uint8()
  external int arg1;
}

class FfiListAccount extends Iterable<Account>
    implements CustomIterable<Account> {
  final Api _api;
  final _Box _box;

  FfiListAccount._(this._api, this._box);

  @override
  Iterator<Account> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListAccountLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  Account elementAt(int index) {
    final address = _api._ffiListAccountElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return Account._(_api, reference);
  }

  Account operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  Account remove(int index) {
    final address = _api._ffiListAccountRemove(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_Account");
    reference._finalizer = _api._registerFinalizer(reference);
    return Account._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(Account element) {
    _api._ffiListAccountAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, Account element) {
    _api._ffiListAccountInsert(_box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}

class FfiListActerPin extends Iterable<ActerPin>
    implements CustomIterable<ActerPin> {
  final Api _api;
  final _Box _box;

  FfiListActerPin._(this._api, this._box);

  @override
  Iterator<ActerPin> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListActerPinLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  ActerPin elementAt(int index) {
    final address = _api._ffiListActerPinElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return ActerPin._(_api, reference);
  }

  ActerPin operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  ActerPin remove(int index) {
    final address = _api._ffiListActerPinRemove(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_ActerPin");
    reference._finalizer = _api._registerFinalizer(reference);
    return ActerPin._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(ActerPin element) {
    _api._ffiListActerPinAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, ActerPin element) {
    _api._ffiListActerPinInsert(_box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}

class FfiListCalendarEvent extends Iterable<CalendarEvent>
    implements CustomIterable<CalendarEvent> {
  final Api _api;
  final _Box _box;

  FfiListCalendarEvent._(this._api, this._box);

  @override
  Iterator<CalendarEvent> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListCalendarEventLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  CalendarEvent elementAt(int index) {
    final address = _api._ffiListCalendarEventElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return CalendarEvent._(_api, reference);
  }

  CalendarEvent operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  CalendarEvent remove(int index) {
    final address = _api._ffiListCalendarEventRemove(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_CalendarEvent");
    reference._finalizer = _api._registerFinalizer(reference);
    return CalendarEvent._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(CalendarEvent element) {
    _api._ffiListCalendarEventAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, CalendarEvent element) {
    _api._ffiListCalendarEventInsert(
        _box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}

class FfiListComment extends Iterable<Comment>
    implements CustomIterable<Comment> {
  final Api _api;
  final _Box _box;

  FfiListComment._(this._api, this._box);

  @override
  Iterator<Comment> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListCommentLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  Comment elementAt(int index) {
    final address = _api._ffiListCommentElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return Comment._(_api, reference);
  }

  Comment operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  Comment remove(int index) {
    final address = _api._ffiListCommentRemove(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_Comment");
    reference._finalizer = _api._registerFinalizer(reference);
    return Comment._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(Comment element) {
    _api._ffiListCommentAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, Comment element) {
    _api._ffiListCommentInsert(_box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}

class FfiListConversation extends Iterable<Conversation>
    implements CustomIterable<Conversation> {
  final Api _api;
  final _Box _box;

  FfiListConversation._(this._api, this._box);

  @override
  Iterator<Conversation> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListConversationLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  Conversation elementAt(int index) {
    final address = _api._ffiListConversationElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return Conversation._(_api, reference);
  }

  Conversation operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  Conversation remove(int index) {
    final address = _api._ffiListConversationRemove(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_Conversation");
    reference._finalizer = _api._registerFinalizer(reference);
    return Conversation._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(Conversation element) {
    _api._ffiListConversationAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, Conversation element) {
    _api._ffiListConversationInsert(
        _box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}

class FfiListDeviceRecord extends Iterable<DeviceRecord>
    implements CustomIterable<DeviceRecord> {
  final Api _api;
  final _Box _box;

  FfiListDeviceRecord._(this._api, this._box);

  @override
  Iterator<DeviceRecord> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListDeviceRecordLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  DeviceRecord elementAt(int index) {
    final address = _api._ffiListDeviceRecordElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return DeviceRecord._(_api, reference);
  }

  DeviceRecord operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  DeviceRecord remove(int index) {
    final address = _api._ffiListDeviceRecordRemove(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_DeviceRecord");
    reference._finalizer = _api._registerFinalizer(reference);
    return DeviceRecord._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(DeviceRecord element) {
    _api._ffiListDeviceRecordAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, DeviceRecord element) {
    _api._ffiListDeviceRecordInsert(
        _box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}

class FfiListFfiString extends Iterable<FfiString>
    implements CustomIterable<FfiString> {
  final Api _api;
  final _Box _box;

  FfiListFfiString._(this._api, this._box);

  @override
  Iterator<FfiString> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListFfiStringLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  FfiString elementAt(int index) {
    final address = _api._ffiListFfiStringElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return FfiString._(_api, reference);
  }

  FfiString operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  FfiString remove(int index) {
    final address = _api._ffiListFfiStringRemove(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_FfiString");
    reference._finalizer = _api._registerFinalizer(reference);
    return FfiString._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(FfiString element) {
    _api._ffiListFfiStringAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, FfiString element) {
    _api._ffiListFfiStringInsert(_box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}

class FfiListInvitation extends Iterable<Invitation>
    implements CustomIterable<Invitation> {
  final Api _api;
  final _Box _box;

  FfiListInvitation._(this._api, this._box);

  @override
  Iterator<Invitation> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListInvitationLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  Invitation elementAt(int index) {
    final address = _api._ffiListInvitationElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return Invitation._(_api, reference);
  }

  Invitation operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  Invitation remove(int index) {
    final address = _api._ffiListInvitationRemove(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_Invitation");
    reference._finalizer = _api._registerFinalizer(reference);
    return Invitation._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(Invitation element) {
    _api._ffiListInvitationAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, Invitation element) {
    _api._ffiListInvitationInsert(_box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}

class FfiListMember extends Iterable<Member> implements CustomIterable<Member> {
  final Api _api;
  final _Box _box;

  FfiListMember._(this._api, this._box);

  @override
  Iterator<Member> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListMemberLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  Member elementAt(int index) {
    final address = _api._ffiListMemberElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return Member._(_api, reference);
  }

  Member operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  Member remove(int index) {
    final address = _api._ffiListMemberRemove(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_Member");
    reference._finalizer = _api._registerFinalizer(reference);
    return Member._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(Member element) {
    _api._ffiListMemberAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, Member element) {
    _api._ffiListMemberInsert(_box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}

class FfiListNewsEntry extends Iterable<NewsEntry>
    implements CustomIterable<NewsEntry> {
  final Api _api;
  final _Box _box;

  FfiListNewsEntry._(this._api, this._box);

  @override
  Iterator<NewsEntry> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListNewsEntryLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  NewsEntry elementAt(int index) {
    final address = _api._ffiListNewsEntryElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return NewsEntry._(_api, reference);
  }

  NewsEntry operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  NewsEntry remove(int index) {
    final address = _api._ffiListNewsEntryRemove(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_NewsEntry");
    reference._finalizer = _api._registerFinalizer(reference);
    return NewsEntry._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(NewsEntry element) {
    _api._ffiListNewsEntryAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, NewsEntry element) {
    _api._ffiListNewsEntryInsert(_box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}

class FfiListNewsSlide extends Iterable<NewsSlide>
    implements CustomIterable<NewsSlide> {
  final Api _api;
  final _Box _box;

  FfiListNewsSlide._(this._api, this._box);

  @override
  Iterator<NewsSlide> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListNewsSlideLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  NewsSlide elementAt(int index) {
    final address = _api._ffiListNewsSlideElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return NewsSlide._(_api, reference);
  }

  NewsSlide operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  NewsSlide remove(int index) {
    final address = _api._ffiListNewsSlideRemove(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_NewsSlide");
    reference._finalizer = _api._registerFinalizer(reference);
    return NewsSlide._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(NewsSlide element) {
    _api._ffiListNewsSlideAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, NewsSlide element) {
    _api._ffiListNewsSlideInsert(_box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}

class FfiListObjRef extends Iterable<ObjRef> implements CustomIterable<ObjRef> {
  final Api _api;
  final _Box _box;

  FfiListObjRef._(this._api, this._box);

  @override
  Iterator<ObjRef> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListObjRefLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  ObjRef elementAt(int index) {
    final address = _api._ffiListObjRefElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return ObjRef._(_api, reference);
  }

  ObjRef operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  ObjRef remove(int index) {
    final address = _api._ffiListObjRefRemove(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_ObjRef");
    reference._finalizer = _api._registerFinalizer(reference);
    return ObjRef._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(ObjRef element) {
    _api._ffiListObjRefAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, ObjRef element) {
    _api._ffiListObjRefInsert(_box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}

class FfiListReceiptRecord extends Iterable<ReceiptRecord>
    implements CustomIterable<ReceiptRecord> {
  final Api _api;
  final _Box _box;

  FfiListReceiptRecord._(this._api, this._box);

  @override
  Iterator<ReceiptRecord> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListReceiptRecordLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  ReceiptRecord elementAt(int index) {
    final address = _api._ffiListReceiptRecordElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return ReceiptRecord._(_api, reference);
  }

  ReceiptRecord operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  ReceiptRecord remove(int index) {
    final address = _api._ffiListReceiptRecordRemove(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_ReceiptRecord");
    reference._finalizer = _api._registerFinalizer(reference);
    return ReceiptRecord._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(ReceiptRecord element) {
    _api._ffiListReceiptRecordAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, ReceiptRecord element) {
    _api._ffiListReceiptRecordInsert(
        _box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}

class FfiListRoomMessage extends Iterable<RoomMessage>
    implements CustomIterable<RoomMessage> {
  final Api _api;
  final _Box _box;

  FfiListRoomMessage._(this._api, this._box);

  @override
  Iterator<RoomMessage> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListRoomMessageLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  RoomMessage elementAt(int index) {
    final address = _api._ffiListRoomMessageElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return RoomMessage._(_api, reference);
  }

  RoomMessage operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  RoomMessage remove(int index) {
    final address = _api._ffiListRoomMessageRemove(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_RoomMessage");
    reference._finalizer = _api._registerFinalizer(reference);
    return RoomMessage._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(RoomMessage element) {
    _api._ffiListRoomMessageAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, RoomMessage element) {
    _api._ffiListRoomMessageInsert(_box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}

class FfiListSpace extends Iterable<Space> implements CustomIterable<Space> {
  final Api _api;
  final _Box _box;

  FfiListSpace._(this._api, this._box);

  @override
  Iterator<Space> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListSpaceLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  Space elementAt(int index) {
    final address = _api._ffiListSpaceElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return Space._(_api, reference);
  }

  Space operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  Space remove(int index) {
    final address = _api._ffiListSpaceRemove(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_Space");
    reference._finalizer = _api._registerFinalizer(reference);
    return Space._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(Space element) {
    _api._ffiListSpaceAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, Space element) {
    _api._ffiListSpaceInsert(_box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}

class FfiListSpaceRelation extends Iterable<SpaceRelation>
    implements CustomIterable<SpaceRelation> {
  final Api _api;
  final _Box _box;

  FfiListSpaceRelation._(this._api, this._box);

  @override
  Iterator<SpaceRelation> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListSpaceRelationLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  SpaceRelation elementAt(int index) {
    final address = _api._ffiListSpaceRelationElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return SpaceRelation._(_api, reference);
  }

  SpaceRelation operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  SpaceRelation remove(int index) {
    final address = _api._ffiListSpaceRelationRemove(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_SpaceRelation");
    reference._finalizer = _api._registerFinalizer(reference);
    return SpaceRelation._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(SpaceRelation element) {
    _api._ffiListSpaceRelationAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, SpaceRelation element) {
    _api._ffiListSpaceRelationInsert(
        _box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}

class FfiListTask extends Iterable<Task> implements CustomIterable<Task> {
  final Api _api;
  final _Box _box;

  FfiListTask._(this._api, this._box);

  @override
  Iterator<Task> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListTaskLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  Task elementAt(int index) {
    final address = _api._ffiListTaskElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return Task._(_api, reference);
  }

  Task operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  Task remove(int index) {
    final address = _api._ffiListTaskRemove(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_Task");
    reference._finalizer = _api._registerFinalizer(reference);
    return Task._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(Task element) {
    _api._ffiListTaskAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, Task element) {
    _api._ffiListTaskInsert(_box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}

class FfiListTaskList extends Iterable<TaskList>
    implements CustomIterable<TaskList> {
  final Api _api;
  final _Box _box;

  FfiListTaskList._(this._api, this._box);

  @override
  Iterator<TaskList> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListTaskListLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  TaskList elementAt(int index) {
    final address = _api._ffiListTaskListElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return TaskList._(_api, reference);
  }

  TaskList operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  TaskList remove(int index) {
    final address = _api._ffiListTaskListRemove(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_TaskList");
    reference._finalizer = _api._registerFinalizer(reference);
    return TaskList._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(TaskList element) {
    _api._ffiListTaskListAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, TaskList element) {
    _api._ffiListTaskListInsert(_box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}

class FfiListUserId extends Iterable<UserId> implements CustomIterable<UserId> {
  final Api _api;
  final _Box _box;

  FfiListUserId._(this._api, this._box);

  @override
  Iterator<UserId> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListUserIdLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  UserId elementAt(int index) {
    final address = _api._ffiListUserIdElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return UserId._(_api, reference);
  }

  UserId operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  UserId remove(int index) {
    final address = _api._ffiListUserIdRemove(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_UserId");
    reference._finalizer = _api._registerFinalizer(reference);
    return UserId._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(UserId element) {
    _api._ffiListUserIdAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, UserId element) {
    _api._ffiListUserIdInsert(_box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}

class FfiListUserProfile extends Iterable<UserProfile>
    implements CustomIterable<UserProfile> {
  final Api _api;
  final _Box _box;

  FfiListUserProfile._(this._api, this._box);

  @override
  Iterator<UserProfile> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListUserProfileLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  UserProfile elementAt(int index) {
    final address = _api._ffiListUserProfileElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return UserProfile._(_api, reference);
  }

  UserProfile operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  UserProfile remove(int index) {
    final address = _api._ffiListUserProfileRemove(_box.borrow(), index);
    final reference =
        _Box(_api, ffi.Pointer.fromAddress(address), "drop_box_UserProfile");
    reference._finalizer = _api._registerFinalizer(reference);
    return UserProfile._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(UserProfile element) {
    _api._ffiListUserProfileAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, UserProfile element) {
    _api._ffiListUserProfileInsert(_box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}

class FfiListVerificationEmoji extends Iterable<VerificationEmoji>
    implements CustomIterable<VerificationEmoji> {
  final Api _api;
  final _Box _box;

  FfiListVerificationEmoji._(this._api, this._box);

  @override
  Iterator<VerificationEmoji> get iterator => CustomIterator(this);

  @override
  int get length {
    return _api._ffiListVerificationEmojiLen(_box.borrow());
  }

  ///List object owns the elements, and objects returned by this method hold onto the list object ensuring the pointed to element isn/t dropped.
  @override
  VerificationEmoji elementAt(int index) {
    final address =
        _api._ffiListVerificationEmojiElementAt(_box.borrow(), index);
    final reference = _Box(
      _api,
      ffi.Pointer.fromAddress(address),
      "drop_box_Leak",
      context: this,
    );
    return VerificationEmoji._(_api, reference);
  }

  VerificationEmoji operator [](int index) {
    return elementAt(index);
  }

  /// Moves the element out of this list and returns it
  VerificationEmoji remove(int index) {
    final address = _api._ffiListVerificationEmojiRemove(_box.borrow(), index);
    final reference = _Box(
        _api, ffi.Pointer.fromAddress(address), "drop_box_VerificationEmoji");
    reference._finalizer = _api._registerFinalizer(reference);
    return VerificationEmoji._(_api, reference);
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void add(VerificationEmoji element) {
    _api._ffiListVerificationEmojiAdd(_box.borrow(), element._box.borrow());
    element._box.move();
  }

  ///The inserted element is moved into the list and must not be used again
  ///Although you can use the "elementAt" method to get a reference to the added element
  void insert(int index, VerificationEmoji element) {
    _api._ffiListVerificationEmojiInsert(
        _box.borrow(), index, element._box.borrow());
    element._box.move();
  }

  void drop() {
    _box.drop();
  }
}
