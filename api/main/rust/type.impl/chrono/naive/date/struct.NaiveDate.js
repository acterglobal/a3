(function() {var type_impls = {
"acter_core":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NaiveDate\" class=\"impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#216\">source</a><a href=\"#impl-NaiveDate\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ymd\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#259\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.from_ymd\" class=\"fn\">from_ymd</a>(year: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, month: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, day: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.4.23: use <code>from_ymd_opt()</code> instead</span></div></span></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDate</code> from the <a href=\"#calendar-date\">calendar date</a>\n(year, month and day).</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the specified calendar day does not exist, on invalid values for <code>month</code> or <code>day</code>,\nor if <code>year</code> is out of range for <code>NaiveDate</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ymd_opt\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#288\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.from_ymd_opt\" class=\"fn\">from_ymd_opt</a>(year: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, month: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, day: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDate</code> from the <a href=\"#calendar-date\">calendar date</a>\n(year, month and day).</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns <code>None</code> if:</p>\n<ul>\n<li>The specified calendar day does not exist (for example 2023-04-31).</li>\n<li>The value for <code>month</code> or <code>day</code> is invalid.</li>\n<li><code>year</code> is out of range for <code>NaiveDate</code>.</li>\n</ul>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::NaiveDate;\n\n<span class=\"kw\">let </span>from_ymd_opt = NaiveDate::from_ymd_opt;\n\n<span class=\"macro\">assert!</span>(from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">3</span>, <span class=\"number\">14</span>).is_some());\n<span class=\"macro\">assert!</span>(from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">0</span>, <span class=\"number\">14</span>).is_none());\n<span class=\"macro\">assert!</span>(from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">2</span>, <span class=\"number\">29</span>).is_none());\n<span class=\"macro\">assert!</span>(from_ymd_opt(-<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">29</span>).is_some()); <span class=\"comment\">// 5 BCE is a leap year\n</span><span class=\"macro\">assert!</span>(from_ymd_opt(<span class=\"number\">400000</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>).is_none());\n<span class=\"macro\">assert!</span>(from_ymd_opt(-<span class=\"number\">400000</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>).is_none());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_yo\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#307\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.from_yo\" class=\"fn\">from_yo</a>(year: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, ordinal: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.4.23: use <code>from_yo_opt()</code> instead</span></div></span></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDate</code> from the <a href=\"#ordinal-date\">ordinal date</a>\n(year and day of the year).</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the specified ordinal day does not exist, on invalid values for <code>ordinal</code>, or if\n<code>year</code> is out of range for <code>NaiveDate</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_yo_opt\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#337\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.from_yo_opt\" class=\"fn\">from_yo_opt</a>(year: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, ordinal: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDate</code> from the <a href=\"#ordinal-date\">ordinal date</a>\n(year and day of the year).</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>Returns <code>None</code> if:</p>\n<ul>\n<li>The specified ordinal day does not exist (for example 2023-366).</li>\n<li>The value for <code>ordinal</code> is invalid (for example: <code>0</code>, <code>400</code>).</li>\n<li><code>year</code> is out of range for <code>NaiveDate</code>.</li>\n</ul>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::NaiveDate;\n\n<span class=\"kw\">let </span>from_yo_opt = NaiveDate::from_yo_opt;\n\n<span class=\"macro\">assert!</span>(from_yo_opt(<span class=\"number\">2015</span>, <span class=\"number\">100</span>).is_some());\n<span class=\"macro\">assert!</span>(from_yo_opt(<span class=\"number\">2015</span>, <span class=\"number\">0</span>).is_none());\n<span class=\"macro\">assert!</span>(from_yo_opt(<span class=\"number\">2015</span>, <span class=\"number\">365</span>).is_some());\n<span class=\"macro\">assert!</span>(from_yo_opt(<span class=\"number\">2015</span>, <span class=\"number\">366</span>).is_none());\n<span class=\"macro\">assert!</span>(from_yo_opt(-<span class=\"number\">4</span>, <span class=\"number\">366</span>).is_some()); <span class=\"comment\">// 5 BCE is a leap year\n</span><span class=\"macro\">assert!</span>(from_yo_opt(<span class=\"number\">400000</span>, <span class=\"number\">1</span>).is_none());\n<span class=\"macro\">assert!</span>(from_yo_opt(-<span class=\"number\">400000</span>, <span class=\"number\">1</span>).is_none());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_isoywd\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#352\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.from_isoywd\" class=\"fn\">from_isoywd</a>(year: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>, week: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, weekday: <a class=\"enum\" href=\"chrono/weekday/enum.Weekday.html\" title=\"enum chrono::weekday::Weekday\">Weekday</a>) -&gt; <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.4.23: use <code>from_isoywd_opt()</code> instead</span></div></span></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDate</code> from the <a href=\"#week-date\">ISO week date</a>\n(year, week number and day of the week).\nThe resulting <code>NaiveDate</code> may have a different year from the input year.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if the specified week does not exist in that year, on invalid values for <code>week</code>, or\nif the resulting date is out of range for <code>NaiveDate</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_isoywd_opt\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#406\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.from_isoywd_opt\" class=\"fn\">from_isoywd_opt</a>(\n    year: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>,\n    week: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    weekday: <a class=\"enum\" href=\"chrono/weekday/enum.Weekday.html\" title=\"enum chrono::weekday::Weekday\">Weekday</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDate</code> from the <a href=\"#week-date\">ISO week date</a>\n(year, week number and day of the week).\nThe resulting <code>NaiveDate</code> may have a different year from the input year.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>Returns <code>None</code> if:</p>\n<ul>\n<li>The specified week does not exist in that year (for example 2023 week 53).</li>\n<li>The value for <code>week</code> is invalid (for example: <code>0</code>, <code>60</code>).</li>\n<li>If the resulting date is out of range for <code>NaiveDate</code>.</li>\n</ul>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{NaiveDate, Weekday};\n\n<span class=\"kw\">let </span>from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n<span class=\"kw\">let </span>from_isoywd_opt = NaiveDate::from_isoywd_opt;\n\n<span class=\"macro\">assert_eq!</span>(from_isoywd_opt(<span class=\"number\">2015</span>, <span class=\"number\">0</span>, Weekday::Sun), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(from_isoywd_opt(<span class=\"number\">2015</span>, <span class=\"number\">10</span>, Weekday::Sun), <span class=\"prelude-val\">Some</span>(from_ymd(<span class=\"number\">2015</span>, <span class=\"number\">3</span>, <span class=\"number\">8</span>)));\n<span class=\"macro\">assert_eq!</span>(from_isoywd_opt(<span class=\"number\">2015</span>, <span class=\"number\">30</span>, Weekday::Mon), <span class=\"prelude-val\">Some</span>(from_ymd(<span class=\"number\">2015</span>, <span class=\"number\">7</span>, <span class=\"number\">20</span>)));\n<span class=\"macro\">assert_eq!</span>(from_isoywd_opt(<span class=\"number\">2015</span>, <span class=\"number\">60</span>, Weekday::Mon), <span class=\"prelude-val\">None</span>);\n\n<span class=\"macro\">assert_eq!</span>(from_isoywd_opt(<span class=\"number\">400000</span>, <span class=\"number\">10</span>, Weekday::Fri), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(from_isoywd_opt(-<span class=\"number\">400000</span>, <span class=\"number\">10</span>, Weekday::Sat), <span class=\"prelude-val\">None</span>);</code></pre></div>\n<p>The year number of ISO week date may differ from that of the calendar date.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">//           Mo Tu We Th Fr Sa Su\n// 2014-W52  22 23 24 25 26 27 28    has 4+ days of new year,\n// 2015-W01  29 30 31  1  2  3  4 &lt;- so this is the first week\n</span><span class=\"macro\">assert_eq!</span>(from_isoywd_opt(<span class=\"number\">2014</span>, <span class=\"number\">52</span>, Weekday::Sun), <span class=\"prelude-val\">Some</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">12</span>, <span class=\"number\">28</span>)));\n<span class=\"macro\">assert_eq!</span>(from_isoywd_opt(<span class=\"number\">2014</span>, <span class=\"number\">53</span>, Weekday::Mon), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(from_isoywd_opt(<span class=\"number\">2015</span>, <span class=\"number\">1</span>, Weekday::Mon), <span class=\"prelude-val\">Some</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">12</span>, <span class=\"number\">29</span>)));\n\n<span class=\"comment\">// 2015-W52  21 22 23 24 25 26 27    has 4+ days of old year,\n// 2015-W53  28 29 30 31  1  2  3 &lt;- so this is the last week\n// 2016-W01   4  5  6  7  8  9 10\n</span><span class=\"macro\">assert_eq!</span>(from_isoywd_opt(<span class=\"number\">2015</span>, <span class=\"number\">52</span>, Weekday::Sun), <span class=\"prelude-val\">Some</span>(from_ymd(<span class=\"number\">2015</span>, <span class=\"number\">12</span>, <span class=\"number\">27</span>)));\n<span class=\"macro\">assert_eq!</span>(from_isoywd_opt(<span class=\"number\">2015</span>, <span class=\"number\">53</span>, Weekday::Sun), <span class=\"prelude-val\">Some</span>(from_ymd(<span class=\"number\">2016</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>)));\n<span class=\"macro\">assert_eq!</span>(from_isoywd_opt(<span class=\"number\">2015</span>, <span class=\"number\">54</span>, Weekday::Mon), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(from_isoywd_opt(<span class=\"number\">2016</span>, <span class=\"number\">1</span>, Weekday::Mon), <span class=\"prelude-val\">Some</span>(from_ymd(<span class=\"number\">2016</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>)));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_num_days_from_ce\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#447\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.from_num_days_from_ce\" class=\"fn\">from_num_days_from_ce</a>(days: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.4.23: use <code>from_num_days_from_ce_opt()</code> instead</span></div></span></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDate</code> from a day’s number in the proleptic Gregorian calendar, with\nJanuary 1, 1 being day 1.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if the date is out of range.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_num_days_from_ce_opt\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#474\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.from_num_days_from_ce_opt\" class=\"fn\">from_num_days_from_ce_opt</a>(days: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDate</code> from a day’s number in the proleptic Gregorian calendar, with\nJanuary 1, 1 being day 1.</p>\n<h5 id=\"errors-3\"><a class=\"doc-anchor\" href=\"#errors-3\">§</a>Errors</h5>\n<p>Returns <code>None</code> if the date is out of range.</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::NaiveDate;\n\n<span class=\"kw\">let </span>from_ndays_opt = NaiveDate::from_num_days_from_ce_opt;\n<span class=\"kw\">let </span>from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(from_ndays_opt(<span class=\"number\">730_000</span>),      <span class=\"prelude-val\">Some</span>(from_ymd(<span class=\"number\">1999</span>, <span class=\"number\">9</span>, <span class=\"number\">3</span>)));\n<span class=\"macro\">assert_eq!</span>(from_ndays_opt(<span class=\"number\">1</span>),            <span class=\"prelude-val\">Some</span>(from_ymd(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>)));\n<span class=\"macro\">assert_eq!</span>(from_ndays_opt(<span class=\"number\">0</span>),            <span class=\"prelude-val\">Some</span>(from_ymd(<span class=\"number\">0</span>, <span class=\"number\">12</span>, <span class=\"number\">31</span>)));\n<span class=\"macro\">assert_eq!</span>(from_ndays_opt(-<span class=\"number\">1</span>),           <span class=\"prelude-val\">Some</span>(from_ymd(<span class=\"number\">0</span>, <span class=\"number\">12</span>, <span class=\"number\">30</span>)));\n<span class=\"macro\">assert_eq!</span>(from_ndays_opt(<span class=\"number\">100_000_000</span>),  <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(from_ndays_opt(-<span class=\"number\">100_000_000</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_weekday_of_month\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#495-500\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.from_weekday_of_month\" class=\"fn\">from_weekday_of_month</a>(\n    year: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>,\n    month: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    weekday: <a class=\"enum\" href=\"chrono/weekday/enum.Weekday.html\" title=\"enum chrono::weekday::Weekday\">Weekday</a>,\n    n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>\n) -&gt; <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.4.23: use <code>from_weekday_of_month_opt()</code> instead</span></div></span></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDate</code> by counting the number of occurrences of a particular day-of-week\nsince the beginning of the given month. For instance, if you want the 2nd Friday of March\n2017, you would use <code>NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)</code>.</p>\n<p><code>n</code> is 1-indexed.</p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h5>\n<p>Panics if the specified day does not exist in that month, on invalid values for <code>month</code> or\n<code>n</code>, or if <code>year</code> is out of range for <code>NaiveDate</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_weekday_of_month_opt\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#525-530\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.from_weekday_of_month_opt\" class=\"fn\">from_weekday_of_month_opt</a>(\n    year: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>,\n    month: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    weekday: <a class=\"enum\" href=\"chrono/weekday/enum.Weekday.html\" title=\"enum chrono::weekday::Weekday\">Weekday</a>,\n    n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDate</code> by counting the number of occurrences of a particular day-of-week\nsince the beginning of the given month. For instance, if you want the 2nd Friday of March\n2017, you would use <code>NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)</code>.</p>\n<p><code>n</code> is 1-indexed.</p>\n<h5 id=\"errors-4\"><a class=\"doc-anchor\" href=\"#errors-4\">§</a>Errors</h5>\n<p>Returns <code>None</code> if:</p>\n<ul>\n<li>The specified day does not exist in that month (for example the 5th Monday of Apr. 2023).</li>\n<li>The value for <code>month</code> or <code>n</code> is invalid.</li>\n<li><code>year</code> is out of range for <code>NaiveDate</code>.</li>\n</ul>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{NaiveDate, Weekday};\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_weekday_of_month_opt(<span class=\"number\">2017</span>, <span class=\"number\">3</span>, Weekday::Fri, <span class=\"number\">2</span>),\n           NaiveDate::from_ymd_opt(<span class=\"number\">2017</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>))</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_from_str\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#582\">source</a><h4 class=\"code-header\">pub fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.parse_from_str\" class=\"fn\">parse_from_str</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>, fmt: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>, <a class=\"struct\" href=\"chrono/format/struct.ParseError.html\" title=\"struct chrono::format::ParseError\">ParseError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Parses a string with the specified format string and returns a new <code>NaiveDate</code>.\nSee the <a href=\"../format/strftime/index.html\"><code>format::strftime</code> module</a>\non the supported escape sequences.</p>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::NaiveDate;\n\n<span class=\"kw\">let </span>parse_from_str = NaiveDate::parse_from_str;\n\n<span class=\"macro\">assert_eq!</span>(parse_from_str(<span class=\"string\">\"2015-09-05\"</span>, <span class=\"string\">\"%Y-%m-%d\"</span>),\n           <span class=\"prelude-val\">Ok</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>).unwrap()));\n<span class=\"macro\">assert_eq!</span>(parse_from_str(<span class=\"string\">\"5sep2015\"</span>, <span class=\"string\">\"%d%b%Y\"</span>),\n           <span class=\"prelude-val\">Ok</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>).unwrap()));</code></pre></div>\n<p>Time and offset is ignored for the purpose of parsing.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(parse_from_str(<span class=\"string\">\"2014-5-17T12:34:56+09:30\"</span>, <span class=\"string\">\"%Y-%m-%dT%H:%M:%S%z\"</span>),\n           <span class=\"prelude-val\">Ok</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2014</span>, <span class=\"number\">5</span>, <span class=\"number\">17</span>).unwrap()));</code></pre></div>\n<p>Out-of-bound dates or insufficient fields are errors.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(parse_from_str(<span class=\"string\">\"2015/9\"</span>, <span class=\"string\">\"%Y/%m\"</span>).is_err());\n<span class=\"macro\">assert!</span>(parse_from_str(<span class=\"string\">\"2015/9/31\"</span>, <span class=\"string\">\"%Y/%m/%d\"</span>).is_err());</code></pre></div>\n<p>All parsed fields should be consistent to each other, otherwise it’s an error.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(parse_from_str(<span class=\"string\">\"Sat, 09 Aug 2013\"</span>, <span class=\"string\">\"%a, %d %b %Y\"</span>).is_err());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_and_remainder\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#604\">source</a><h4 class=\"code-header\">pub fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.parse_and_remainder\" class=\"fn\">parse_and_remainder</a>&lt;'a&gt;(\n    s: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>,\n    fmt: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>, &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>), <a class=\"struct\" href=\"chrono/format/struct.ParseError.html\" title=\"struct chrono::format::ParseError\">ParseError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Parses a string from a user-specified format into a new <code>NaiveDate</code> value, and a slice with\nthe remaining portion of the string.\nSee the <a href=\"../format/strftime/index.html\"><code>format::strftime</code> module</a>\non the supported escape sequences.</p>\n<p>Similar to <a href=\"#method.parse_from_str\"><code>parse_from_str</code></a>.</p>\n<h5 id=\"example-6\"><a class=\"doc-anchor\" href=\"#example-6\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>(date, remainder) = NaiveDate::parse_and_remainder(\n    <span class=\"string\">\"2015-02-18 trailing text\"</span>, <span class=\"string\">\"%Y-%m-%d\"</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(date, NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">2</span>, <span class=\"number\">18</span>).unwrap());\n<span class=\"macro\">assert_eq!</span>(remainder, <span class=\"string\">\" trailing text\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add_months\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#632\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.checked_add_months\" class=\"fn\">checked_add_months</a>(self, months: <a class=\"struct\" href=\"chrono/month/struct.Months.html\" title=\"struct chrono::month::Months\">Months</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Add a duration in <a href=\"chrono/month/struct.Months.html\" title=\"struct chrono::month::Months\"><code>Months</code></a> to the date</p>\n<p>Uses the last day of the month if the day does not exist in the resulting month.</p>\n<h5 id=\"errors-5\"><a class=\"doc-anchor\" href=\"#errors-5\">§</a>Errors</h5>\n<p>Returns <code>None</code> if the resulting date would be out of range.</p>\n<h5 id=\"example-7\"><a class=\"doc-anchor\" href=\"#example-7\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    NaiveDate::from_ymd_opt(<span class=\"number\">2022</span>, <span class=\"number\">2</span>, <span class=\"number\">20</span>).unwrap().checked_add_months(Months::new(<span class=\"number\">6</span>)),\n    <span class=\"prelude-val\">Some</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2022</span>, <span class=\"number\">8</span>, <span class=\"number\">20</span>).unwrap())\n);\n<span class=\"macro\">assert_eq!</span>(\n    NaiveDate::from_ymd_opt(<span class=\"number\">2022</span>, <span class=\"number\">7</span>, <span class=\"number\">31</span>).unwrap().checked_add_months(Months::new(<span class=\"number\">2</span>)),\n    <span class=\"prelude-val\">Some</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2022</span>, <span class=\"number\">9</span>, <span class=\"number\">30</span>).unwrap())\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub_months\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#667\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.checked_sub_months\" class=\"fn\">checked_sub_months</a>(self, months: <a class=\"struct\" href=\"chrono/month/struct.Months.html\" title=\"struct chrono::month::Months\">Months</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Subtract a duration in <a href=\"chrono/month/struct.Months.html\" title=\"struct chrono::month::Months\"><code>Months</code></a> from the date</p>\n<p>Uses the last day of the month if the day does not exist in the resulting month.</p>\n<h5 id=\"errors-6\"><a class=\"doc-anchor\" href=\"#errors-6\">§</a>Errors</h5>\n<p>Returns <code>None</code> if the resulting date would be out of range.</p>\n<h5 id=\"example-8\"><a class=\"doc-anchor\" href=\"#example-8\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    NaiveDate::from_ymd_opt(<span class=\"number\">2022</span>, <span class=\"number\">2</span>, <span class=\"number\">20</span>).unwrap().checked_sub_months(Months::new(<span class=\"number\">6</span>)),\n    <span class=\"prelude-val\">Some</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2021</span>, <span class=\"number\">8</span>, <span class=\"number\">20</span>).unwrap())\n);\n\n<span class=\"macro\">assert_eq!</span>(\n    NaiveDate::from_ymd_opt(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>).unwrap()\n        .checked_sub_months(Months::new(core::i32::MAX <span class=\"kw\">as </span>u32 + <span class=\"number\">1</span>)),\n    <span class=\"prelude-val\">None\n</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add_days\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#749\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.checked_add_days\" class=\"fn\">checked_add_days</a>(self, days: <a class=\"struct\" href=\"chrono/naive/date/struct.Days.html\" title=\"struct chrono::naive::date::Days\">Days</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Add a duration in <a href=\"chrono/naive/date/struct.Days.html\" title=\"struct chrono::naive::date::Days\"><code>Days</code></a> to the date</p>\n<h5 id=\"errors-7\"><a class=\"doc-anchor\" href=\"#errors-7\">§</a>Errors</h5>\n<p>Returns <code>None</code> if the resulting date would be out of range.</p>\n<h5 id=\"example-9\"><a class=\"doc-anchor\" href=\"#example-9\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    NaiveDate::from_ymd_opt(<span class=\"number\">2022</span>, <span class=\"number\">2</span>, <span class=\"number\">20</span>).unwrap().checked_add_days(Days::new(<span class=\"number\">9</span>)),\n    <span class=\"prelude-val\">Some</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2022</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>).unwrap())\n);\n<span class=\"macro\">assert_eq!</span>(\n    NaiveDate::from_ymd_opt(<span class=\"number\">2022</span>, <span class=\"number\">7</span>, <span class=\"number\">31</span>).unwrap().checked_add_days(Days::new(<span class=\"number\">2</span>)),\n    <span class=\"prelude-val\">Some</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2022</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>).unwrap())\n);\n<span class=\"macro\">assert_eq!</span>(\n    NaiveDate::from_ymd_opt(<span class=\"number\">2022</span>, <span class=\"number\">7</span>, <span class=\"number\">31</span>).unwrap().checked_add_days(Days::new(<span class=\"number\">1000000000000</span>)),\n    <span class=\"prelude-val\">None\n</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub_days\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#776\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.checked_sub_days\" class=\"fn\">checked_sub_days</a>(self, days: <a class=\"struct\" href=\"chrono/naive/date/struct.Days.html\" title=\"struct chrono::naive::date::Days\">Days</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Subtract a duration in <a href=\"chrono/naive/date/struct.Days.html\" title=\"struct chrono::naive::date::Days\"><code>Days</code></a> from the date</p>\n<h5 id=\"errors-8\"><a class=\"doc-anchor\" href=\"#errors-8\">§</a>Errors</h5>\n<p>Returns <code>None</code> if the resulting date would be out of range.</p>\n<h5 id=\"example-10\"><a class=\"doc-anchor\" href=\"#example-10\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(\n    NaiveDate::from_ymd_opt(<span class=\"number\">2022</span>, <span class=\"number\">2</span>, <span class=\"number\">20</span>).unwrap().checked_sub_days(Days::new(<span class=\"number\">6</span>)),\n    <span class=\"prelude-val\">Some</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2022</span>, <span class=\"number\">2</span>, <span class=\"number\">14</span>).unwrap())\n);\n<span class=\"macro\">assert_eq!</span>(\n    NaiveDate::from_ymd_opt(<span class=\"number\">2022</span>, <span class=\"number\">2</span>, <span class=\"number\">20</span>).unwrap().checked_sub_days(Days::new(<span class=\"number\">1000000000000</span>)),\n    <span class=\"prelude-val\">None\n</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_time\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#822\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.and_time\" class=\"fn\">and_time</a>(&amp;self, time: <a class=\"struct\" href=\"chrono/naive/time/struct.NaiveTime.html\" title=\"struct chrono::naive::time::NaiveTime\">NaiveTime</a>) -&gt; <a class=\"struct\" href=\"chrono/naive/datetime/struct.NaiveDateTime.html\" title=\"struct chrono::naive::datetime::NaiveDateTime\">NaiveDateTime</a></h4></section></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDateTime</code> from the current date and given <code>NaiveTime</code>.</p>\n<h5 id=\"example-11\"><a class=\"doc-anchor\" href=\"#example-11\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{NaiveDate, NaiveTime, NaiveDateTime};\n\n<span class=\"kw\">let </span>d = NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>).unwrap();\n<span class=\"kw\">let </span>t = NaiveTime::from_hms_milli_opt(<span class=\"number\">12</span>, <span class=\"number\">34</span>, <span class=\"number\">56</span>, <span class=\"number\">789</span>).unwrap();\n\n<span class=\"kw\">let </span>dt: NaiveDateTime = d.and_time(t);\n<span class=\"macro\">assert_eq!</span>(dt.date(), d);\n<span class=\"macro\">assert_eq!</span>(dt.time(), t);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_hms\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#837\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.and_hms\" class=\"fn\">and_hms</a>(&amp;self, hour: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, min: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, sec: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"chrono/naive/datetime/struct.NaiveDateTime.html\" title=\"struct chrono::naive::datetime::NaiveDateTime\">NaiveDateTime</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.4.23: use <code>and_hms_opt()</code> instead</span></div></span></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDateTime</code> from the current date, hour, minute and second.</p>\n<p>No <a href=\"./struct.NaiveTime.html#leap-second-handling\">leap second</a> is allowed here;\nuse <code>NaiveDate::and_hms_*</code> methods with a subsecond parameter instead.</p>\n<h5 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">§</a>Panics</h5>\n<p>Panics on invalid hour, minute and/or second.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_hms_opt\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#863\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.and_hms_opt\" class=\"fn\">and_hms_opt</a>(\n    &amp;self,\n    hour: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    min: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    sec: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"chrono/naive/datetime/struct.NaiveDateTime.html\" title=\"struct chrono::naive::datetime::NaiveDateTime\">NaiveDateTime</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDateTime</code> from the current date, hour, minute and second.</p>\n<p>No <a href=\"./struct.NaiveTime.html#leap-second-handling\">leap second</a> is allowed here;\nuse <code>NaiveDate::and_hms_*_opt</code> methods with a subsecond parameter instead.</p>\n<h5 id=\"errors-9\"><a class=\"doc-anchor\" href=\"#errors-9\">§</a>Errors</h5>\n<p>Returns <code>None</code> on invalid hour, minute and/or second.</p>\n<h5 id=\"example-12\"><a class=\"doc-anchor\" href=\"#example-12\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::NaiveDate;\n\n<span class=\"kw\">let </span>d = NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>).unwrap();\n<span class=\"macro\">assert!</span>(d.and_hms_opt(<span class=\"number\">12</span>, <span class=\"number\">34</span>, <span class=\"number\">56</span>).is_some());\n<span class=\"macro\">assert!</span>(d.and_hms_opt(<span class=\"number\">12</span>, <span class=\"number\">34</span>, <span class=\"number\">60</span>).is_none()); <span class=\"comment\">// use `and_hms_milli_opt` instead\n</span><span class=\"macro\">assert!</span>(d.and_hms_opt(<span class=\"number\">12</span>, <span class=\"number\">60</span>, <span class=\"number\">56</span>).is_none());\n<span class=\"macro\">assert!</span>(d.and_hms_opt(<span class=\"number\">24</span>, <span class=\"number\">34</span>, <span class=\"number\">56</span>).is_none());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_hms_milli\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#879\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.and_hms_milli\" class=\"fn\">and_hms_milli</a>(\n    &amp;self,\n    hour: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    min: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    sec: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    milli: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>\n) -&gt; <a class=\"struct\" href=\"chrono/naive/datetime/struct.NaiveDateTime.html\" title=\"struct chrono::naive::datetime::NaiveDateTime\">NaiveDateTime</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.4.23: use <code>and_hms_milli_opt()</code> instead</span></div></span></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDateTime</code> from the current date, hour, minute, second and millisecond.</p>\n<p>The millisecond part is allowed to exceed 1,000,000,000 in order to represent a <a href=\"./struct.NaiveTime.html#leap-second-handling\">leap second</a>, but only when <code>sec == 59</code>.</p>\n<h5 id=\"panics-6\"><a class=\"doc-anchor\" href=\"#panics-6\">§</a>Panics</h5>\n<p>Panics on invalid hour, minute, second and/or millisecond.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_hms_milli_opt\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#907-913\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.and_hms_milli_opt\" class=\"fn\">and_hms_milli_opt</a>(\n    &amp;self,\n    hour: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    min: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    sec: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    milli: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"chrono/naive/datetime/struct.NaiveDateTime.html\" title=\"struct chrono::naive::datetime::NaiveDateTime\">NaiveDateTime</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDateTime</code> from the current date, hour, minute, second and millisecond.</p>\n<p>The millisecond part is allowed to exceed 1,000,000,000 in order to represent a <a href=\"./struct.NaiveTime.html#leap-second-handling\">leap second</a>, but only when <code>sec == 59</code>.</p>\n<h5 id=\"errors-10\"><a class=\"doc-anchor\" href=\"#errors-10\">§</a>Errors</h5>\n<p>Returns <code>None</code> on invalid hour, minute, second and/or millisecond.</p>\n<h5 id=\"example-13\"><a class=\"doc-anchor\" href=\"#example-13\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::NaiveDate;\n\n<span class=\"kw\">let </span>d = NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>).unwrap();\n<span class=\"macro\">assert!</span>(d.and_hms_milli_opt(<span class=\"number\">12</span>, <span class=\"number\">34</span>, <span class=\"number\">56</span>,   <span class=\"number\">789</span>).is_some());\n<span class=\"macro\">assert!</span>(d.and_hms_milli_opt(<span class=\"number\">12</span>, <span class=\"number\">34</span>, <span class=\"number\">59</span>, <span class=\"number\">1_789</span>).is_some()); <span class=\"comment\">// leap second\n</span><span class=\"macro\">assert!</span>(d.and_hms_milli_opt(<span class=\"number\">12</span>, <span class=\"number\">34</span>, <span class=\"number\">59</span>, <span class=\"number\">2_789</span>).is_none());\n<span class=\"macro\">assert!</span>(d.and_hms_milli_opt(<span class=\"number\">12</span>, <span class=\"number\">34</span>, <span class=\"number\">60</span>,   <span class=\"number\">789</span>).is_none());\n<span class=\"macro\">assert!</span>(d.and_hms_milli_opt(<span class=\"number\">12</span>, <span class=\"number\">60</span>, <span class=\"number\">56</span>,   <span class=\"number\">789</span>).is_none());\n<span class=\"macro\">assert!</span>(d.and_hms_milli_opt(<span class=\"number\">24</span>, <span class=\"number\">34</span>, <span class=\"number\">56</span>,   <span class=\"number\">789</span>).is_none());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_hms_micro\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#943\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.and_hms_micro\" class=\"fn\">and_hms_micro</a>(\n    &amp;self,\n    hour: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    min: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    sec: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    micro: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>\n) -&gt; <a class=\"struct\" href=\"chrono/naive/datetime/struct.NaiveDateTime.html\" title=\"struct chrono::naive::datetime::NaiveDateTime\">NaiveDateTime</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.4.23: use <code>and_hms_micro_opt()</code> instead</span></div></span></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDateTime</code> from the current date, hour, minute, second and microsecond.</p>\n<p>The microsecond part is allowed to exceed 1,000,000,000 in order to represent a <a href=\"./struct.NaiveTime.html#leap-second-handling\">leap second</a>, but only when <code>sec == 59</code>.</p>\n<h5 id=\"panics-7\"><a class=\"doc-anchor\" href=\"#panics-7\">§</a>Panics</h5>\n<p>Panics on invalid hour, minute, second and/or microsecond.</p>\n<h5 id=\"example-14\"><a class=\"doc-anchor\" href=\"#example-14\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};\n\n<span class=\"kw\">let </span>d = NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>).unwrap();\n\n<span class=\"kw\">let </span>dt: NaiveDateTime = d.and_hms_micro_opt(<span class=\"number\">12</span>, <span class=\"number\">34</span>, <span class=\"number\">56</span>, <span class=\"number\">789_012</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(dt.year(), <span class=\"number\">2015</span>);\n<span class=\"macro\">assert_eq!</span>(dt.weekday(), Weekday::Wed);\n<span class=\"macro\">assert_eq!</span>(dt.second(), <span class=\"number\">56</span>);\n<span class=\"macro\">assert_eq!</span>(dt.nanosecond(), <span class=\"number\">789_012_000</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_hms_micro_opt\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#971-977\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.and_hms_micro_opt\" class=\"fn\">and_hms_micro_opt</a>(\n    &amp;self,\n    hour: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    min: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    sec: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    micro: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"chrono/naive/datetime/struct.NaiveDateTime.html\" title=\"struct chrono::naive::datetime::NaiveDateTime\">NaiveDateTime</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDateTime</code> from the current date, hour, minute, second and microsecond.</p>\n<p>The microsecond part is allowed to exceed 1,000,000,000 in order to represent a <a href=\"./struct.NaiveTime.html#leap-second-handling\">leap second</a>, but only when <code>sec == 59</code>.</p>\n<h5 id=\"errors-11\"><a class=\"doc-anchor\" href=\"#errors-11\">§</a>Errors</h5>\n<p>Returns <code>None</code> on invalid hour, minute, second and/or microsecond.</p>\n<h5 id=\"example-15\"><a class=\"doc-anchor\" href=\"#example-15\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::NaiveDate;\n\n<span class=\"kw\">let </span>d = NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>).unwrap();\n<span class=\"macro\">assert!</span>(d.and_hms_micro_opt(<span class=\"number\">12</span>, <span class=\"number\">34</span>, <span class=\"number\">56</span>,   <span class=\"number\">789_012</span>).is_some());\n<span class=\"macro\">assert!</span>(d.and_hms_micro_opt(<span class=\"number\">12</span>, <span class=\"number\">34</span>, <span class=\"number\">59</span>, <span class=\"number\">1_789_012</span>).is_some()); <span class=\"comment\">// leap second\n</span><span class=\"macro\">assert!</span>(d.and_hms_micro_opt(<span class=\"number\">12</span>, <span class=\"number\">34</span>, <span class=\"number\">59</span>, <span class=\"number\">2_789_012</span>).is_none());\n<span class=\"macro\">assert!</span>(d.and_hms_micro_opt(<span class=\"number\">12</span>, <span class=\"number\">34</span>, <span class=\"number\">60</span>,   <span class=\"number\">789_012</span>).is_none());\n<span class=\"macro\">assert!</span>(d.and_hms_micro_opt(<span class=\"number\">12</span>, <span class=\"number\">60</span>, <span class=\"number\">56</span>,   <span class=\"number\">789_012</span>).is_none());\n<span class=\"macro\">assert!</span>(d.and_hms_micro_opt(<span class=\"number\">24</span>, <span class=\"number\">34</span>, <span class=\"number\">56</span>,   <span class=\"number\">789_012</span>).is_none());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_hms_nano\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#993\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.and_hms_nano\" class=\"fn\">and_hms_nano</a>(\n    &amp;self,\n    hour: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    min: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    sec: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    nano: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>\n) -&gt; <a class=\"struct\" href=\"chrono/naive/datetime/struct.NaiveDateTime.html\" title=\"struct chrono::naive::datetime::NaiveDateTime\">NaiveDateTime</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.4.23: use <code>and_hms_nano_opt()</code> instead</span></div></span></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDateTime</code> from the current date, hour, minute, second and nanosecond.</p>\n<p>The nanosecond part is allowed to exceed 1,000,000,000 in order to represent a <a href=\"./struct.NaiveTime.html#leap-second-handling\">leap second</a>, but only when <code>sec == 59</code>.</p>\n<h5 id=\"panics-8\"><a class=\"doc-anchor\" href=\"#panics-8\">§</a>Panics</h5>\n<p>Panics on invalid hour, minute, second and/or nanosecond.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.and_hms_nano_opt\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1021-1027\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.and_hms_nano_opt\" class=\"fn\">and_hms_nano_opt</a>(\n    &amp;self,\n    hour: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    min: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    sec: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    nano: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"chrono/naive/datetime/struct.NaiveDateTime.html\" title=\"struct chrono::naive::datetime::NaiveDateTime\">NaiveDateTime</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDateTime</code> from the current date, hour, minute, second and nanosecond.</p>\n<p>The nanosecond part is allowed to exceed 1,000,000,000 in order to represent a <a href=\"./struct.NaiveTime.html#leap-second-handling\">leap second</a>, but only when <code>sec == 59</code>.</p>\n<h5 id=\"errors-12\"><a class=\"doc-anchor\" href=\"#errors-12\">§</a>Errors</h5>\n<p>Returns <code>None</code> on invalid hour, minute, second and/or nanosecond.</p>\n<h5 id=\"example-16\"><a class=\"doc-anchor\" href=\"#example-16\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::NaiveDate;\n\n<span class=\"kw\">let </span>d = NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>).unwrap();\n<span class=\"macro\">assert!</span>(d.and_hms_nano_opt(<span class=\"number\">12</span>, <span class=\"number\">34</span>, <span class=\"number\">56</span>,   <span class=\"number\">789_012_345</span>).is_some());\n<span class=\"macro\">assert!</span>(d.and_hms_nano_opt(<span class=\"number\">12</span>, <span class=\"number\">34</span>, <span class=\"number\">59</span>, <span class=\"number\">1_789_012_345</span>).is_some()); <span class=\"comment\">// leap second\n</span><span class=\"macro\">assert!</span>(d.and_hms_nano_opt(<span class=\"number\">12</span>, <span class=\"number\">34</span>, <span class=\"number\">59</span>, <span class=\"number\">2_789_012_345</span>).is_none());\n<span class=\"macro\">assert!</span>(d.and_hms_nano_opt(<span class=\"number\">12</span>, <span class=\"number\">34</span>, <span class=\"number\">60</span>,   <span class=\"number\">789_012_345</span>).is_none());\n<span class=\"macro\">assert!</span>(d.and_hms_nano_opt(<span class=\"number\">12</span>, <span class=\"number\">60</span>, <span class=\"number\">56</span>,   <span class=\"number\">789_012_345</span>).is_none());\n<span class=\"macro\">assert!</span>(d.and_hms_nano_opt(<span class=\"number\">24</span>, <span class=\"number\">34</span>, <span class=\"number\">56</span>,   <span class=\"number\">789_012_345</span>).is_none());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.succ\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1069\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.succ\" class=\"fn\">succ</a>(&amp;self) -&gt; <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.4.23: use <code>succ_opt()</code> instead</span></div></span></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDate</code> for the next calendar date.</p>\n<h5 id=\"panics-9\"><a class=\"doc-anchor\" href=\"#panics-9\">§</a>Panics</h5>\n<p>Panics when <code>self</code> is the last representable date.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.succ_opt\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1090\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.succ_opt\" class=\"fn\">succ_opt</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDate</code> for the next calendar date.</p>\n<h5 id=\"errors-13\"><a class=\"doc-anchor\" href=\"#errors-13\">§</a>Errors</h5>\n<p>Returns <code>None</code> when <code>self</code> is the last representable date.</p>\n<h5 id=\"example-17\"><a class=\"doc-anchor\" href=\"#example-17\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::NaiveDate;\n\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>).unwrap().succ_opt(),\n           <span class=\"prelude-val\">Some</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>).unwrap()));\n<span class=\"macro\">assert_eq!</span>(NaiveDate::MAX.succ_opt(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pred\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1105\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.pred\" class=\"fn\">pred</a>(&amp;self) -&gt; <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.4.23: use <code>pred_opt()</code> instead</span></div></span></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDate</code> for the previous calendar date.</p>\n<h5 id=\"panics-10\"><a class=\"doc-anchor\" href=\"#panics-10\">§</a>Panics</h5>\n<p>Panics when <code>self</code> is the first representable date.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pred_opt\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1126\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.pred_opt\" class=\"fn\">pred_opt</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDate</code> for the previous calendar date.</p>\n<h5 id=\"errors-14\"><a class=\"doc-anchor\" href=\"#errors-14\">§</a>Errors</h5>\n<p>Returns <code>None</code> when <code>self</code> is the first representable date.</p>\n<h5 id=\"example-18\"><a class=\"doc-anchor\" href=\"#example-18\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::NaiveDate;\n\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>).unwrap().pred_opt(),\n           <span class=\"prelude-val\">Some</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>).unwrap()));\n<span class=\"macro\">assert_eq!</span>(NaiveDate::MIN.pred_opt(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add_signed\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1154\">source</a><h4 class=\"code-header\">pub fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.checked_add_signed\" class=\"fn\">checked_add_signed</a>(self, rhs: <a class=\"struct\" href=\"chrono/duration/struct.Duration.html\" title=\"struct chrono::duration::Duration\">Duration</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Adds the number of whole days in the given <code>Duration</code> to the current date.</p>\n<h5 id=\"errors-15\"><a class=\"doc-anchor\" href=\"#errors-15\">§</a>Errors</h5>\n<p>Returns <code>None</code> if the resulting date would be out of range.</p>\n<h5 id=\"example-19\"><a class=\"doc-anchor\" href=\"#example-19\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{Duration, NaiveDate};\n\n<span class=\"kw\">let </span>d = NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(d.checked_add_signed(Duration::days(<span class=\"number\">40</span>)),\n           <span class=\"prelude-val\">Some</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>).unwrap()));\n<span class=\"macro\">assert_eq!</span>(d.checked_add_signed(Duration::days(-<span class=\"number\">40</span>)),\n           <span class=\"prelude-val\">Some</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">7</span>, <span class=\"number\">27</span>).unwrap()));\n<span class=\"macro\">assert_eq!</span>(d.checked_add_signed(Duration::days(<span class=\"number\">1_000_000_000</span>)), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(d.checked_add_signed(Duration::days(-<span class=\"number\">1_000_000_000</span>)), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(NaiveDate::MAX.checked_add_signed(Duration::days(<span class=\"number\">1</span>)), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub_signed\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1180\">source</a><h4 class=\"code-header\">pub fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.checked_sub_signed\" class=\"fn\">checked_sub_signed</a>(self, rhs: <a class=\"struct\" href=\"chrono/duration/struct.Duration.html\" title=\"struct chrono::duration::Duration\">Duration</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Subtracts the number of whole days in the given <code>Duration</code> from the current date.</p>\n<h5 id=\"errors-16\"><a class=\"doc-anchor\" href=\"#errors-16\">§</a>Errors</h5>\n<p>Returns <code>None</code> if the resulting date would be out of range.</p>\n<h5 id=\"example-20\"><a class=\"doc-anchor\" href=\"#example-20\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{Duration, NaiveDate};\n\n<span class=\"kw\">let </span>d = NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(d.checked_sub_signed(Duration::days(<span class=\"number\">40</span>)),\n           <span class=\"prelude-val\">Some</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">7</span>, <span class=\"number\">27</span>).unwrap()));\n<span class=\"macro\">assert_eq!</span>(d.checked_sub_signed(Duration::days(-<span class=\"number\">40</span>)),\n           <span class=\"prelude-val\">Some</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>).unwrap()));\n<span class=\"macro\">assert_eq!</span>(d.checked_sub_signed(Duration::days(<span class=\"number\">1_000_000_000</span>)), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(d.checked_sub_signed(Duration::days(-<span class=\"number\">1_000_000_000</span>)), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(NaiveDate::MIN.checked_sub_signed(Duration::days(<span class=\"number\">1</span>)), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.signed_duration_since\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1208\">source</a><h4 class=\"code-header\">pub fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.signed_duration_since\" class=\"fn\">signed_duration_since</a>(self, rhs: <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>) -&gt; <a class=\"struct\" href=\"chrono/duration/struct.Duration.html\" title=\"struct chrono::duration::Duration\">Duration</a></h4></section></summary><div class=\"docblock\"><p>Subtracts another <code>NaiveDate</code> from the current date.\nReturns a <code>Duration</code> of integral numbers.</p>\n<p>This does not overflow or underflow at all,\nas all possible output fits in the range of <code>Duration</code>.</p>\n<h5 id=\"example-21\"><a class=\"doc-anchor\" href=\"#example-21\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{Duration, NaiveDate};\n\n<span class=\"kw\">let </span>from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n<span class=\"kw\">let </span>since = NaiveDate::signed_duration_since;\n\n<span class=\"macro\">assert_eq!</span>(since(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>), from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>)), Duration::zero());\n<span class=\"macro\">assert_eq!</span>(since(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>), from_ymd(<span class=\"number\">2013</span>, <span class=\"number\">12</span>, <span class=\"number\">31</span>)), Duration::days(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(since(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>), from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>)), Duration::days(-<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(since(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>), from_ymd(<span class=\"number\">2013</span>, <span class=\"number\">9</span>, <span class=\"number\">23</span>)), Duration::days(<span class=\"number\">100</span>));\n<span class=\"macro\">assert_eq!</span>(since(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>), from_ymd(<span class=\"number\">2013</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>)), Duration::days(<span class=\"number\">365</span>));\n<span class=\"macro\">assert_eq!</span>(since(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>), from_ymd(<span class=\"number\">2010</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>)), Duration::days(<span class=\"number\">365</span><span class=\"kw-2\">*</span><span class=\"number\">4 </span>+ <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(since(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>), from_ymd(<span class=\"number\">1614</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>)), Duration::days(<span class=\"number\">365</span><span class=\"kw-2\">*</span><span class=\"number\">400 </span>+ <span class=\"number\">97</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.years_since\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1226\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.years_since\" class=\"fn\">years_since</a>(&amp;self, base: <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the number of whole years from the given <code>base</code> until <code>self</code>.</p>\n<h5 id=\"errors-17\"><a class=\"doc-anchor\" href=\"#errors-17\">§</a>Errors</h5>\n<p>Returns <code>None</code> if <code>base &lt; self</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.format_with_items\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1271-1274\">source</a><h4 class=\"code-header\">pub fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.format_with_items\" class=\"fn\">format_with_items</a>&lt;'a, I, B&gt;(&amp;self, items: I) -&gt; <a class=\"struct\" href=\"chrono/format/formatting/struct.DelayedFormat.html\" title=\"struct chrono::format::formatting::DelayedFormat\">DelayedFormat</a>&lt;I&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = B&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;<a class=\"enum\" href=\"chrono/format/enum.Item.html\" title=\"enum chrono::format::Item\">Item</a>&lt;'a&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Formats the date with the specified formatting items.\nOtherwise it is the same as the ordinary <code>format</code> method.</p>\n<p>The <code>Iterator</code> of items should be <code>Clone</code>able,\nsince the resulting <code>DelayedFormat</code> value may be formatted multiple times.</p>\n<h5 id=\"example-22\"><a class=\"doc-anchor\" href=\"#example-22\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::NaiveDate;\n<span class=\"kw\">use </span>chrono::format::strftime::StrftimeItems;\n\n<span class=\"kw\">let </span>fmt = StrftimeItems::new(<span class=\"string\">\"%Y-%m-%d\"</span>);\n<span class=\"kw\">let </span>d = NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(d.format_with_items(fmt.clone()).to_string(), <span class=\"string\">\"2015-09-05\"</span>);\n<span class=\"macro\">assert_eq!</span>(d.format(<span class=\"string\">\"%Y-%m-%d\"</span>).to_string(),             <span class=\"string\">\"2015-09-05\"</span>);</code></pre></div>\n<p>The resulting <code>DelayedFormat</code> can be formatted directly via the <code>Display</code> trait.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{}\"</span>, d.format_with_items(fmt)), <span class=\"string\">\"2015-09-05\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.format\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1315\">source</a><h4 class=\"code-header\">pub fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.format\" class=\"fn\">format</a>&lt;'a&gt;(&amp;self, fmt: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"chrono/format/formatting/struct.DelayedFormat.html\" title=\"struct chrono::format::formatting::DelayedFormat\">DelayedFormat</a>&lt;<a class=\"struct\" href=\"chrono/format/strftime/struct.StrftimeItems.html\" title=\"struct chrono::format::strftime::StrftimeItems\">StrftimeItems</a>&lt;'a&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Formats the date with the specified format string.\nSee the <a href=\"../format/strftime/index.html\"><code>format::strftime</code> module</a>\non the supported escape sequences.</p>\n<p>This returns a <code>DelayedFormat</code>,\nwhich gets converted to a string only when actual formatting happens.\nYou may use the <code>to_string</code> method to get a <code>String</code>,\nor just feed it into <code>print!</code> and other formatting macros.\n(In this way it avoids the redundant memory allocation.)</p>\n<p>A wrong format string does <em>not</em> issue an error immediately.\nRather, converting or formatting the <code>DelayedFormat</code> fails.\nYou are recommended to immediately use <code>DelayedFormat</code> for this reason.</p>\n<h5 id=\"example-23\"><a class=\"doc-anchor\" href=\"#example-23\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::NaiveDate;\n\n<span class=\"kw\">let </span>d = NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(d.format(<span class=\"string\">\"%Y-%m-%d\"</span>).to_string(), <span class=\"string\">\"2015-09-05\"</span>);\n<span class=\"macro\">assert_eq!</span>(d.format(<span class=\"string\">\"%A, %-d %B, %C%y\"</span>).to_string(), <span class=\"string\">\"Saturday, 5 September, 2015\"</span>);</code></pre></div>\n<p>The resulting <code>DelayedFormat</code> can be formatted directly via the <code>Display</code> trait.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{}\"</span>, d.format(<span class=\"string\">\"%Y-%m-%d\"</span>)), <span class=\"string\">\"2015-09-05\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{}\"</span>, d.format(<span class=\"string\">\"%A, %-d %B, %C%y\"</span>)), <span class=\"string\">\"Saturday, 5 September, 2015\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_days\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1379\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.iter_days\" class=\"fn\">iter_days</a>(&amp;self) -&gt; <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDateDaysIterator.html\" title=\"struct chrono::naive::date::NaiveDateDaysIterator\">NaiveDateDaysIterator</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator that steps by days across all representable dates.</p>\n<h5 id=\"example-24\"><a class=\"doc-anchor\" href=\"#example-24\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>expected = [\n    NaiveDate::from_ymd_opt(<span class=\"number\">2016</span>, <span class=\"number\">2</span>, <span class=\"number\">27</span>).unwrap(),\n    NaiveDate::from_ymd_opt(<span class=\"number\">2016</span>, <span class=\"number\">2</span>, <span class=\"number\">28</span>).unwrap(),\n    NaiveDate::from_ymd_opt(<span class=\"number\">2016</span>, <span class=\"number\">2</span>, <span class=\"number\">29</span>).unwrap(),\n    NaiveDate::from_ymd_opt(<span class=\"number\">2016</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>).unwrap(),\n];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>count = <span class=\"number\">0</span>;\n<span class=\"kw\">for </span>(idx, d) <span class=\"kw\">in </span>NaiveDate::from_ymd_opt(<span class=\"number\">2016</span>, <span class=\"number\">2</span>, <span class=\"number\">27</span>).unwrap().iter_days().take(<span class=\"number\">4</span>).enumerate() {\n   <span class=\"macro\">assert_eq!</span>(d, expected[idx]);\n   count += <span class=\"number\">1</span>;\n}\n<span class=\"macro\">assert_eq!</span>(count, <span class=\"number\">4</span>);\n\n<span class=\"kw\">for </span>d <span class=\"kw\">in </span>NaiveDate::from_ymd_opt(<span class=\"number\">2016</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>).unwrap().iter_days().rev().take(<span class=\"number\">4</span>) {\n    count -= <span class=\"number\">1</span>;\n    <span class=\"macro\">assert_eq!</span>(d, expected[count]);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_weeks\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1410\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.iter_weeks\" class=\"fn\">iter_weeks</a>(&amp;self) -&gt; <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDateWeeksIterator.html\" title=\"struct chrono::naive::date::NaiveDateWeeksIterator\">NaiveDateWeeksIterator</a></h4></section></summary><div class=\"docblock\"><p>Returns an iterator that steps by weeks across all representable dates.</p>\n<h5 id=\"example-25\"><a class=\"doc-anchor\" href=\"#example-25\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>expected = [\n    NaiveDate::from_ymd_opt(<span class=\"number\">2016</span>, <span class=\"number\">2</span>, <span class=\"number\">27</span>).unwrap(),\n    NaiveDate::from_ymd_opt(<span class=\"number\">2016</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>).unwrap(),\n    NaiveDate::from_ymd_opt(<span class=\"number\">2016</span>, <span class=\"number\">3</span>, <span class=\"number\">12</span>).unwrap(),\n    NaiveDate::from_ymd_opt(<span class=\"number\">2016</span>, <span class=\"number\">3</span>, <span class=\"number\">19</span>).unwrap(),\n];\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>count = <span class=\"number\">0</span>;\n<span class=\"kw\">for </span>(idx, d) <span class=\"kw\">in </span>NaiveDate::from_ymd_opt(<span class=\"number\">2016</span>, <span class=\"number\">2</span>, <span class=\"number\">27</span>).unwrap().iter_weeks().take(<span class=\"number\">4</span>).enumerate() {\n   <span class=\"macro\">assert_eq!</span>(d, expected[idx]);\n   count += <span class=\"number\">1</span>;\n}\n<span class=\"macro\">assert_eq!</span>(count, <span class=\"number\">4</span>);\n\n<span class=\"kw\">for </span>d <span class=\"kw\">in </span>NaiveDate::from_ymd_opt(<span class=\"number\">2016</span>, <span class=\"number\">3</span>, <span class=\"number\">19</span>).unwrap().iter_weeks().rev().take(<span class=\"number\">4</span>) {\n    count -= <span class=\"number\">1</span>;\n    <span class=\"macro\">assert_eq!</span>(d, expected[count]);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.week\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1417\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.week\" class=\"fn\">week</a>(&amp;self, start: <a class=\"enum\" href=\"chrono/weekday/enum.Weekday.html\" title=\"enum chrono::weekday::Weekday\">Weekday</a>) -&gt; <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveWeek.html\" title=\"struct chrono::naive::date::NaiveWeek\">NaiveWeek</a></h4></section></summary><div class=\"docblock\"><p>Returns the <a href=\"chrono/naive/date/struct.NaiveWeek.html\" title=\"struct chrono::naive::date::NaiveWeek\"><code>NaiveWeek</code></a> that the date belongs to, starting with the <a href=\"chrono/weekday/enum.Weekday.html\" title=\"enum chrono::weekday::Weekday\"><code>Weekday</code></a>\nspecified.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leap_year\" class=\"method\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1432\">source</a><h4 class=\"code-header\">pub const fn <a href=\"chrono/naive/date/struct.NaiveDate.html#tymethod.leap_year\" class=\"fn\">leap_year</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if this is a leap year.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2000</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>).unwrap().leap_year(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2001</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>).unwrap().leap_year(), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2002</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>).unwrap().leap_year(), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2003</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>).unwrap().leap_year(), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2004</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>).unwrap().leap_year(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2100</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>).unwrap().leap_year(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN\" class=\"associatedconstant\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1461\">source</a><h4 class=\"code-header\">pub const <a href=\"chrono/naive/date/struct.NaiveDate.html#associatedconstant.MIN\" class=\"constant\">MIN</a>: <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a> = _</h4></section></summary><div class=\"docblock\"><p>The minimum possible <code>NaiveDate</code> (January 1, 262145 BCE).</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1463\">source</a><h4 class=\"code-header\">pub const <a href=\"chrono/naive/date/struct.NaiveDate.html#associatedconstant.MAX\" class=\"constant\">MAX</a>: <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a> = _</h4></section></summary><div class=\"docblock\"><p>The maximum possible <code>NaiveDate</code> (December 31, 262143 CE).</p>\n</div></details></div></details>",0,"acter_core::events::common::Date"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-NaiveDate\" class=\"impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#2203\">source</a><a href=\"#impl-Default-for-NaiveDate\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h3></section></summary><div class=\"docblock\"><p>The default value for a NaiveDate is 1st of January 1970.</p>\n<h4 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::NaiveDate;\n\n<span class=\"kw\">let </span>default_date = NaiveDate::default();\n<span class=\"macro\">assert_eq!</span>(default_date, NaiveDate::from_ymd_opt(<span class=\"number\">1970</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>).unwrap());</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#2204\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","acter_core::events::common::Date"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-NaiveDate\" class=\"impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#2322\">source</a><a href=\"#impl-Serialize-for-NaiveDate\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#2323-2325\">source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","acter_core::events::common::Date"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-NaiveDate\" class=\"impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#2358\">source</a><a href=\"#impl-Deserialize%3C'de%3E-for-NaiveDate\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#2359-2361\">source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","acter_core::events::common::Date"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNaiveDateTime%3E-for-NaiveDate\" class=\"impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#2010\">source</a><a href=\"#impl-From%3CNaiveDateTime%3E-for-NaiveDate\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"chrono/naive/datetime/struct.NaiveDateTime.html\" title=\"struct chrono::naive::datetime::NaiveDateTime\">NaiveDateTime</a>&gt; for <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#2011\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(naive_datetime: <a class=\"struct\" href=\"chrono/naive/datetime/struct.NaiveDateTime.html\" title=\"struct chrono::naive::datetime::NaiveDateTime\">NaiveDateTime</a>) -&gt; <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<NaiveDateTime>","acter_core::events::common::Date"],["<section id=\"impl-StructuralPartialEq-for-NaiveDate\" class=\"impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#193\">source</a><a href=\"#impl-StructuralPartialEq-for-NaiveDate\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h3></section>","StructuralPartialEq","acter_core::events::common::Date"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-NaiveDate\" class=\"impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#193\">source</a><a href=\"#impl-PartialOrd-for-NaiveDate\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#193\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1127\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1144\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1160\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1177\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","acter_core::events::common::Date"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3CDuration%3E-for-NaiveDate\" class=\"impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1970\">source</a><a href=\"#impl-SubAssign%3CDuration%3E-for-NaiveDate\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a>&lt;<a class=\"struct\" href=\"chrono/duration/struct.Duration.html\" title=\"struct chrono::duration::Duration\">Duration</a>&gt; for <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1972\">source</a><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"chrono/duration/struct.Duration.html\" title=\"struct chrono::duration::Duration\">Duration</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign<Duration>","acter_core::events::common::Date"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3CDuration%3E-for-NaiveDate\" class=\"impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1861\">source</a><a href=\"#impl-AddAssign%3CDuration%3E-for-NaiveDate\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a>&lt;<a class=\"struct\" href=\"chrono/duration/struct.Duration.html\" title=\"struct chrono::duration::Duration\">Duration</a>&gt; for <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1863\">source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"chrono/duration/struct.Duration.html\" title=\"struct chrono::duration::Duration\">Duration</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign<Duration>","acter_core::events::common::Date"],["<section id=\"impl-Copy-for-NaiveDate\" class=\"impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#193\">source</a><a href=\"#impl-Copy-for-NaiveDate\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h3></section>","Copy","acter_core::events::common::Date"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Datelike-for-NaiveDate\" class=\"impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1466\">source</a><a href=\"#impl-Datelike-for-NaiveDate\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"chrono/traits/trait.Datelike.html\" title=\"trait chrono::traits::Datelike\">Datelike</a> for <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.year\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1478\">source</a><a href=\"#method.year\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"chrono/traits/trait.Datelike.html#tymethod.year\" class=\"fn\">year</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class=\"docblock\"><p>Returns the year number in the <a href=\"#calendar-date\">calendar date</a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{NaiveDate, Datelike};\n\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>).unwrap().year(), <span class=\"number\">2015</span>);\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(-<span class=\"number\">308</span>, <span class=\"number\">3</span>, <span class=\"number\">14</span>).unwrap().year(), -<span class=\"number\">308</span>); <span class=\"comment\">// 309 BCE</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.month\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1495\">source</a><a href=\"#method.month\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"chrono/traits/trait.Datelike.html#tymethod.month\" class=\"fn\">month</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the month number starting from 1.</p>\n<p>The return value ranges from 1 to 12.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{NaiveDate, Datelike};\n\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>).unwrap().month(), <span class=\"number\">9</span>);\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(-<span class=\"number\">308</span>, <span class=\"number\">3</span>, <span class=\"number\">14</span>).unwrap().month(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.month0\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1512\">source</a><a href=\"#method.month0\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"chrono/traits/trait.Datelike.html#tymethod.month0\" class=\"fn\">month0</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the month number starting from 0.</p>\n<p>The return value ranges from 0 to 11.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{NaiveDate, Datelike};\n\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>).unwrap().month0(), <span class=\"number\">8</span>);\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(-<span class=\"number\">308</span>, <span class=\"number\">3</span>, <span class=\"number\">14</span>).unwrap().month0(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.day\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1552\">source</a><a href=\"#method.day\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"chrono/traits/trait.Datelike.html#tymethod.day\" class=\"fn\">day</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the day of month starting from 1.</p>\n<p>The return value ranges from 1 to 31. (The last day of month differs by months.)</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{NaiveDate, Datelike};\n\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>).unwrap().day(), <span class=\"number\">8</span>);\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(-<span class=\"number\">308</span>, <span class=\"number\">3</span>, <span class=\"number\">14</span>).unwrap().day(), <span class=\"number\">14</span>);</code></pre></div>\n<p>Combined with <a href=\"#method.pred\"><code>NaiveDate::pred</code></a>,\none can determine the number of days in a particular month.\n(Note that this panics when <code>year</code> is out of range.)</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{NaiveDate, Datelike};\n\n<span class=\"kw\">fn </span>ndays_in_month(year: i32, month: u32) -&gt; u32 {\n    <span class=\"comment\">// the first day of the next month...\n    </span><span class=\"kw\">let </span>(y, m) = <span class=\"kw\">if </span>month == <span class=\"number\">12 </span>{ (year + <span class=\"number\">1</span>, <span class=\"number\">1</span>) } <span class=\"kw\">else </span>{ (year, month + <span class=\"number\">1</span>) };\n    <span class=\"kw\">let </span>d = NaiveDate::from_ymd_opt(y, m, <span class=\"number\">1</span>).unwrap();\n\n    <span class=\"comment\">// ...is preceded by the last day of the original month\n    </span>d.pred_opt().unwrap().day()\n}\n\n<span class=\"macro\">assert_eq!</span>(ndays_in_month(<span class=\"number\">2015</span>, <span class=\"number\">8</span>), <span class=\"number\">31</span>);\n<span class=\"macro\">assert_eq!</span>(ndays_in_month(<span class=\"number\">2015</span>, <span class=\"number\">9</span>), <span class=\"number\">30</span>);\n<span class=\"macro\">assert_eq!</span>(ndays_in_month(<span class=\"number\">2015</span>, <span class=\"number\">12</span>), <span class=\"number\">31</span>);\n<span class=\"macro\">assert_eq!</span>(ndays_in_month(<span class=\"number\">2016</span>, <span class=\"number\">2</span>), <span class=\"number\">29</span>);\n<span class=\"macro\">assert_eq!</span>(ndays_in_month(<span class=\"number\">2017</span>, <span class=\"number\">2</span>), <span class=\"number\">28</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.day0\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1569\">source</a><a href=\"#method.day0\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"chrono/traits/trait.Datelike.html#tymethod.day0\" class=\"fn\">day0</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the day of month starting from 0.</p>\n<p>The return value ranges from 0 to 30. (The last day of month differs by months.)</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{NaiveDate, Datelike};\n\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>).unwrap().day0(), <span class=\"number\">7</span>);\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(-<span class=\"number\">308</span>, <span class=\"number\">3</span>, <span class=\"number\">14</span>).unwrap().day0(), <span class=\"number\">13</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ordinal\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1608\">source</a><a href=\"#method.ordinal\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"chrono/traits/trait.Datelike.html#tymethod.ordinal\" class=\"fn\">ordinal</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the day of year starting from 1.</p>\n<p>The return value ranges from 1 to 366. (The last day of year differs by years.)</p>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{NaiveDate, Datelike};\n\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>).unwrap().ordinal(), <span class=\"number\">251</span>);\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(-<span class=\"number\">308</span>, <span class=\"number\">3</span>, <span class=\"number\">14</span>).unwrap().ordinal(), <span class=\"number\">74</span>);</code></pre></div>\n<p>Combined with <a href=\"#method.pred\"><code>NaiveDate::pred</code></a>,\none can determine the number of days in a particular year.\n(Note that this panics when <code>year</code> is out of range.)</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{NaiveDate, Datelike};\n\n<span class=\"kw\">fn </span>ndays_in_year(year: i32) -&gt; u32 {\n    <span class=\"comment\">// the first day of the next year...\n    </span><span class=\"kw\">let </span>d = NaiveDate::from_ymd_opt(year + <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>).unwrap();\n\n    <span class=\"comment\">// ...is preceded by the last day of the original year\n    </span>d.pred_opt().unwrap().ordinal()\n}\n\n<span class=\"macro\">assert_eq!</span>(ndays_in_year(<span class=\"number\">2015</span>), <span class=\"number\">365</span>);\n<span class=\"macro\">assert_eq!</span>(ndays_in_year(<span class=\"number\">2016</span>), <span class=\"number\">366</span>);\n<span class=\"macro\">assert_eq!</span>(ndays_in_year(<span class=\"number\">2017</span>), <span class=\"number\">365</span>);\n<span class=\"macro\">assert_eq!</span>(ndays_in_year(<span class=\"number\">2000</span>), <span class=\"number\">366</span>);\n<span class=\"macro\">assert_eq!</span>(ndays_in_year(<span class=\"number\">2100</span>), <span class=\"number\">365</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ordinal0\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1625\">source</a><a href=\"#method.ordinal0\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"chrono/traits/trait.Datelike.html#tymethod.ordinal0\" class=\"fn\">ordinal0</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the day of year starting from 0.</p>\n<p>The return value ranges from 0 to 365. (The last day of year differs by years.)</p>\n<h5 id=\"example-6\"><a class=\"doc-anchor\" href=\"#example-6\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{NaiveDate, Datelike};\n\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>).unwrap().ordinal0(), <span class=\"number\">250</span>);\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(-<span class=\"number\">308</span>, <span class=\"number\">3</span>, <span class=\"number\">14</span>).unwrap().ordinal0(), <span class=\"number\">73</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.weekday\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1640\">source</a><a href=\"#method.weekday\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"chrono/traits/trait.Datelike.html#tymethod.weekday\" class=\"fn\">weekday</a>(&amp;self) -&gt; <a class=\"enum\" href=\"chrono/weekday/enum.Weekday.html\" title=\"enum chrono::weekday::Weekday\">Weekday</a></h4></section></summary><div class=\"docblock\"><p>Returns the day of week.</p>\n<h5 id=\"example-7\"><a class=\"doc-anchor\" href=\"#example-7\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{NaiveDate, Datelike, Weekday};\n\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>).unwrap().weekday(), Weekday::Tue);\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(-<span class=\"number\">308</span>, <span class=\"number\">3</span>, <span class=\"number\">14</span>).unwrap().weekday(), Weekday::Fri);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_year\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1675\">source</a><a href=\"#method.with_year\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"chrono/traits/trait.Datelike.html#tymethod.with_year\" class=\"fn\">with_year</a>(&amp;self, year: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDate</code> with the year number changed, while keeping the same month and day.</p>\n<h5 id=\"errors\"><a class=\"doc-anchor\" href=\"#errors\">§</a>Errors</h5>\n<p>Returns <code>None</code> if the resulting date does not exist, or when the <code>NaiveDate</code> would be\nout of range.</p>\n<h5 id=\"example-8\"><a class=\"doc-anchor\" href=\"#example-8\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{NaiveDate, Datelike};\n\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>).unwrap().with_year(<span class=\"number\">2016</span>),\n           <span class=\"prelude-val\">Some</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2016</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>).unwrap()));\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>).unwrap().with_year(-<span class=\"number\">308</span>),\n           <span class=\"prelude-val\">Some</span>(NaiveDate::from_ymd_opt(-<span class=\"number\">308</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>).unwrap()));</code></pre></div>\n<p>A leap day (February 29) is a good example that this method can return <code>None</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2016</span>, <span class=\"number\">2</span>, <span class=\"number\">29</span>).unwrap().with_year(<span class=\"number\">2015</span>).is_none());\n<span class=\"macro\">assert!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2016</span>, <span class=\"number\">2</span>, <span class=\"number\">29</span>).unwrap().with_year(<span class=\"number\">2020</span>).is_some());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_month\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1703\">source</a><a href=\"#method.with_month\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"chrono/traits/trait.Datelike.html#tymethod.with_month\" class=\"fn\">with_month</a>(&amp;self, month: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDate</code> with the month number (starting from 1) changed.</p>\n<h5 id=\"errors-1\"><a class=\"doc-anchor\" href=\"#errors-1\">§</a>Errors</h5>\n<p>Returns <code>None</code> if the resulting date does not exist, or if the value for <code>month</code> is invalid.</p>\n<h5 id=\"example-9\"><a class=\"doc-anchor\" href=\"#example-9\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{NaiveDate, Datelike};\n\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>).unwrap().with_month(<span class=\"number\">10</span>),\n           <span class=\"prelude-val\">Some</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">10</span>, <span class=\"number\">8</span>).unwrap()));\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>).unwrap().with_month(<span class=\"number\">13</span>), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// no month 13\n</span><span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">30</span>).unwrap().with_month(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// no February 30</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_month0\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1725\">source</a><a href=\"#method.with_month0\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"chrono/traits/trait.Datelike.html#tymethod.with_month0\" class=\"fn\">with_month0</a>(&amp;self, month0: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDate</code> with the month number (starting from 0) changed.</p>\n<h5 id=\"errors-2\"><a class=\"doc-anchor\" href=\"#errors-2\">§</a>Errors</h5>\n<p>Returns <code>None</code> if the resulting date does not exist, or if the value for <code>month0</code> is\ninvalid.</p>\n<h5 id=\"example-10\"><a class=\"doc-anchor\" href=\"#example-10\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{NaiveDate, Datelike};\n\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>).unwrap().with_month0(<span class=\"number\">9</span>),\n           <span class=\"prelude-val\">Some</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">10</span>, <span class=\"number\">8</span>).unwrap()));\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>).unwrap().with_month0(<span class=\"number\">12</span>), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// no month 13\n</span><span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">30</span>).unwrap().with_month0(<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>); <span class=\"comment\">// no February 30</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_day\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1747\">source</a><a href=\"#method.with_day\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"chrono/traits/trait.Datelike.html#tymethod.with_day\" class=\"fn\">with_day</a>(&amp;self, day: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDate</code> with the day of month (starting from 1) changed.</p>\n<h5 id=\"errors-3\"><a class=\"doc-anchor\" href=\"#errors-3\">§</a>Errors</h5>\n<p>Returns <code>None</code> if the resulting date does not exist, or if the value for <code>day</code> is invalid.</p>\n<h5 id=\"example-11\"><a class=\"doc-anchor\" href=\"#example-11\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{NaiveDate, Datelike};\n\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>).unwrap().with_day(<span class=\"number\">30</span>),\n           <span class=\"prelude-val\">Some</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">30</span>).unwrap()));\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>).unwrap().with_day(<span class=\"number\">31</span>),\n           <span class=\"prelude-val\">None</span>); <span class=\"comment\">// no September 31</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_day0\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1768\">source</a><a href=\"#method.with_day0\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"chrono/traits/trait.Datelike.html#tymethod.with_day0\" class=\"fn\">with_day0</a>(&amp;self, day0: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDate</code> with the day of month (starting from 0) changed.</p>\n<h5 id=\"errors-4\"><a class=\"doc-anchor\" href=\"#errors-4\">§</a>Errors</h5>\n<p>Returns <code>None</code> if the resulting date does not exist, or if the value for <code>day0</code> is invalid.</p>\n<h5 id=\"example-12\"><a class=\"doc-anchor\" href=\"#example-12\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{NaiveDate, Datelike};\n\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>).unwrap().with_day0(<span class=\"number\">29</span>),\n           <span class=\"prelude-val\">Some</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">30</span>).unwrap()));\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>).unwrap().with_day0(<span class=\"number\">30</span>),\n           <span class=\"prelude-val\">None</span>); <span class=\"comment\">// no September 31</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_ordinal\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1796\">source</a><a href=\"#method.with_ordinal\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"chrono/traits/trait.Datelike.html#tymethod.with_ordinal\" class=\"fn\">with_ordinal</a>(&amp;self, ordinal: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDate</code> with the day of year (starting from 1) changed.</p>\n<h5 id=\"errors-5\"><a class=\"doc-anchor\" href=\"#errors-5\">§</a>Errors</h5>\n<p>Returns <code>None</code> if the resulting date does not exist, or if the value for <code>ordinal</code> is\ninvalid.</p>\n<h5 id=\"example-13\"><a class=\"doc-anchor\" href=\"#example-13\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{NaiveDate, Datelike};\n\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>).unwrap().with_ordinal(<span class=\"number\">60</span>),\n           <span class=\"prelude-val\">Some</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>).unwrap()));\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>).unwrap().with_ordinal(<span class=\"number\">366</span>),\n           <span class=\"prelude-val\">None</span>); <span class=\"comment\">// 2015 had only 365 days\n\n</span><span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2016</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>).unwrap().with_ordinal(<span class=\"number\">60</span>),\n           <span class=\"prelude-val\">Some</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2016</span>, <span class=\"number\">2</span>, <span class=\"number\">29</span>).unwrap()));\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2016</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>).unwrap().with_ordinal(<span class=\"number\">366</span>),\n           <span class=\"prelude-val\">Some</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2016</span>, <span class=\"number\">12</span>, <span class=\"number\">31</span>).unwrap()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_ordinal0\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1823\">source</a><a href=\"#method.with_ordinal0\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"chrono/traits/trait.Datelike.html#tymethod.with_ordinal0\" class=\"fn\">with_ordinal0</a>(&amp;self, ordinal0: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Makes a new <code>NaiveDate</code> with the day of year (starting from 0) changed.</p>\n<h5 id=\"errors-6\"><a class=\"doc-anchor\" href=\"#errors-6\">§</a>Errors</h5>\n<p>Returns <code>None</code> if the resulting date does not exist, or if the value for <code>ordinal0</code> is\ninvalid.</p>\n<h5 id=\"example-14\"><a class=\"doc-anchor\" href=\"#example-14\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{NaiveDate, Datelike};\n\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>).unwrap().with_ordinal0(<span class=\"number\">59</span>),\n           <span class=\"prelude-val\">Some</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>).unwrap()));\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>).unwrap().with_ordinal0(<span class=\"number\">365</span>),\n           <span class=\"prelude-val\">None</span>); <span class=\"comment\">// 2015 had only 365 days\n\n</span><span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2016</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>).unwrap().with_ordinal0(<span class=\"number\">59</span>),\n           <span class=\"prelude-val\">Some</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2016</span>, <span class=\"number\">2</span>, <span class=\"number\">29</span>).unwrap()));\n<span class=\"macro\">assert_eq!</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2016</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>).unwrap().with_ordinal0(<span class=\"number\">365</span>),\n           <span class=\"prelude-val\">Some</span>(NaiveDate::from_ymd_opt(<span class=\"number\">2016</span>, <span class=\"number\">12</span>, <span class=\"number\">31</span>).unwrap()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iso_week\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1645\">source</a><a href=\"#method.iso_week\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"chrono/traits/trait.Datelike.html#tymethod.iso_week\" class=\"fn\">iso_week</a>(&amp;self) -&gt; <a class=\"struct\" href=\"chrono/naive/isoweek/struct.IsoWeek.html\" title=\"struct chrono::naive::isoweek::IsoWeek\">IsoWeek</a></h4></section></summary><div class='docblock'>Returns the ISO week.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.year_ce\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/traits.rs.html#38\">source</a><a href=\"#method.year_ce\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"chrono/traits/trait.Datelike.html#method.year_ce\" class=\"fn\">year_ce</a>(&amp;self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Returns the absolute year number starting from 1 with a boolean flag,\nwhich is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_days_from_ce\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/traits.rs.html#248\">source</a><a href=\"#method.num_days_from_ce\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"chrono/traits/trait.Datelike.html#method.num_days_from_ce\" class=\"fn\">num_days_from_ce</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Counts the days in the proleptic Gregorian calendar, with January 1, Year 1 (CE) as day 1. <a href=\"chrono/traits/trait.Datelike.html#method.num_days_from_ce\">Read more</a></div></details></div></details>","Datelike","acter_core::events::common::Date"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3CMonths%3E-for-NaiveDate\" class=\"impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1896\">source</a><a href=\"#impl-Sub%3CMonths%3E-for-NaiveDate\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"chrono/month/struct.Months.html\" title=\"struct chrono::month::Months\">Months</a>&gt; for <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1916\">source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, months: <a class=\"struct\" href=\"chrono/month/struct.Months.html\" title=\"struct chrono::month::Months\">Months</a>) -&gt; &lt;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"chrono/month/struct.Months.html\" title=\"struct chrono::month::Months\">Months</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::arith::Sub::Output\">Output</a></h4></section></summary><div class=\"docblock\"><p>A subtraction of Months from <code>NaiveDate</code> clamped to valid days in resulting month.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the resulting date would be out of range.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{NaiveDate, Months};\n\n<span class=\"kw\">let </span>from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) - Months::new(<span class=\"number\">11</span>), from_ymd(<span class=\"number\">2013</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) - Months::new(<span class=\"number\">12</span>), from_ymd(<span class=\"number\">2013</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) - Months::new(<span class=\"number\">13</span>), from_ymd(<span class=\"number\">2012</span>, <span class=\"number\">12</span>, <span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details></div></details>","Sub<Months>","acter_core::events::common::Date"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub-for-NaiveDate\" class=\"impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#2001\">source</a><a href=\"#impl-Sub-for-NaiveDate\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a> for <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h3></section></summary><div class=\"docblock\"><p>Subtracts another <code>NaiveDate</code> from the current date.\nReturns a <code>Duration</code> of integral numbers.</p>\n<p>This does not overflow or underflow at all,\nas all possible output fits in the range of <code>Duration</code>.</p>\n<p>The implementation is a wrapper around\n<a href=\"#method.signed_duration_since\"><code>NaiveDate::signed_duration_since</code></a>.</p>\n<h4 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{Duration, NaiveDate};\n\n<span class=\"kw\">let </span>from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) - from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>), Duration::zero());\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) - from_ymd(<span class=\"number\">2013</span>, <span class=\"number\">12</span>, <span class=\"number\">31</span>), Duration::days(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) - from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>), Duration::days(-<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) - from_ymd(<span class=\"number\">2013</span>, <span class=\"number\">9</span>, <span class=\"number\">23</span>), Duration::days(<span class=\"number\">100</span>));\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) - from_ymd(<span class=\"number\">2013</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>), Duration::days(<span class=\"number\">365</span>));\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) - from_ymd(<span class=\"number\">2010</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>), Duration::days(<span class=\"number\">365</span><span class=\"kw-2\">*</span><span class=\"number\">4 </span>+ <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) - from_ymd(<span class=\"number\">1614</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>), Duration::days(<span class=\"number\">365</span><span class=\"kw-2\">*</span><span class=\"number\">400 </span>+ <span class=\"number\">97</span>));</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"chrono/duration/struct.Duration.html\" title=\"struct chrono::duration::Duration\">Duration</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#2005\">source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>) -&gt; <a class=\"struct\" href=\"chrono/duration/struct.Duration.html\" title=\"struct chrono::duration::Duration\">Duration</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub","acter_core::events::common::Date"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3CDays%3E-for-NaiveDate\" class=\"impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1929\">source</a><a href=\"#impl-Sub%3CDays%3E-for-NaiveDate\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"chrono/naive/date/struct.Days.html\" title=\"struct chrono::naive::date::Days\">Days</a>&gt; for <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1932\">source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, days: <a class=\"struct\" href=\"chrono/naive/date/struct.Days.html\" title=\"struct chrono::naive::date::Days\">Days</a>) -&gt; &lt;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"chrono/naive/date/struct.Days.html\" title=\"struct chrono::naive::date::Days\">Days</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::arith::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<Days>","acter_core::events::common::Date"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3CDuration%3E-for-NaiveDate\" class=\"impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1961\">source</a><a href=\"#impl-Sub%3CDuration%3E-for-NaiveDate\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"chrono/duration/struct.Duration.html\" title=\"struct chrono::duration::Duration\">Duration</a>&gt; for <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h3></section></summary><div class=\"docblock\"><p>A subtraction of <code>Duration</code> from <code>NaiveDate</code> discards the fractional days,\nrounding to the closest integral number of days towards <code>Duration::zero()</code>.\nIt is the same as the addition with a negated <code>Duration</code>.</p>\n<p>Panics on underflow or overflow. Use <a href=\"chrono/naive/date/struct.NaiveDate.html#method.checked_sub_signed\" title=\"method chrono::naive::date::NaiveDate::checked_sub_signed\"><code>NaiveDate::checked_sub_signed</code></a> to detect that.</p>\n<h4 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{Duration, NaiveDate};\n\n<span class=\"kw\">let </span>from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) - Duration::zero(),             from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) - Duration::seconds(<span class=\"number\">86399</span>),     from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) - Duration::seconds(-<span class=\"number\">86399</span>),    from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) - Duration::days(<span class=\"number\">1</span>),            from_ymd(<span class=\"number\">2013</span>, <span class=\"number\">12</span>, <span class=\"number\">31</span>));\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) - Duration::days(-<span class=\"number\">1</span>),           from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) - Duration::days(<span class=\"number\">364</span>),          from_ymd(<span class=\"number\">2013</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) - Duration::days(<span class=\"number\">365</span><span class=\"kw-2\">*</span><span class=\"number\">4 </span>+ <span class=\"number\">1</span>),    from_ymd(<span class=\"number\">2010</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) - Duration::days(<span class=\"number\">365</span><span class=\"kw-2\">*</span><span class=\"number\">400 </span>+ <span class=\"number\">97</span>), from_ymd(<span class=\"number\">1614</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>));</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1965\">source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"chrono/duration/struct.Duration.html\" title=\"struct chrono::duration::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<Duration>","acter_core::events::common::Date"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-NaiveDate\" class=\"impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#193\">source</a><a href=\"#impl-PartialEq-for-NaiveDate\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#193\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","acter_core::events::common::Date"],["<section id=\"impl-StructuralEq-for-NaiveDate\" class=\"impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#193\">source</a><a href=\"#impl-StructuralEq-for-NaiveDate\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralEq.html\" title=\"trait core::marker::StructuralEq\">StructuralEq</a> for <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h3></section>","StructuralEq","acter_core::events::common::Date"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-NaiveDate\" class=\"impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#193\">source</a><a href=\"#impl-Clone-for-NaiveDate\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#193\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","acter_core::events::common::Date"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-NaiveDate\" class=\"impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#2150\">source</a><a href=\"#impl-Display-for-NaiveDate\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h3></section></summary><div class=\"docblock\"><p>The <code>Display</code> output of the naive date <code>d</code> is the same as\n<a href=\"../format/strftime/index.html\"><code>d.format(&quot;%Y-%m-%d&quot;)</code></a>.</p>\n<p>The string printed can be readily parsed via the <code>parse</code> method on <code>str</code>.</p>\n<h4 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::NaiveDate;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{}\"</span>, NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>,  <span class=\"number\">9</span>,  <span class=\"number\">5</span>).unwrap()), <span class=\"string\">\"2015-09-05\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{}\"</span>, NaiveDate::from_ymd_opt(   <span class=\"number\">0</span>,  <span class=\"number\">1</span>,  <span class=\"number\">1</span>).unwrap()), <span class=\"string\">\"0000-01-01\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{}\"</span>, NaiveDate::from_ymd_opt(<span class=\"number\">9999</span>, <span class=\"number\">12</span>, <span class=\"number\">31</span>).unwrap()), <span class=\"string\">\"9999-12-31\"</span>);</code></pre></div>\n<p>ISO 8601 requires an explicit sign for years before 1 BCE or after 9999 CE.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{}\"</span>, NaiveDate::from_ymd_opt(   -<span class=\"number\">1</span>,  <span class=\"number\">1</span>,  <span class=\"number\">1</span>).unwrap()),  <span class=\"string\">\"-0001-01-01\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{}\"</span>, NaiveDate::from_ymd_opt(<span class=\"number\">10000</span>, <span class=\"number\">12</span>, <span class=\"number\">31</span>).unwrap()), <span class=\"string\">\"+10000-12-31\"</span>);</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#2151\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","acter_core::events::common::Date"],["<section id=\"impl-Eq-for-NaiveDate\" class=\"impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#193\">source</a><a href=\"#impl-Eq-for-NaiveDate\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h3></section>","Eq","acter_core::events::common::Date"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-NaiveDate\" class=\"impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#193\">source</a><a href=\"#impl-Hash-for-NaiveDate\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#193\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","acter_core::events::common::Date"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-NaiveDate\" class=\"impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#193\">source</a><a href=\"#impl-Ord-for-NaiveDate\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#193\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#830-832\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#850-852\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#875-878\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","acter_core::events::common::Date"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3CDuration%3E-for-NaiveDate\" class=\"impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1852\">source</a><a href=\"#impl-Add%3CDuration%3E-for-NaiveDate\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;<a class=\"struct\" href=\"chrono/duration/struct.Duration.html\" title=\"struct chrono::duration::Duration\">Duration</a>&gt; for <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h3></section></summary><div class=\"docblock\"><p>An addition of <code>Duration</code> to <code>NaiveDate</code> discards the fractional days,\nrounding to the closest integral number of days towards <code>Duration::zero()</code>.</p>\n<p>Panics on underflow or overflow. Use <a href=\"chrono/naive/date/struct.NaiveDate.html#method.checked_add_signed\" title=\"method chrono::naive::date::NaiveDate::checked_add_signed\"><code>NaiveDate::checked_add_signed</code></a> to detect that.</p>\n<h4 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{Duration, NaiveDate};\n\n<span class=\"kw\">let </span>from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) + Duration::zero(),             from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) + Duration::seconds(<span class=\"number\">86399</span>),     from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) + Duration::seconds(-<span class=\"number\">86399</span>),    from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) + Duration::days(<span class=\"number\">1</span>),            from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) + Duration::days(-<span class=\"number\">1</span>),           from_ymd(<span class=\"number\">2013</span>, <span class=\"number\">12</span>, <span class=\"number\">31</span>));\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) + Duration::days(<span class=\"number\">364</span>),          from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">12</span>, <span class=\"number\">31</span>));\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) + Duration::days(<span class=\"number\">365</span><span class=\"kw-2\">*</span><span class=\"number\">4 </span>+ <span class=\"number\">1</span>),    from_ymd(<span class=\"number\">2018</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) + Duration::days(<span class=\"number\">365</span><span class=\"kw-2\">*</span><span class=\"number\">400 </span>+ <span class=\"number\">97</span>), from_ymd(<span class=\"number\">2414</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>));</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1856\">source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"struct\" href=\"chrono/duration/struct.Duration.html\" title=\"struct chrono::duration::Duration\">Duration</a>) -&gt; <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<Duration>","acter_core::events::common::Date"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3CDays%3E-for-NaiveDate\" class=\"impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1921\">source</a><a href=\"#impl-Add%3CDays%3E-for-NaiveDate\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;<a class=\"struct\" href=\"chrono/naive/date/struct.Days.html\" title=\"struct chrono::naive::date::Days\">Days</a>&gt; for <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1924\">source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, days: <a class=\"struct\" href=\"chrono/naive/date/struct.Days.html\" title=\"struct chrono::naive::date::Days\">Days</a>) -&gt; &lt;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;<a class=\"struct\" href=\"chrono/naive/date/struct.Days.html\" title=\"struct chrono::naive::date::Days\">Days</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<Days>","acter_core::events::common::Date"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3CMonths%3E-for-NaiveDate\" class=\"impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1868\">source</a><a href=\"#impl-Add%3CMonths%3E-for-NaiveDate\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;<a class=\"struct\" href=\"chrono/month/struct.Months.html\" title=\"struct chrono::month::Months\">Months</a>&gt; for <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#1891\">source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, months: <a class=\"struct\" href=\"chrono/month/struct.Months.html\" title=\"struct chrono::month::Months\">Months</a>) -&gt; &lt;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;<a class=\"struct\" href=\"chrono/month/struct.Months.html\" title=\"struct chrono::month::Months\">Months</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class=\"docblock\"><p>An addition of months to <code>NaiveDate</code> clamped to valid days in resulting month.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the resulting date would be out of range.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::{NaiveDate, Months};\n\n<span class=\"kw\">let </span>from_ymd = |y, m, d| NaiveDate::from_ymd_opt(y, m, d).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) + Months::new(<span class=\"number\">1</span>), from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) + Months::new(<span class=\"number\">11</span>), from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">12</span>, <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) + Months::new(<span class=\"number\">12</span>), from_ymd(<span class=\"number\">2015</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>) + Months::new(<span class=\"number\">13</span>), from_ymd(<span class=\"number\">2015</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">1</span>, <span class=\"number\">31</span>) + Months::new(<span class=\"number\">1</span>), from_ymd(<span class=\"number\">2014</span>, <span class=\"number\">2</span>, <span class=\"number\">28</span>));\n<span class=\"macro\">assert_eq!</span>(from_ymd(<span class=\"number\">2020</span>, <span class=\"number\">1</span>, <span class=\"number\">31</span>) + Months::new(<span class=\"number\">1</span>), from_ymd(<span class=\"number\">2020</span>, <span class=\"number\">2</span>, <span class=\"number\">29</span>));</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details></div></details>","Add<Months>","acter_core::events::common::Date"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-NaiveDate\" class=\"impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#2107\">source</a><a href=\"#impl-Debug-for-NaiveDate\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"acter_core/models/trait.Debug.html\" title=\"trait acter_core::models::Debug\">Debug</a> for <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h3></section></summary><div class=\"docblock\"><p>The <code>Debug</code> output of the naive date <code>d</code> is the same as\n<a href=\"../format/strftime/index.html\"><code>d.format(&quot;%Y-%m-%d&quot;)</code></a>.</p>\n<p>The string printed can be readily parsed via the <code>parse</code> method on <code>str</code>.</p>\n<h4 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::NaiveDate;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{:?}\"</span>, NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>,  <span class=\"number\">9</span>,  <span class=\"number\">5</span>).unwrap()), <span class=\"string\">\"2015-09-05\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{:?}\"</span>, NaiveDate::from_ymd_opt(   <span class=\"number\">0</span>,  <span class=\"number\">1</span>,  <span class=\"number\">1</span>).unwrap()), <span class=\"string\">\"0000-01-01\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{:?}\"</span>, NaiveDate::from_ymd_opt(<span class=\"number\">9999</span>, <span class=\"number\">12</span>, <span class=\"number\">31</span>).unwrap()), <span class=\"string\">\"9999-12-31\"</span>);</code></pre></div>\n<p>ISO 8601 requires an explicit sign for years before 1 BCE or after 9999 CE.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{:?}\"</span>, NaiveDate::from_ymd_opt(   -<span class=\"number\">1</span>,  <span class=\"number\">1</span>,  <span class=\"number\">1</span>).unwrap()),  <span class=\"string\">\"-0001-01-01\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">format!</span>(<span class=\"string\">\"{:?}\"</span>, NaiveDate::from_ymd_opt(<span class=\"number\">10000</span>, <span class=\"number\">12</span>, <span class=\"number\">31</span>).unwrap()), <span class=\"string\">\"+10000-12-31\"</span>);</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#2108\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"acter_core/models/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"acter_core/models/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","acter_core::events::common::Date"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-NaiveDate\" class=\"impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#2172\">source</a><a href=\"#impl-FromStr-for-NaiveDate\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a> for <a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a></h3></section></summary><div class=\"docblock\"><p>Parsing a <code>str</code> into a <code>NaiveDate</code> uses the same format,\n<a href=\"../format/strftime/index.html\"><code>%Y-%m-%d</code></a>, as in <code>Debug</code> and <code>Display</code>.</p>\n<h4 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>chrono::NaiveDate;\n\n<span class=\"kw\">let </span>d = NaiveDate::from_ymd_opt(<span class=\"number\">2015</span>, <span class=\"number\">9</span>, <span class=\"number\">18</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"2015-09-18\"</span>.parse::&lt;NaiveDate&gt;(), <span class=\"prelude-val\">Ok</span>(d));\n\n<span class=\"kw\">let </span>d = NaiveDate::from_ymd_opt(<span class=\"number\">12345</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>).unwrap();\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"+12345-6-7\"</span>.parse::&lt;NaiveDate&gt;(), <span class=\"prelude-val\">Ok</span>(d));\n\n<span class=\"macro\">assert!</span>(<span class=\"string\">\"foo\"</span>.parse::&lt;NaiveDate&gt;().is_err());</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"chrono/format/struct.ParseError.html\" title=\"struct chrono::format::ParseError\">ParseError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/chrono/naive/date.rs.html#2175\">source</a><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"chrono/naive/date/struct.NaiveDate.html\" title=\"struct chrono::naive::date::NaiveDate\">NaiveDate</a>, <a class=\"struct\" href=\"chrono/format/struct.ParseError.html\" title=\"struct chrono::format::ParseError\">ParseError</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","acter_core::events::common::Date"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()