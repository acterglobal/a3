(function() {var type_impls = {
"genco":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Tokens%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#84-659\">source</a><a href=\"#impl-Tokens%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L&gt; <a class=\"struct\" href=\"genco/tokens/struct.Tokens.html\" title=\"struct genco::tokens::Tokens\">Tokens</a>&lt;L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"genco/lang/trait.Lang.html\" title=\"trait genco::lang::Lang\">Lang</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#99-104\">source</a><h4 class=\"code-header\">pub fn <a href=\"genco/tokens/struct.Tokens.html#tymethod.new\" class=\"fn\">new</a>() -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a new empty stream of tokens.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>genco::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>tokens = Tokens::&lt;()&gt;::new();\n\n<span class=\"macro\">assert!</span>(tokens.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#117-122\">source</a><h4 class=\"code-header\">pub fn <a href=\"genco/tokens/struct.Tokens.html#tymethod.with_capacity\" class=\"fn\">with_capacity</a>(cap: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a new empty stream of tokens with the specified capacity.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>genco::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>tokens = Tokens::&lt;()&gt;::with_capacity(<span class=\"number\">10</span>);\n\n<span class=\"macro\">assert!</span>(tokens.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#142-146\">source</a><h4 class=\"code-header\">pub fn <a href=\"genco/tokens/struct.Tokens.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; Iter&lt;'_, L&gt;</h4></section></summary><div class=\"docblock\"><p>Construct an iterator over the token stream.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>genco::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>genco::tokens::{ItemStr, Item};\n\n<span class=\"kw\">let </span>tokens: Tokens&lt;()&gt; = <span class=\"macro\">quote!</span>(foo bar baz);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>it = tokens.iter();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>Item::Literal(ItemStr::Static(<span class=\"string\">\"foo\"</span>))), it.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>Item::Space), it.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>Item::Literal(ItemStr::Static(<span class=\"string\">\"bar\"</span>))), it.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>Item::Space), it.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span>Item::Literal(ItemStr::Static(<span class=\"string\">\"baz\"</span>))), it.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, it.next());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append\" class=\"method\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#170-175\">source</a><h4 class=\"code-header\">pub fn <a href=\"genco/tokens/struct.Tokens.html#tymethod.append\" class=\"fn\">append</a>&lt;T&gt;(&amp;mut self, tokens: T)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"genco/tokens/trait.FormatInto.html\" title=\"trait genco::tokens::FormatInto\">FormatInto</a>&lt;L&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Append the given tokens.</p>\n<p>This append function takes anything implementing <a href=\"genco/tokens/trait.FormatInto.html\" title=\"trait genco::tokens::FormatInto\">FormatInto</a> making the\nargument’s behavior customizable. Most primitive types have built-in\nimplementations of <a href=\"genco/tokens/trait.FormatInto.html\" title=\"trait genco::tokens::FormatInto\">FormatInto</a> treating them as raw tokens.</p>\n<p>Most notabley, things implementing <a href=\"genco/tokens/trait.FormatInto.html\" title=\"trait genco::tokens::FormatInto\">FormatInto</a> can be used as arguments\nfor <a href=\"macro.quote.html#interpolation\">interpolation</a> in the <a href=\"macro.quote.html\">quote!</a> macro.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>genco::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tokens = Tokens::&lt;()&gt;::new();\ntokens.append(<span class=\"number\">4u32</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"macro\">quote!</span>($(<span class=\"number\">4u32</span>)), tokens);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#197-208\">source</a><h4 class=\"code-header\">pub fn <a href=\"genco/tokens/struct.Tokens.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, it: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"genco/tokens/enum.Item.html\" title=\"enum genco::tokens::Item\">Item</a>&lt;L&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Extend with another stream of tokens.</p>\n<p>This respects the structural requirements of adding one element at a\ntime, like you would get by calling <a href=\"genco/tokens/struct.Tokens.html#method.space\" title=\"method genco::tokens::Tokens::space\"><code>space</code></a>, <a href=\"genco/tokens/struct.Tokens.html#method.push\" title=\"method genco::tokens::Tokens::push\"><code>push</code></a>, or <a href=\"genco/tokens/struct.Tokens.html#method.line\" title=\"method genco::tokens::Tokens::line\"><code>line</code></a>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>genco::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>genco::tokens::{Item, ItemStr};\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tokens: Tokens&lt;()&gt; = <span class=\"macro\">quote!</span>(foo bar);\ntokens.extend::&lt;Tokens&lt;()&gt;&gt;(<span class=\"macro\">quote!</span>($[<span class=\"string\">' '</span>]baz));\n\n<span class=\"macro\">assert_eq!</span>(tokens, <span class=\"macro\">quote!</span>(foo bar baz));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.walk_imports\" class=\"method\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#229-234\">source</a><h4 class=\"code-header\">pub fn <a href=\"genco/tokens/struct.Tokens.html#tymethod.walk_imports\" class=\"fn\">walk_imports</a>(&amp;self) -&gt; WalkImports&lt;'_, L&gt;</h4></section></summary><div class=\"docblock\"><p>Walk over all imports.</p>\n<p>The order in which the imports are returned is <em>not</em> defined. So if you\nneed them in some particular order you need to sort them.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>genco::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>debug = rust::import(<span class=\"string\">\"std::fmt\"</span>, <span class=\"string\">\"Debug\"</span>);\n<span class=\"kw\">let </span>ty = rust::import(<span class=\"string\">\"std::collections\"</span>, <span class=\"string\">\"HashMap\"</span>);\n\n<span class=\"kw\">let </span>tokens = <span class=\"macro\">quote!</span>(foo <span class=\"macro-nonterminal\">$ty</span>&lt;u32, <span class=\"kw\">dyn </span><span class=\"macro-nonterminal\">$debug</span>&gt; baz);\n\n<span class=\"kw\">for </span>import <span class=\"kw\">in </span>tokens.walk_imports() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, import);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.register\" class=\"method\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#255-260\">source</a><h4 class=\"code-header\">pub fn <a href=\"genco/tokens/struct.Tokens.html#tymethod.register\" class=\"fn\">register</a>&lt;T&gt;(&amp;mut self, tokens: T)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"genco/tokens/trait.Register.html\" title=\"trait genco::tokens::Register\">Register</a>&lt;L&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Add an registered custom element that is <em>not</em> rendered.</p>\n<p>Registration can be used to generate imports that do not render a\nvisible result.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>genco::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>write_bytes_ext = rust::import(<span class=\"string\">\"byteorder\"</span>, <span class=\"string\">\"WriteBytesExt\"</span>).with_alias(<span class=\"string\">\"_\"</span>);\n\n<span class=\"kw\">let </span>tokens = <span class=\"macro\">quote!</span>($(register(write_bytes_ext)));\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"use byteorder::WriteBytesExt as _;\\n\"</span>, tokens.to_file_string()<span class=\"question-mark\">?</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#271-273\">source</a><h4 class=\"code-header\">pub fn <a href=\"genco/tokens/struct.Tokens.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Check if tokens contain no items.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>genco::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>tokens: Tokens&lt;()&gt; = <span class=\"macro\">quote!</span>();\n\n<span class=\"macro\">assert!</span>(tokens.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.space\" class=\"method\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#305-311\">source</a><h4 class=\"code-header\">pub fn <a href=\"genco/tokens/struct.Tokens.html#tymethod.space\" class=\"fn\">space</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Add a single spacing to the token stream.</p>\n<p>Note that due to structural guarantees two consequent spaces may not\nfollow each other in the same token stream.</p>\n<p>A space operation has no effect unless it’s followed by a non-whitespace\ntoken.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>genco::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tokens = Tokens::&lt;()&gt;::new();\n\ntokens.space();\ntokens.append(<span class=\"string\">\"hello\"</span>);\ntokens.space();\ntokens.space(); <span class=\"comment\">// Note: ignored\n</span>tokens.append(<span class=\"string\">\"world\"</span>);\ntokens.space();\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">vec!</span>[\n        <span class=\"string\">\" hello world\"</span>,\n    ],\n    tokens.to_file_vec()<span class=\"question-mark\">?\n</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#343-358\">source</a><h4 class=\"code-header\">pub fn <a href=\"genco/tokens/struct.Tokens.html#tymethod.push\" class=\"fn\">push</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Add a single push operation.</p>\n<p>Push operations ensure that any following tokens are added to their own\nline.</p>\n<p>A push has no effect unless it’s <em>preceeded</em> or <em>followed</em> by\nnon-whitespace tokens.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>genco::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tokens = Tokens::&lt;()&gt;::new();\n\ntokens.push();\ntokens.append(<span class=\"string\">\"hello\"</span>);\ntokens.push();\ntokens.append(<span class=\"string\">\"world\"</span>);\ntokens.push();\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">vec!</span>[\n        <span class=\"string\">\"hello\"</span>,\n        <span class=\"string\">\"world\"\n    </span>],\n    tokens.to_file_vec()<span class=\"question-mark\">?\n</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.line\" class=\"method\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#391-401\">source</a><h4 class=\"code-header\">pub fn <a href=\"genco/tokens/struct.Tokens.html#tymethod.line\" class=\"fn\">line</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Add a single line operation.</p>\n<p>A line ensures that any following tokens have one line of separation\nbetween them and the preceeding tokens.</p>\n<p>A line has no effect unless it’s <em>preceeded</em> and <em>followed</em> by\nnon-whitespace tokens.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>genco::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tokens = Tokens::&lt;()&gt;::new();\n\ntokens.line();\ntokens.append(<span class=\"string\">\"hello\"</span>);\ntokens.line();\ntokens.append(<span class=\"string\">\"world\"</span>);\ntokens.line();\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">vec!</span>[\n        <span class=\"string\">\"hello\"</span>,\n        <span class=\"string\">\"\"</span>,\n        <span class=\"string\">\"world\"\n    </span>],\n    tokens.to_file_vec()<span class=\"question-mark\">?\n</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.indent\" class=\"method\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#438-440\">source</a><h4 class=\"code-header\">pub fn <a href=\"genco/tokens/struct.Tokens.html#tymethod.indent\" class=\"fn\">indent</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Increase the indentation of the token stream.</p>\n<p>An indentation is a language-specific operation which adds whitespace to\nthe beginning of a line preceeding any non-whitespace tokens.</p>\n<p>An indentation has no effect unless it’s <em>followed</em> by non-whitespace\ntokens. It also acts like a <a href=\"genco/tokens/struct.Tokens.html#method.push\" title=\"method genco::tokens::Tokens::push\"><code>push</code></a>, in that it will shift any tokens to\na new line.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>genco::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tokens = Tokens::&lt;()&gt;::new();\n\ntokens.indent();\ntokens.append(<span class=\"string\">\"hello\"</span>);\ntokens.indent();\ntokens.append(<span class=\"string\">\"world\"</span>);\ntokens.indent();\ntokens.append(<span class=\"string\">\"😀\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">vec!</span>[\n        <span class=\"string\">\"    hello\"</span>,\n        <span class=\"string\">\"        world\"</span>,\n        <span class=\"string\">\"            😀\"</span>,\n    ],\n    tokens.to_file_vec()<span class=\"question-mark\">?\n</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unindent\" class=\"method\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#488-490\">source</a><h4 class=\"code-header\">pub fn <a href=\"genco/tokens/struct.Tokens.html#tymethod.unindent\" class=\"fn\">unindent</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Decrease the indentation of the token stream.</p>\n<p>An indentation is a language-specific operation which adds whitespace to\nthe beginning of a line preceeding any non-whitespace tokens.</p>\n<p>An indentation has no effect unless it’s <em>followed</em> by non-whitespace\ntokens. It also acts like a <a href=\"genco/tokens/struct.Tokens.html#method.push\" title=\"method genco::tokens::Tokens::push\"><code>push</code></a>, in that it will shift any tokens to\na new line.</p>\n<p>Indentation can never go below zero, and will just be ignored if that\nwere to happen. However, negative indentation is stored in the token\nstream, so any negative indentation in place will have to be countered\nbefore indentation starts again.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>genco::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tokens = Tokens::&lt;()&gt;::new();\n\ntokens.indent();\ntokens.append(<span class=\"string\">\"hello\"</span>);\ntokens.unindent();\ntokens.append(<span class=\"string\">\"world\"</span>);\ntokens.unindent();\ntokens.append(<span class=\"string\">\"😀\"</span>);\ntokens.indent();\ntokens.append(<span class=\"string\">\"😁\"</span>);\ntokens.indent();\ntokens.append(<span class=\"string\">\"😂\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">vec!</span>[\n        <span class=\"string\">\"    hello\"</span>,\n        <span class=\"string\">\"world\"</span>,\n        <span class=\"string\">\"😀\"</span>,\n        <span class=\"string\">\"😁\"</span>,\n        <span class=\"string\">\"    😂\"</span>,\n    ],\n    tokens.to_file_vec()<span class=\"question-mark\">?\n</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.format\" class=\"method\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#541-548\">source</a><h4 class=\"code-header\">pub fn <a href=\"genco/tokens/struct.Tokens.html#tymethod.format\" class=\"fn\">format</a>(\n    &amp;self,\n    out: &amp;mut <a class=\"struct\" href=\"genco/fmt/struct.Formatter.html\" title=\"struct genco::fmt::Formatter\">Formatter</a>&lt;'_&gt;,\n    config: &amp;L::<a class=\"associatedtype\" href=\"genco/lang/trait.Lang.html#associatedtype.Config\" title=\"type genco::lang::Lang::Config\">Config</a>,\n    format: &amp;L::<a class=\"associatedtype\" href=\"genco/lang/trait.Lang.html#associatedtype.Format\" title=\"type genco::lang::Lang::Format\">Format</a>\n) -&gt; <a class=\"type\" href=\"genco/fmt/type.Result.html\" title=\"type genco::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\"><p>Formatting function for token streams that gives full control over the\nformatting environment.</p>\n<p>The configurations and <code>format</code> arguments will be provided to all\nregistered language items as well, and can be used to customize\nformatting through <a href=\"genco/lang/trait.LangItem.html#tymethod.format\" title=\"method genco::lang::LangItem::format\">LangItem::format()</a>.</p>\n<p>The <code>format</code> argument is primarily used internally by\n<a href=\"genco/lang/trait.Lang.html#method.format_file\" title=\"associated function genco::lang::Lang::format_file\">Lang::format_file</a> to provide intermediate state that can be affect how\nlanguage items are formatter. So formatting something as a file might\nyield different results than using this raw formatting function.</p>\n<p>Available formatters:</p>\n<ul>\n<li><a href=\"genco/fmt/struct.VecWriter.html\" title=\"struct genco::fmt::VecWriter\">fmt::VecWriter</a> - To write result into a vector.</li>\n<li><a href=\"genco/fmt/struct.FmtWriter.html\" title=\"struct genco::fmt::FmtWriter\">fmt::FmtWriter</a> - To write the result into something implementing\n<a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Write.html\" title=\"trait core::fmt::Write\">fmt::Write</a>.</li>\n<li><a href=\"genco/fmt/struct.IoWriter.html\" title=\"struct genco::fmt::IoWriter\">fmt::IoWriter</a>- To write the result into something implementing\n<a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">io::Write</a>.</li>\n</ul>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>genco::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>genco::fmt;\n\n<span class=\"kw\">let </span>map = rust::import(<span class=\"string\">\"std::collections\"</span>, <span class=\"string\">\"HashMap\"</span>);\n\n<span class=\"kw\">let </span>tokens: rust::Tokens = <span class=\"macro\">quote! </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>m = <span class=\"macro-nonterminal\">$map::new</span>();\n    m.insert(<span class=\"number\">1u32</span>, <span class=\"number\">2u32</span>);\n};\n\n<span class=\"kw\">let </span>stdout = std::io::stdout();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>w = fmt::IoWriter::new(stdout.lock());\n\n<span class=\"kw\">let </span>fmt = fmt::Config::from_lang::&lt;Rust&gt;()\n    .with_indentation(fmt::Indentation::Space(<span class=\"number\">2</span>));\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>formatter = w.as_formatter(<span class=\"kw-2\">&amp;</span>fmt);\n<span class=\"kw\">let </span>config = rust::Config::default();\n\n<span class=\"comment\">// Default format state for Rust.\n</span><span class=\"kw\">let </span>format = rust::Format::default();\n\ntokens.format(<span class=\"kw-2\">&amp;mut </span>formatter, <span class=\"kw-2\">&amp;</span>config, <span class=\"kw-2\">&amp;</span>format)<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.format_file\" class=\"method\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#634-638\">source</a><h4 class=\"code-header\">pub fn <a href=\"genco/tokens/struct.Tokens.html#tymethod.format_file\" class=\"fn\">format_file</a>(&amp;self, out: &amp;mut <a class=\"struct\" href=\"genco/fmt/struct.Formatter.html\" title=\"struct genco::fmt::Formatter\">Formatter</a>&lt;'_&gt;, config: &amp;L::<a class=\"associatedtype\" href=\"genco/lang/trait.Lang.html#associatedtype.Config\" title=\"type genco::lang::Lang::Config\">Config</a>) -&gt; <a class=\"type\" href=\"genco/fmt/type.Result.html\" title=\"type genco::fmt::Result\">Result</a></h4></section></summary><div class=\"docblock\"><p>File formatting function for token streams that gives full control over the\nformatting environment.</p>\n<p>File formatting will render preambles like namespace declarations and\nimports.</p>\n<p>Available formatters:</p>\n<ul>\n<li><a href=\"genco/fmt/struct.VecWriter.html\" title=\"struct genco::fmt::VecWriter\">fmt::VecWriter</a> - To write result into a vector.</li>\n<li><a href=\"genco/fmt/struct.FmtWriter.html\" title=\"struct genco::fmt::FmtWriter\">fmt::FmtWriter</a> - To write the result into something implementing\n<a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Write.html\" title=\"trait core::fmt::Write\">fmt::Write</a>.</li>\n<li><a href=\"genco/fmt/struct.IoWriter.html\" title=\"struct genco::fmt::IoWriter\">fmt::IoWriter</a>- To write the result into something implementing\n<a href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">io::Write</a>.</li>\n</ul>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>genco::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>genco::fmt;\n\n<span class=\"kw\">let </span>map = rust::import(<span class=\"string\">\"std::collections\"</span>, <span class=\"string\">\"HashMap\"</span>);\n\n<span class=\"kw\">let </span>tokens: rust::Tokens = <span class=\"macro\">quote! </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>m = <span class=\"macro-nonterminal\">$map::new</span>();\n    m.insert(<span class=\"number\">1u32</span>, <span class=\"number\">2u32</span>);\n};\n\n<span class=\"kw\">let </span>stdout = std::io::stdout();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>w = fmt::IoWriter::new(stdout.lock());\n\n<span class=\"kw\">let </span>fmt = fmt::Config::from_lang::&lt;Rust&gt;()\n    .with_indentation(fmt::Indentation::Space(<span class=\"number\">2</span>));\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>formatter = w.as_formatter(<span class=\"kw-2\">&amp;</span>fmt);\n<span class=\"kw\">let </span>config = rust::Config::default();\n\ntokens.format_file(<span class=\"kw-2\">&amp;mut </span>formatter, <span class=\"kw-2\">&amp;</span>config)<span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details></div></details>",0,"genco::lang::c::Tokens","genco::lang::csharp::Tokens","genco::lang::dart::Tokens","genco::lang::go::Tokens","genco::lang::java::Tokens","genco::lang::js::Tokens","genco::lang::python::Tokens","genco::lang::rust::Tokens","genco::lang::swift::Tokens"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Tokens%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#680-861\">source</a><a href=\"#impl-Tokens%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L&gt; <a class=\"struct\" href=\"genco/tokens/struct.Tokens.html\" title=\"struct genco::tokens::Tokens\">Tokens</a>&lt;L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"genco/lang/trait.Lang.html\" title=\"trait genco::lang::Lang\">Lang</a>,\n    L::<a class=\"associatedtype\" href=\"genco/lang/trait.Lang.html#associatedtype.Config\" title=\"type genco::lang::Lang::Config\">Config</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_file_string\" class=\"method\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#712-719\">source</a><h4 class=\"code-header\">pub fn <a href=\"genco/tokens/struct.Tokens.html#tymethod.to_file_string\" class=\"fn\">to_file_string</a>(&amp;self) -&gt; <a class=\"type\" href=\"genco/fmt/type.Result.html\" title=\"type genco::fmt::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Format the token stream as a file for the given target language to a\nstring using the default configuration.</p>\n<p>This is a shorthand to using <a href=\"genco/fmt/struct.FmtWriter.html\" title=\"struct genco::fmt::FmtWriter\">FmtWriter</a> directly in\ncombination with <a href=\"genco/tokens/struct.Tokens.html#method.format_file\" title=\"method genco::tokens::Tokens::format_file\">format</a>.</p>\n<p>This function will render imports.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>genco::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>genco::fmt;\n\n<span class=\"kw\">let </span>map = rust::import(<span class=\"string\">\"std::collections\"</span>, <span class=\"string\">\"HashMap\"</span>);\n\n<span class=\"kw\">let </span>tokens: rust::Tokens = <span class=\"macro\">quote! </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>m = <span class=\"macro-nonterminal\">$map::new</span>();\n    m.insert(<span class=\"number\">1u32</span>, <span class=\"number\">2u32</span>);\n};\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"string\">\"use std::collections::HashMap;\\n\\nlet mut m = HashMap::new();\\nm.insert(1u32, 2u32);\\n\"</span>,\n    tokens.to_file_string()<span class=\"question-mark\">?\n</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_string\" class=\"method\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#747-755\">source</a><h4 class=\"code-header\">pub fn <a href=\"genco/tokens/struct.Tokens.html#tymethod.to_string\" class=\"fn\">to_string</a>(&amp;self) -&gt; <a class=\"type\" href=\"genco/fmt/type.Result.html\" title=\"type genco::fmt::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Format only the current token stream as a string using the default\nconfiguration.</p>\n<p>This is a shorthand to using <a href=\"genco/fmt/struct.FmtWriter.html\" title=\"struct genco::fmt::FmtWriter\">FmtWriter</a> directly in\ncombination with <a href=\"genco/tokens/struct.Tokens.html#method.format\" title=\"method genco::tokens::Tokens::format\">format</a>.</p>\n<p>This function <em>will not</em> render imports.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>genco::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>map = rust::import(<span class=\"string\">\"std::collections\"</span>, <span class=\"string\">\"HashMap\"</span>);\n\n<span class=\"kw\">let </span>tokens: rust::Tokens = <span class=\"macro\">quote! </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>m = <span class=\"macro-nonterminal\">$map::new</span>();\n    m.insert(<span class=\"number\">1u32</span>, <span class=\"number\">2u32</span>);\n};\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"string\">\"let mut m = HashMap::new();\\nm.insert(1u32, 2u32);\"</span>,\n    tokens.to_string()<span class=\"question-mark\">?\n</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_file_vec\" class=\"method\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#814-821\">source</a><h4 class=\"code-header\">pub fn <a href=\"genco/tokens/struct.Tokens.html#tymethod.to_file_vec\" class=\"fn\">to_file_vec</a>(&amp;self) -&gt; <a class=\"type\" href=\"genco/fmt/type.Result.html\" title=\"type genco::fmt::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Format tokens into a vector, where each entry equals a line in the\nresulting file using the default configuration.</p>\n<p>This is a shorthand to using <a href=\"genco/fmt/struct.VecWriter.html\" title=\"struct genco::fmt::VecWriter\">VecWriter</a> directly in\ncombination with <a href=\"genco/tokens/struct.Tokens.html#method.format_file\" title=\"method genco::tokens::Tokens::format_file\">format</a>.</p>\n<p>This function will render imports.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>genco::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>map = rust::import(<span class=\"string\">\"std::collections\"</span>, <span class=\"string\">\"HashMap\"</span>);\n\n<span class=\"kw\">let </span>tokens: rust::Tokens = <span class=\"macro\">quote! </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>m = <span class=\"macro-nonterminal\">$map::new</span>();\n    m.insert(<span class=\"number\">1u32</span>, <span class=\"number\">2u32</span>);\n};\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">vec!</span>[\n        <span class=\"string\">\"use std::collections::HashMap;\"</span>,\n        <span class=\"string\">\"\"</span>,\n        <span class=\"string\">\"let mut m = HashMap::new();\"</span>,\n        <span class=\"string\">\"m.insert(1u32, 2u32);\"\n    </span>],\n    tokens.to_file_vec()<span class=\"question-mark\">?\n</span>);</code></pre></div>\n<h5 id=\"example-with-python-indentation\"><a class=\"doc-anchor\" href=\"#example-with-python-indentation\">§</a>Example with Python indentation</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>genco::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>tokens: python::Tokens = <span class=\"macro\">quote! </span>{\n    def foo():\n        pass\n\n    def bar():\n        pass\n};\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">vec!</span>[\n        <span class=\"string\">\"def foo():\"</span>,\n        <span class=\"string\">\"    pass\"</span>,\n        <span class=\"string\">\"\"</span>,\n        <span class=\"string\">\"def bar():\"</span>,\n        <span class=\"string\">\"    pass\"</span>,\n    ],\n    tokens.to_file_vec()<span class=\"question-mark\">?\n</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_vec\" class=\"method\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#852-860\">source</a><h4 class=\"code-header\">pub fn <a href=\"genco/tokens/struct.Tokens.html#tymethod.to_vec\" class=\"fn\">to_vec</a>(&amp;self) -&gt; <a class=\"type\" href=\"genco/fmt/type.Result.html\" title=\"type genco::fmt::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Helper function to format tokens into a vector, where each entry equals\na line using the default configuration.</p>\n<p>This is a shorthand to using <a href=\"genco/fmt/struct.VecWriter.html\" title=\"struct genco::fmt::VecWriter\">VecWriter</a> directly in\ncombination with <a href=\"genco/tokens/struct.Tokens.html#method.format\" title=\"method genco::tokens::Tokens::format\">format</a>.</p>\n<p>This function <em>will not</em> render imports.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>genco::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>map = rust::import(<span class=\"string\">\"std::collections\"</span>, <span class=\"string\">\"HashMap\"</span>);\n\n<span class=\"kw\">let </span>tokens: rust::Tokens = <span class=\"macro\">quote! </span>{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>m = <span class=\"macro-nonterminal\">$map::new</span>();\n    m.insert(<span class=\"number\">1u32</span>, <span class=\"number\">2u32</span>);\n};\n\n<span class=\"macro\">assert_eq!</span>(\n    <span class=\"macro\">vec!</span>[\n        <span class=\"string\">\"let mut m = HashMap::new();\"</span>,\n        <span class=\"string\">\"m.insert(1u32, 2u32);\"\n    </span>],\n    tokens.to_vec()<span class=\"question-mark\">?\n</span>);</code></pre></div>\n</div></details></div></details>",0,"genco::lang::c::Tokens","genco::lang::csharp::Tokens","genco::lang::dart::Tokens","genco::lang::go::Tokens","genco::lang::java::Tokens","genco::lang::js::Tokens","genco::lang::python::Tokens","genco::lang::rust::Tokens","genco::lang::swift::Tokens"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Tokens%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#68\">source</a><a href=\"#impl-PartialEq-for-Tokens%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"genco/tokens/struct.Tokens.html\" title=\"struct genco::tokens::Tokens\">Tokens</a>&lt;L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"genco/lang/trait.Lang.html\" title=\"trait genco::lang::Lang\">Lang</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#68\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"genco/tokens/struct.Tokens.html\" title=\"struct genco::tokens::Tokens\">Tokens</a>&lt;L&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","genco::lang::c::Tokens","genco::lang::csharp::Tokens","genco::lang::dart::Tokens","genco::lang::go::Tokens","genco::lang::java::Tokens","genco::lang::js::Tokens","genco::lang::python::Tokens","genco::lang::rust::Tokens","genco::lang::swift::Tokens"],["<section id=\"impl-Eq-for-Tokens%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#68\">source</a><a href=\"#impl-Eq-for-Tokens%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"genco/tokens/struct.Tokens.html\" title=\"struct genco::tokens::Tokens\">Tokens</a>&lt;L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"genco/lang/trait.Lang.html\" title=\"trait genco::lang::Lang\">Lang</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","genco::lang::c::Tokens","genco::lang::csharp::Tokens","genco::lang::dart::Tokens","genco::lang::go::Tokens","genco::lang::java::Tokens","genco::lang::js::Tokens","genco::lang::python::Tokens","genco::lang::rust::Tokens","genco::lang::swift::Tokens"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Tokens%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#661-668\">source</a><a href=\"#impl-Default-for-Tokens%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"genco/tokens/struct.Tokens.html\" title=\"struct genco::tokens::Tokens\">Tokens</a>&lt;L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"genco/lang/trait.Lang.html\" title=\"trait genco::lang::Lang\">Lang</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#665-667\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","genco::lang::c::Tokens","genco::lang::csharp::Tokens","genco::lang::dart::Tokens","genco::lang::go::Tokens","genco::lang::java::Tokens","genco::lang::js::Tokens","genco::lang::python::Tokens","genco::lang::rust::Tokens","genco::lang::swift::Tokens"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Tokens%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#68\">source</a><a href=\"#impl-Hash-for-Tokens%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"genco/tokens/struct.Tokens.html\" title=\"struct genco::tokens::Tokens\">Tokens</a>&lt;L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"genco/lang/trait.Lang.html\" title=\"trait genco::lang::Lang\">Lang</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#68\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut __H</a>)</h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","genco::lang::c::Tokens","genco::lang::csharp::Tokens","genco::lang::dart::Tokens","genco::lang::go::Tokens","genco::lang::java::Tokens","genco::lang::js::Tokens","genco::lang::python::Tokens","genco::lang::rust::Tokens","genco::lang::swift::Tokens"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C%26Item%3CL%3E%3E-for-Tokens%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#993-1004\">source</a><a href=\"#impl-FromIterator%3C%26Item%3CL%3E%3E-for-Tokens%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, L&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;&amp;'a <a class=\"enum\" href=\"genco/tokens/enum.Item.html\" title=\"enum genco::tokens::Item\">Item</a>&lt;L&gt;&gt; for <a class=\"struct\" href=\"genco/tokens/struct.Tokens.html\" title=\"struct genco::tokens::Tokens\">Tokens</a>&lt;L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"genco/lang/trait.Lang.html\" title=\"trait genco::lang::Lang\">Lang</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#997-1003\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;'a <a class=\"enum\" href=\"genco/tokens/enum.Item.html\" title=\"enum genco::tokens::Item\">Item</a>&lt;L&gt;&gt;&gt;(iter: I) -&gt; Self</h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<&'a Item<L>>","genco::lang::c::Tokens","genco::lang::csharp::Tokens","genco::lang::dart::Tokens","genco::lang::go::Tokens","genco::lang::java::Tokens","genco::lang::js::Tokens","genco::lang::python::Tokens","genco::lang::rust::Tokens","genco::lang::swift::Tokens"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-Tokens%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#942-954\">source</a><a href=\"#impl-IntoIterator-for-Tokens%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"genco/tokens/struct.Tokens.html\" title=\"struct genco::tokens::Tokens\">Tokens</a>&lt;L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"genco/lang/trait.Lang.html\" title=\"trait genco::lang::Lang\">Lang</a>,</div></h3></section></summary><div class=\"docblock\"><p>Construct an owned iterator over the token stream.</p>\n<h4 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h4>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>genco::prelude::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>genco::tokens::{ItemStr, Item};\n\n<span class=\"kw\">let </span>tokens: Tokens&lt;()&gt; = <span class=\"macro\">quote!</span>(foo bar baz);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>it = tokens.into_iter();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(Item::Literal(ItemStr::Static(<span class=\"string\">\"foo\"</span>))), it.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(Item::Space), it.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(Item::Literal(ItemStr::Static(<span class=\"string\">\"bar\"</span>))), it.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(Item::Space), it.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(Item::Literal(ItemStr::Static(<span class=\"string\">\"baz\"</span>))), it.next());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">None</span>, it.next());</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"enum\" href=\"genco/tokens/enum.Item.html\" title=\"enum genco::tokens::Item\">Item</a>&lt;L&gt;</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = IntoIter&lt;L&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#949-953\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","genco::lang::c::Tokens","genco::lang::csharp::Tokens","genco::lang::dart::Tokens","genco::lang::go::Tokens","genco::lang::java::Tokens","genco::lang::js::Tokens","genco::lang::python::Tokens","genco::lang::rust::Tokens","genco::lang::swift::Tokens"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Tokens%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#68\">source</a><a href=\"#impl-Debug-for-Tokens%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"genco/tokens/struct.Tokens.html\" title=\"struct genco::tokens::Tokens\">Tokens</a>&lt;L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"genco/lang/trait.Lang.html\" title=\"trait genco::lang::Lang\">Lang</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#68\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","genco::lang::c::Tokens","genco::lang::csharp::Tokens","genco::lang::dart::Tokens","genco::lang::go::Tokens","genco::lang::java::Tokens","genco::lang::js::Tokens","genco::lang::python::Tokens","genco::lang::rust::Tokens","genco::lang::swift::Tokens"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Tokens%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#68\">source</a><a href=\"#impl-PartialOrd-for-Tokens%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"genco/tokens/struct.Tokens.html\" title=\"struct genco::tokens::Tokens\">Tokens</a>&lt;L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"genco/lang/trait.Lang.html\" title=\"trait genco::lang::Lang\">Lang</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#68\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"genco/tokens/struct.Tokens.html\" title=\"struct genco::tokens::Tokens\">Tokens</a>&lt;L&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1127\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1144\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1160\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1177\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","genco::lang::c::Tokens","genco::lang::csharp::Tokens","genco::lang::dart::Tokens","genco::lang::go::Tokens","genco::lang::java::Tokens","genco::lang::js::Tokens","genco::lang::python::Tokens","genco::lang::rust::Tokens","genco::lang::swift::Tokens"],["<section id=\"impl-StructuralPartialEq-for-Tokens%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#68\">source</a><a href=\"#impl-StructuralPartialEq-for-Tokens%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"genco/tokens/struct.Tokens.html\" title=\"struct genco::tokens::Tokens\">Tokens</a>&lt;L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"genco/lang/trait.Lang.html\" title=\"trait genco::lang::Lang\">Lang</a>,</div></h3></section>","StructuralPartialEq","genco::lang::c::Tokens","genco::lang::csharp::Tokens","genco::lang::dart::Tokens","genco::lang::go::Tokens","genco::lang::java::Tokens","genco::lang::js::Tokens","genco::lang::python::Tokens","genco::lang::rust::Tokens","genco::lang::swift::Tokens"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CItem%3CL%3E%3E-for-Tokens%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#1006-1017\">source</a><a href=\"#impl-FromIterator%3CItem%3CL%3E%3E-for-Tokens%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"enum\" href=\"genco/tokens/enum.Item.html\" title=\"enum genco::tokens::Item\">Item</a>&lt;L&gt;&gt; for <a class=\"struct\" href=\"genco/tokens/struct.Tokens.html\" title=\"struct genco::tokens::Tokens\">Tokens</a>&lt;L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"genco/lang/trait.Lang.html\" title=\"trait genco::lang::Lang\">Lang</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#1010-1016\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"enum\" href=\"genco/tokens/enum.Item.html\" title=\"enum genco::tokens::Item\">Item</a>&lt;L&gt;&gt;&gt;(iter: I) -&gt; Self</h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<Item<L>>","genco::lang::c::Tokens","genco::lang::csharp::Tokens","genco::lang::dart::Tokens","genco::lang::go::Tokens","genco::lang::java::Tokens","genco::lang::js::Tokens","genco::lang::python::Tokens","genco::lang::rust::Tokens","genco::lang::swift::Tokens"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%5BItem%3CL%3E%5D%3E-for-Tokens%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#881-888\">source</a><a href=\"#impl-PartialEq%3C%5BItem%3CL%3E%5D%3E-for-Tokens%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;[<a class=\"enum\" href=\"genco/tokens/enum.Item.html\" title=\"enum genco::tokens::Item\">Item</a>&lt;L&gt;]&gt; for <a class=\"struct\" href=\"genco/tokens/struct.Tokens.html\" title=\"struct genco::tokens::Tokens\">Tokens</a>&lt;L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"genco/lang/trait.Lang.html\" title=\"trait genco::lang::Lang\">Lang</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#885-887\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;[<a class=\"enum\" href=\"genco/tokens/enum.Item.html\" title=\"enum genco::tokens::Item\">Item</a>&lt;L&gt;]) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<[Item<L>]>","genco::lang::c::Tokens","genco::lang::csharp::Tokens","genco::lang::dart::Tokens","genco::lang::go::Tokens","genco::lang::java::Tokens","genco::lang::js::Tokens","genco::lang::python::Tokens","genco::lang::rust::Tokens","genco::lang::swift::Tokens"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CVec%3CItem%3CL%3E%3E%3E-for-Tokens%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#863-870\">source</a><a href=\"#impl-PartialEq%3CVec%3CItem%3CL%3E%3E%3E-for-Tokens%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"genco/tokens/enum.Item.html\" title=\"enum genco::tokens::Item\">Item</a>&lt;L&gt;&gt;&gt; for <a class=\"struct\" href=\"genco/tokens/struct.Tokens.html\" title=\"struct genco::tokens::Tokens\">Tokens</a>&lt;L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"genco/lang/trait.Lang.html\" title=\"trait genco::lang::Lang\">Lang</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#867-869\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"genco/tokens/enum.Item.html\" title=\"enum genco::tokens::Item\">Item</a>&lt;L&gt;&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Vec<Item<L>>>","genco::lang::c::Tokens","genco::lang::csharp::Tokens","genco::lang::dart::Tokens","genco::lang::go::Tokens","genco::lang::java::Tokens","genco::lang::js::Tokens","genco::lang::python::Tokens","genco::lang::rust::Tokens","genco::lang::swift::Tokens"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FormatInto%3CL%3E-for-Tokens%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/genco/tokens/format_into.rs.html#49-56\">source</a><a href=\"#impl-FormatInto%3CL%3E-for-Tokens%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L&gt; <a class=\"trait\" href=\"genco/tokens/trait.FormatInto.html\" title=\"trait genco::tokens::FormatInto\">FormatInto</a>&lt;L&gt; for <a class=\"struct\" href=\"genco/tokens/struct.Tokens.html\" title=\"struct genco::tokens::Tokens\">Tokens</a>&lt;L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"genco/lang/trait.Lang.html\" title=\"trait genco::lang::Lang\">Lang</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.format_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/genco/tokens/format_into.rs.html#53-55\">source</a><a href=\"#method.format_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"genco/tokens/trait.FormatInto.html#tymethod.format_into\" class=\"fn\">format_into</a>(self, tokens: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut Self</a>)</h4></section></summary><div class='docblock'>Convert the type into tokens in-place. <a href=\"genco/tokens/trait.FormatInto.html#tymethod.format_into\">Read more</a></div></details></div></details>","FormatInto<L>","genco::lang::c::Tokens","genco::lang::csharp::Tokens","genco::lang::dart::Tokens","genco::lang::go::Tokens","genco::lang::java::Tokens","genco::lang::js::Tokens","genco::lang::python::Tokens","genco::lang::rust::Tokens","genco::lang::swift::Tokens"],["<section id=\"impl-StructuralEq-for-Tokens%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#68\">source</a><a href=\"#impl-StructuralEq-for-Tokens%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralEq.html\" title=\"trait core::marker::StructuralEq\">StructuralEq</a> for <a class=\"struct\" href=\"genco/tokens/struct.Tokens.html\" title=\"struct genco::tokens::Tokens\">Tokens</a>&lt;L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"genco/lang/trait.Lang.html\" title=\"trait genco::lang::Lang\">Lang</a>,</div></h3></section>","StructuralEq","genco::lang::c::Tokens","genco::lang::csharp::Tokens","genco::lang::dart::Tokens","genco::lang::go::Tokens","genco::lang::java::Tokens","genco::lang::js::Tokens","genco::lang::python::Tokens","genco::lang::rust::Tokens","genco::lang::swift::Tokens"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Tokens%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#68\">source</a><a href=\"#impl-Clone-for-Tokens%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"genco/tokens/struct.Tokens.html\" title=\"struct genco::tokens::Tokens\">Tokens</a>&lt;L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"genco/lang/trait.Lang.html\" title=\"trait genco::lang::Lang\">Lang</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#68\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"genco/tokens/struct.Tokens.html\" title=\"struct genco::tokens::Tokens\">Tokens</a>&lt;L&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","genco::lang::c::Tokens","genco::lang::csharp::Tokens","genco::lang::dart::Tokens","genco::lang::go::Tokens","genco::lang::java::Tokens","genco::lang::js::Tokens","genco::lang::python::Tokens","genco::lang::rust::Tokens","genco::lang::swift::Tokens"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Tokens%3CL%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#68\">source</a><a href=\"#impl-Ord-for-Tokens%3CL%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;L&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"genco/tokens/struct.Tokens.html\" title=\"struct genco::tokens::Tokens\">Tokens</a>&lt;L&gt;<div class=\"where\">where\n    L: <a class=\"trait\" href=\"genco/lang/trait.Lang.html\" title=\"trait genco::lang::Lang\">Lang</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/genco/tokens/tokens.rs.html#68\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"genco/tokens/struct.Tokens.html\" title=\"struct genco::tokens::Tokens\">Tokens</a>&lt;L&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#830-832\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#850-852\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#875-878\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","genco::lang::c::Tokens","genco::lang::csharp::Tokens","genco::lang::dart::Tokens","genco::lang::go::Tokens","genco::lang::java::Tokens","genco::lang::js::Tokens","genco::lang::python::Tokens","genco::lang::rust::Tokens","genco::lang::swift::Tokens"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()