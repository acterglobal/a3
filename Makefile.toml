[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true
CARGO_MAKE_WORKSPACE_INCLUDE_MEMBERS = ["native/acter"]
ANDROID_PLATFORM_VERSION = "23"
TARGET_PLUGIN = "app/packages/rust_sdk"
LIB_OUT_DIR = "debug"
TARGET_OS = "unknown"
DEV = true
RELEASE = false

[env.release]
RELEASE = true
DEV = false
LIB_OUT_DIR = "release"

[tasks.setup-android]
# set up the system for android
script = [
    "cargo install cargo-ndk@3.2.0",
]

[tasks.setup-ios]
# set up the system for iOS
condition = { platforms = ["mac"] }
script = [
    "cargo install cargo-lipo",
]

[tasks.setup]
# set up the system
dependencies = [
    "setup-android",
    "setup-ios",
]

[tasks.ffigen]
script_runner = "@duckscript"
script = [
    """
    cp ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/native/acter/bindings.dart \
    ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/${TARGET_PLUGIN}/lib/acter_flutter_sdk_ffi.dart
    """,
]
dependencies = [
    "check-ffi"
]

[tasks.init]
# initalise everything
dependencies = [
    "flutter-get",
]

[tasks.flutter-get]
# update flutter dependencies
script_runner = "@shell"
script = [
    "cd ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/${TARGET_PLUGIN}",
    "flutter pub get",
    "cd ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/app",
    "flutter pub get",
]

[tasks.format]
install_crate = "rustfmt"
command = "cargo"
args = ["fmt", "--", "--emit=files"]

[tasks.check-ffi]
command = "cargo"
args = ["check", "-p", "acter"]

[tasks.test-flow]
disabled = true

[tasks.android-dev]
# development android x86_64 emulator
dependencies = [
    "pre-android",
    "android-x86_64",
    "android-x86_64-release",
    "ffigen",
    "post-android-x86_64",
    "post-android",
]


[tasks.android-ci]
# development android i686 emulator
dependencies = [
    "pre-android",
    "android-i686",
    "android-i686-release",
    "ffigen",
    "post-android-i686",
    "post-android",
]

[tasks.android-arm]
# build android ARM64 for actual device
dependencies = [
    "pre-android",
    "android-aarch64",
    "android-aarch64-release",
    "post-android-aarch64",
    "post-android",
]


[tasks.mock-data]
command = "cargo"
args = ["run", "-p", "acter-cli", "mock", "http://localhost:8118"]

[tasks.fixup]
dependencies = [
    "format-fixup",
    "clippy-fixup",
]

[tasks.format-fixup]
command = "cargo"
args = ["fmt", "--all"]

[tasks.clippy-fixup]
command = "cargo"
args = ["clippy", "--all", "--tests", "--allow-dirty", "--allow-staged", "--fix"]

[tasks.build]
# Runs the rust compiler.
dependencies = ["android"]
command = "cargo"
args = ["build", "-p", "acter", "--release"]

[tasks.build.mac]
# Runs the rust compiler.
dependencies = ["android", "ios"]

[tasks.ios]
# Build ios targets.
condition = { platforms = ["mac"] }
dependencies = [
    "ios-aarch64-apple-ios",
    "ios-aarch64-apple-ios-release",
    "ios-x86_64-apple-ios",
    "ios-aarch64-apple-ios-sim",
    "post-ios",
    "post-ios-release"
]

[tasks.cargo-build-dev]
private = true
condition = { env_true = ["DEV"], env_set = ["CARGO_BUILD_TARGET"] }
#env = { CARGO_BUILD_RUSTFLAGS = "-C strip=debuginfo" }
command = "cargo"
args = [
    "build",
    "--target",
    "${CARGO_BUILD_TARGET}",
    "-Zbuild-std",
]

[tasks.cargo-build-release]
private = true
condition = { env_true = ["RELEASE"], env_set = ["CARGO_BUILD_TARGET"] }
command = "cargo"
args = [
    "build",
    "--target",
    "${CARGO_BUILD_TARGET}",
    "-Zbuild-std",
    "--release"
]


[tasks.ios-aarch64-apple-ios]
private = true
condition = { env_true = ["DEV"] }
env = { CARGO_BUILD_TARGET = "aarch64-apple-ios" }
run_task = "cargo-build-dev"

[tasks.ios-aarch64-apple-ios-release]
private = true
condition = { env_true = ["RELEASE"] }
env = { CARGO_BUILD_TARGET = "aarch64-apple-ios" }
run_task = "cargo-build-release"

[tasks.ios-x86_64-apple-ios]
private = true
condition = { env_true = ["DEV"] }
env = { CARGO_BUILD_TARGET = "x86_64-apple-ios" }
run_task = "cargo-build-dev"

[tasks.ios-x86_64-apple-ios-release]
private = true
condition = { env_true = ["RELEASE"] }
env = { CARGO_BUILD_TARGET = "x86_64-apple-ios" }
run_task = "cargo-build-release"

[tasks.ios-aarch64-apple-ios-sim]
private = true
condition = { env_true = ["DEV"] }
env = { CARGO_BUILD_TARGET = "aarch64-apple-ios-sim" }
run_task = "cargo-build-dev"

[tasks.ios-aarch64-apple-ios-sim-release]
private = true
condition = { env_true = ["RELEASE"] }
env = { CARGO_BUILD_TARGET = "aarch64-apple-ios-sim" }
run_task = "cargo-build-release"

[tasks.post-ios]
script_runner = "@shell"
condition = { env_true = ["DEV"] }
script = [
    """
    LIBNAME=libacter.a
    mkdir -p ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/${LIB_OUT_DIR}/ios-sim-lipo
    LIPO_LIB=${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/${LIB_OUT_DIR}/ios-sim-lipo/$LIBNAME

    lipo -create -output $LIPO_LIB \
            ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/aarch64-apple-ios-sim/release/$LIBNAME \
            ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/x86_64-apple-ios/release/$LIBNAME \
            ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/aarch64-apple-ios/${LIB_OUT_DIR}/$LIBNAME


    cp "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/native/${CARGO_MAKE_CRATE_CURRENT_WORKSPACE_MEMBER}/bindings.h" "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/${TARGET_PLUGIN}/ios/Classes/libacter.h"
    cp "$LIPO_LIB" "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/${TARGET_PLUGIN}/ios/$LIBNAME"
    """,
]

[tasks.post-ios-release]
script_runner = "@shell"
condition = { env_true = ["RELEASE"] }
script = [
    """
    LIBNAME=libacter.a
    cp "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/native/${CARGO_MAKE_CRATE_CURRENT_WORKSPACE_MEMBER}/bindings.h" "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/${TARGET_PLUGIN}/ios/Classes/libacter.h"
    cp "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/aarch64-apple-ios/${LIB_OUT_DIR}/$LIBNAME" "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/${TARGET_PLUGIN}/ios/$LIBNAME"
    """,
]

[tasks.android]
# Build android targets.
dependencies = [
    "pre-android",
    "android-aarch64",
    "android-aarch64-release",
    "post-android-aarch64",
    "android-armv7",
    "android-armv7-release",
    "post-android-armv7",
    "android-i686",
    "android-i686-release",
    "post-android-i686",
    "android-x86_64",
    "android-x86_64-release",
    "post-android-x86_64",
    "post-android"
]

[tasks.android-build]
private = true
condition = { env_true = ["DEV"], env_set = ["ANDROID_BUILD_TARGET"] }
env = { CARGO_BUILD_RUSTFLAGS = "-C strip=debuginfo" }
command = "cargo"
args = [
    "ndk",
    "--platform",
    "${ANDROID_PLATFORM_VERSION}",
    "--target",
    "${ANDROID_BUILD_TARGET}",
    "build",
]

[tasks.android-build-release]
private = true
condition = { env_true = ["RELEASE"], env_set = ["ANDROID_BUILD_TARGET"] }
command = "cargo"
args = [
    "ndk",
    "--platform",
    "${ANDROID_PLATFORM_VERSION}",
    "--target",
    "${ANDROID_BUILD_TARGET}",
    "build",
    "--release"
]

[tasks.android-aarch64]
private = true
condition = { env_true = ["DEV"] }
env = { ANDROID_BUILD_TARGET = "arm64-v8a" }
run_task = "android-build"

[tasks.android-armv7]
private = true
condition = { env_true = ["DEV"] }
env = { ANDROID_BUILD_TARGET = "armeabi-v7a" }
run_task = "android-build"

[tasks.android-i686]
private = true
condition = { env_true = ["DEV"] }
env = { ANDROID_BUILD_TARGET = "x86" }
run_task = "android-build"

[tasks.android-x86_64]
private = true
condition = { env_true = ["DEV"] }
env = { ANDROID_BUILD_TARGET = "x86_64" }
run_task = "android-build"

[tasks.android-aarch64-release]
private = true
condition = { env_true = ["RELEASE"] }
env = { ANDROID_BUILD_TARGET = "arm64-v8a" }
run_task = "android-build-release"

[tasks.android-armv7-release]
private = true
condition = { env_true = ["RELEASE"] }
env = { ANDROID_BUILD_TARGET = "armeabi-v7a" }
run_task = "android-build-release"

[tasks.android-i686-release]
private = true
condition = { env_true = ["RELEASE"] }
env = { ANDROID_BUILD_TARGET = "x86" }
run_task = "android-build-release"

[tasks.android-x86_64-release]
private = true
condition = { env_true = ["RELEASE"] }
env = { ANDROID_BUILD_TARGET = "x86_64" }
run_task = "android-build-release"

[tasks.pre-android]
private = true
script_runner = "@duckscript"
script = [
    "mkdir ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/${TARGET_PLUGIN}/android/src/main/jniLibs/arm64-v8a",
    "mkdir ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/${TARGET_PLUGIN}/android/src/main/jniLibs/armeabi-v7a",
    "mkdir ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/${TARGET_PLUGIN}/android/src/main/jniLibs/x86",
    "mkdir ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/${TARGET_PLUGIN}/android/src/main/jniLibs/x86_64",
]

[tasks.copy-lib]
private = true
condition = { env_set = ["ANDROID_TARGET", "JNI_LIB_DIR"] }
script_runner = "@duckscript"
script = [
    """
    cp ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/${ANDROID_TARGET}/${LIB_OUT_DIR}/lib${CARGO_MAKE_CRATE_FS_NAME}.so \
    ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/${TARGET_PLUGIN}/android/src/main/jniLibs/${JNI_LIB_DIR}/lib${CARGO_MAKE_CRATE_FS_NAME}.so
    """,
]

[tasks.post-android-aarch64]
private = true
env = { ANDROID_TARGET = "aarch64-linux-android", JNI_LIB_DIR = "arm64-v8a" }
run_task = "copy-lib"

[tasks.post-android-armv7]
private = true
env = { ANDROID_TARGET = "armv7-linux-androideabi", JNI_LIB_DIR = "armeabi-v7a" }
run_task = "copy-lib"

[tasks.post-android-i686]
private = true
env = { ANDROID_TARGET = "i686-linux-android", JNI_LIB_DIR = "x86" }
run_task = "copy-lib"

[tasks.post-android-x86_64]
private = true
env = { ANDROID_TARGET = "x86_64-linux-android", JNI_LIB_DIR = "x86_64" }
run_task = "copy-lib"

[tasks.post-android]
dependencies = ["ffigen"]

# TODO: non linux desktops
# TODO: release build
[tasks.desktop]
# Build rust SDK for desktop
dependencies = [
    "desktop-build",
    "desktop-build-release",
    "desktop-build-release-mac",
    "ffigen",
    "copy-desktop-lib",
    "copy-desktop-lib-release",
]

[tasks.desktop-build]
private = true
condition = { env_true = ["DEV"] }
command = "cargo"
args = ["build", "--lib"]

[tasks.desktop-build-release]
private = true
condition = { env_true = ["RELEASE"], platforms = ["windows", "linux"] }
command = "cargo"
args = ["build", "--lib", "--release"]

[tasks.desktop-build-release-mac]
private = true
condition = { platforms = ["mac"], env_true = ["RELEASE"] }
script_runner = "@shell"
script = [
    """
    export MAC_LIPO=${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/${LIB_OUT_DIR}/lib${CARGO_MAKE_CRATE_FS_NAME}.dylib
    export MACOSX_DEPLOYMENT_TARGET=10.14
    cargo build --lib --target x86_64-apple-darwin --release
    export MACOSX_DEPLOYMENT_TARGET=11
    cargo build --lib --target aarch64-apple-darwin --release

    # fix inner reference name
    install_name_tool -id "@rpath/libacter.dylib" ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/aarch64-apple-darwin/${LIB_OUT_DIR}/lib${CARGO_MAKE_CRATE_FS_NAME}.dylib
    install_name_tool -id "@rpath/libacter.dylib" ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/x86_64-apple-darwin/${LIB_OUT_DIR}/lib${CARGO_MAKE_CRATE_FS_NAME}.dylib

    lipo -create \
        -output $MAC_LIPO \
        "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/aarch64-apple-darwin/${LIB_OUT_DIR}/lib${CARGO_MAKE_CRATE_FS_NAME}.dylib" \
        "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/x86_64-apple-darwin/${LIB_OUT_DIR}/lib${CARGO_MAKE_CRATE_FS_NAME}.dylib"
    cp "$MAC_LIPO" "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/${TARGET_PLUGIN}/macos/lib${CARGO_MAKE_CRATE_FS_NAME}.dylib"
    cp "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/native/${CARGO_MAKE_CRATE_CURRENT_WORKSPACE_MEMBER}/bindings.h" \
        "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/${TARGET_PLUGIN}/macos/Classes/libacter.h"
    """,
]


[tasks.copy-desktop-lib]
# Copy desktop library to plugin
script_runner = "@duckscript"
condition = { env_true = ["DEV"] }
script = [
    """
    os = os_family

    if eq ${os} "linux"
        cp ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/${LIB_OUT_DIR}/lib${CARGO_MAKE_CRATE_FS_NAME}.so ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/${TARGET_PLUGIN}/linux/lib${CARGO_MAKE_CRATE_FS_NAME}.so
    elseif eq ${os} "mac"
        cp ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/${LIB_OUT_DIR}/lib${CARGO_MAKE_CRATE_FS_NAME}.dylib ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/${TARGET_PLUGIN}/macos/lib${CARGO_MAKE_CRATE_FS_NAME}.dylib
    elseif eq ${os} "windows"
        cp ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/${LIB_OUT_DIR}/${CARGO_MAKE_CRATE_FS_NAME}.dll ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/${TARGET_PLUGIN}/windows/${CARGO_MAKE_CRATE_FS_NAME}.dll
    end
    """
]

[tasks.copy-desktop-lib-release]
# Copy desktop library to plugin
script_runner = "@duckscript"
condition = { env_true = ["RELEASE"] }
script = [
    """
    os = os_family

    if eq ${os} "linux"
        cp ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/${LIB_OUT_DIR}/lib${CARGO_MAKE_CRATE_FS_NAME}.so ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/${TARGET_PLUGIN}/linux/lib${CARGO_MAKE_CRATE_FS_NAME}.so
    elseif eq ${os} "windows"
        cp ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/${LIB_OUT_DIR}/${CARGO_MAKE_CRATE_FS_NAME}.dll ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/${TARGET_PLUGIN}/windows/${CARGO_MAKE_CRATE_FS_NAME}.dll
    end
    """
]
