name: Nightly builds

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      custom_tag:
        description: 'Provide the tag name for this scenario'
        required: true
        type: string
      prev_tag:
        description: 'The tag to compare the changelog to'
        type: string
      target:
        description: 'Build only Target'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - ios
          - android
          - macos
          - linux
          - windows

  schedule:
   - cron: 0 3 * * *

jobs:
  run_checker:
    runs-on: ubuntu-latest
    name: Check latest commit
    outputs:
      should_run: ${{ steps.check-new-commits.outputs.has-new-commits }}
      build: ${{ inputs.target || 'all' }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all history and tags
      - name: Check for new commits since last nightly
        id: check-new-commits
        shell: bash
        run: |
          if [ `git diff --name-only  ${{ inputs.prev_tag || 'nightly-latest' }} app native .changes | wc -l` -ne 0 ]; then
            echo "has-new-commits=true"  >> $GITHUB_OUTPUT ;
          else
            echo "has-new-commits=false" >> $GITHUB_OUTPUT ;
          fi

  tags:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      tag: ${{ inputs.custom_tag || steps.tag.outputs.tag }}
      build_num: ${{ steps.build_num.outputs.build_num }}
      prev_tag: ${{ inputs.prev_tag || 'nightly-latest' }}
    steps:
      - id: tag
        run: echo "tag=`date +%F`" >> $GITHUB_OUTPUT
      - id: build_num
        run: echo "build_num=`date +%s`" >> $GITHUB_OUTPUT

  build:
    environment: release
    strategy:
      matrix:
       include:
          - name: Android Arm64
            target: android
            os: ubuntu-latest
            cargo_make_setup: setup-android
            cargo_make_args: android-arm
            with_ndk_version: r25
            flutter_build_args: "build apk --target-platform android-arm64"
            artifact_prefix: acter-nightly-android-arm64
            artifact_path:  app/build/app/outputs/apk/release/
            rename_file: "app-release.apk"
            rename_suffix: "apk"
          - name: Linux x64
            os: ubuntu-latest
            target: linux
            apt_install: ninja-build libgtk-3-dev libmpv-dev mpv
            cargo_make_args: desktop
            flutter_config: "--enable-linux-desktop"
            flutter_build_args: "build linux"
            artifact_prefix: acter-nightly-linux-x64
            artifact_path: app/build/linux/x64/release/bundle/
            tar_files: lib/ data/ acter
          - name: iOS
            os: macos-14
            target: ios
            with_apple_cert: true
            cargo_make_setup: setup-ios
            cargo_make_args: ios
            flutter_build_args: "build ipa --export-options-plist=ios/exportOptions_nightly_adhoc.plist --build-number=${{ needs.tags.outputs.build_num }}"
            artifact_prefix: acter-nightly-ios
            artifact_path:  app/build/ios/ipa/
            rename_file: "acter.ipa"
            rename_suffix: "ipa"
            extra_artifacts: "ios-manifest.plist"
          - name: MacOS
            os: macos-12
            target: macos
            with_apple_cert: true
            cargo_make_args: desktop
            flutter_config: "--enable-macos-desktop"
            flutter_build_args: "build macos"
            artifact_prefix: acter-nightly-macosx
            artifact_path: app/build/macos/Build/Products/Release/
            rename_file: "Acter.pkg"
            rename_suffix: "pkg"
          - name: Windows
            os: windows-latest
            cargo_make_args: desktop
            flutter_config: "--enable-windows-desktop"
            flutter_build_args: "build windows"
            artifact_prefix: acter-nightly-windows
            artifact_path: app/build/windows/runner/
            zip_files: "Release"

    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    needs:
     - run_checker
     - tags
    if: ${{ needs.run_checker.outputs.should_run != 'false' }}

    continue-on-error: true
    steps:
      - if: ${{ needs.run_checker.outputs.build != 'all' && needs.run_checker.outputs.build != matrix.target }}
        run: |
          echo "Skipping matrix task ${{ matrix.name }}"
          exit 1
      - uses: actions/checkout@v2

 ######  ######## ######## ##     ## ########  
##    ## ##          ##    ##     ## ##     ## 
##       ##          ##    ##     ## ##     ## 
 ######  ######      ##    ##     ## ########  
      ## ##          ##    ##     ## ##        
##    ## ##          ##    ##     ## ##        
 ######  ########    ##     #######  ##      

      - name: Install supported toolchain
        id: rust_toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Cache Cargo
        id: cache-cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo
          key: ${{ matrix.os }}-cargo-${{ steps.rust_toolchain.outputs.rustc_hash }}-${{ hashFiles('./Cargo.toml') }}

      - name: Cache Rust
        uses: actions/cache@v2
        with:
          path: |
            target
          key: ${{ matrix.os }}-nightly-${{matrix.artifact_prefix}}-${{ steps.rust_toolchain.outputs.rustc_hash }}-${{ hashFiles('./Cargo.toml') }}

      - name: Install extra deps
        if: matrix.apt_install
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ${{ matrix.apt_install }}

      - uses: jlumbroso/free-disk-space@main
        name: Free Disk Space (Ubuntu)
        if: matrix.os == 'ubuntu-latest' && matrix.target != 'linux'
        with:
          tool-cache: true
          android: ${{ matrix.target != 'android' }}

      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        if: matrix.with_ndk_version
        with:
          ndk-version: ${{ matrix.with_ndk_version }}

      - name: Install cargo-make
        if: steps.cache-cargo.outputs.cache-hit != 'true'
        uses: davidB/rust-cargo-make@v1

      - uses: subosito/flutter-action@v2
        name: Set up flutter
        with:
          flutter-version: '3.19'
          channel: 'stable'

      - name: Flutter info
        run: flutter doctor -v

      - name: Flutter config
        if: matrix.flutter_config
        run: flutter config ${{ matrix.flutter_config }}

      # - name: Ensure ffi-interface is up to date
      #   run: git diff --exit-code app/packages/rust_sdk/lib/acter_flutter_sdk_ffi.dart

      - name: Unlock git-crypt
        if: matrix.with_apple_cert
        run: |
          brew install git-crypt
          echo "${{ secrets.GIT_CRYPT_KEY }}" | base64 --decode > .github/assets/git-crypt-key
          git-crypt unlock .github/assets/git-crypt-key

      # Install the Apple certificate and provisioning profile
      - name: Install the Apple certificates
        if: matrix.with_apple_cert
        env:
          P12_PASSWORD: ${{ secrets.BUILD_CERTS_P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo "starting in $RUNNER_TEMP"
          # create variables
          CERTIFICATE_PATH=".github/assets/build_certificates.p12"
          KEYCHAIN_PATH="$RUNNER_TEMP/app-signing.keychain-db"
          echo "vars set"
          # import certificate and provisioning profile from secrets
          # create temporary keychain
          echo "creating keychain"
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          echo "setting keychain"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          echo "unlocking keychain"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          # import certificate to keychain
          echo "importing certificate"
          security import "$CERTIFICATE_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
          echo "listing keychains"
          security list-keychain -d user -s "$KEYCHAIN_PATH"

      - name: Install the Apple provisioning profile
        if: matrix.with_apple_cert
        run: |
          echo "Installing provision profiles"
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles/
          cp .github/assets/provision_profiles/* ~/Library/MobileDevice/Provisioning\ Profiles/
          ls -ltas ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Patch macos project
        if: ${{ matrix.target == 'macos' }}
        run: |
          echo "patching project file"
          sed -i \
            -e 's/Acter Mac AppStore/Acter Mac Nightly/g' \
            app/macos/Runner.xcodeproj/project.pbxproj
          sed -i \
            -e 's/3rd Party Mac Developer Application/Developer ID Application/g' \
            app/macos/Runner.xcodeproj/project.pbxproj
          cat app/macos/Runner.xcodeproj/project.pbxproj

      - name: Expose JKS file
        if: matrix.target == 'android'
        working-directory: ./app/android
        run: echo "${{ secrets.ANDROID_KEYSTORE_JKS }}" | base64 --decode > key.jks

      - name: Rust Setup
        if: matrix.cargo_make_setup
        run: cargo make ${{ matrix.cargo_make_setup }}

        ########  ##     ## #### ##       ########  
        ##     ## ##     ##  ##  ##       ##     ## 
        ##     ## ##     ##  ##  ##       ##     ## 
        ########  ##     ##  ##  ##       ##     ## 
        ##     ## ##     ##  ##  ##       ##     ## 
        ##     ## ##     ##  ##  ##       ##     ## 
        ########   #######  #### ######## ########  


      - name: Build Rust Lib
        run: cargo make --profile release ${{ matrix.cargo_make_args}}

      - name: Flutter Build
        env:
          ANDROID_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        shell: bash
        run: |
          flutter ${{ matrix.flutter_build_args }} \
            --dart-define VERSION_NAME="Nightly+${{ needs.tags.outputs.tag }}" \
            --dart-define PUSH_SERVER="${{ secrets.NIGHTLY_PUSH_SERVER }}" \
            --dart-define RAGESHAKE_URL="${{ secrets.RAGESHAKE_URL }}" \
            --dart-define RAGESHAKE_APP_NAME="${{ secrets.NIGHTLY_RAGESHAKE_APP_NAME }}" \
            --dart-define RAGESHAKE_APP_VERSION="Nightly-${{ needs.tags.outputs.tag }}/${{ matrix.name }}" \
            --dart-define DEFAULT_HOMESERVER_URL="${{vars.DEFAULT_HOMESERVER_URL}}" \
            --dart-define DEFAULT_HOMESERVER_NAME="${{vars.DEFAULT_HOMESERVER_NAME}}"
        working-directory: ./app

           ######  ####  ######   ##    ## 
          ##    ##  ##  ##    ##  ###   ## 
          ##        ##  ##        ####  ## 
           ######   ##  ##   #### ## ## ## 
                ##  ##  ##    ##  ##  #### 
          ##    ##  ##  ##    ##  ##   ### 
           ######  ####  ######   ##    ## 

      # Package app
      - name: Package Acter.app to Acter.pkg
        if: matrix.target == 'macos'
        working-directory: ${{ matrix.artifact_path }}
        env:
          APPLE_SIGN_CERTNAME: ${{ secrets.APPLE_MAC_APPSTORE_SIGN_CERTNAME }}
        run: |
          echo "Productbuild"
          productbuild --component Acter.app /Applications --sign "$APPLE_SIGN_CERTNAME" Acter.pkg

      # Important! Cleanup: remove the certificate and provisioning profile from the runner!
      - name: Clean up keychain and provisioning profile
        if: ${{ always() && matrix.with_apple_cert }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/*
          rm .github/assets/git-crypt-key

        ########  ##    ##  ######   
        ##     ## ##   ##  ##    ##  
        ##     ## ##  ##   ##        
        ########  #####    ##   #### 
        ##        ##  ##   ##    ##  
        ##        ##   ##  ##    ##  
        ##        ##    ##  ######   

      - name: Generate manifest
        if: matrix.target == 'ios'
        env:
          TAG: ${{needs.tags.outputs.tag}}
          VERSION: ${{ needs.tags.outputs.build_num }}
        run: |
          sed "s/__TAG__/$TAG/g ; s/__VERSION__/$VERSION/g" .github/templates/ios-manifest.plist.tmpl > ios-manifest.plist

      - name: Rename file
        if: matrix.rename_file
        working-directory: ${{ matrix.artifact_path }}
        run: |
          mv "${{matrix.rename_file}}" "${{ matrix.artifact_prefix }}-${{ needs.tags.outputs.tag }}.${{matrix.rename_suffix}}"

      - name: Package Tar file
        if: matrix.tar_files
        working-directory: ${{ matrix.artifact_path }}
        run: tar -cvjf "${{ matrix.artifact_prefix }}-${{ needs.tags.outputs.tag }}.tar.bz2" ${{ matrix.tar_files }}

      - name: Package Zip file
        if: matrix.zip_files
        working-directory: ${{ matrix.artifact_path }}
        run: |
          7z a "${{ matrix.artifact_prefix }}-${{ needs.tags.outputs.tag }}.zip" ${{ matrix.zip_files }}

    ##     ## ########  ##        #######     ###    ########  
    ##     ## ##     ## ##       ##     ##   ## ##   ##     ## 
    ##     ## ##     ## ##       ##     ##  ##   ##  ##     ## 
    ##     ## ########  ##       ##     ## ##     ## ##     ## 
    ##     ## ##        ##       ##     ## ######### ##     ## 
    ##     ## ##        ##       ##     ## ##     ## ##     ## 
     #######  ##        ########  #######  ##     ## ########  

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          name: Nightly ${{ needs.tags.outputs.tag }}
          tag_name: nightly-${{ needs.tags.outputs.tag }}
          generate_release_notes: false
          prerelease: true
          files: |
            ${{ matrix.artifact_path }}/${{ matrix.artifact_prefix }}-${{ needs.tags.outputs.tag }}.*
            ${{ matrix.extra_artifacts }}

      - name: Report issue
        if: ${{ github.event.schedule && failure() }}
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ github.token }}
          TAG: ${{ needs.tags.outputs.tag }}
          NAME: ${{matrix.name}}
          FAILED_RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs/${{ github.job }}
          ARTIFACT_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        with:
          assignees: gnunicorn
          filename: .github/templates/failure-report-template.md.tmpl
          update_existing: false

########  ##     ## ########  ##       ####  ######  ##     ## 
##     ## ##     ## ##     ## ##        ##  ##    ## ##     ## 
##     ## ##     ## ##     ## ##        ##  ##       ##     ## 
########  ##     ## ########  ##        ##   ######  ######### 
##        ##     ## ##     ## ##        ##        ## ##     ## 
##        ##     ## ##     ## ##        ##  ##    ## ##     ## 
##         #######  ########  ######## ####  ######  ##     ## 

  publish:
    environment: nightly
    runs-on: ubuntu-latest
    name: Publish
    if: ${{ github.event.schedule }}
    needs:
      - tags
      - build
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT }}

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Generate Changelog
        run: |
          git fetch --prune --unshallow --tags
          cargo run -p mr_minutes -- --since nightly-latest --output nightly-changes-generated.md
          echo "** Changes since ${{ needs.tags.outputs.prev_tag }} **" > nightly-changes.md
          cat nightly-changes-generated.md >>  nightly-changes.md

      - name: "Generate docs"
        run: |
          echo "+++" > docs/content/nightly/${{ needs.tags.outputs.tag }}.md
          echo "title = \" Nightly ${{ needs.tags.outputs.tag }}\"" >> docs/content/nightly/${{ needs.tags.outputs.tag }}.md
          echo "template = \"nightlies/release.html\"" >> docs/content/nightly/${{ needs.tags.outputs.tag }}.md
          echo "date = ${{ needs.tags.outputs.tag }}" >> docs/content/nightly/${{ needs.tags.outputs.tag }}.md
          echo "+++" >>docs/content/nightly/${{ needs.tags.outputs.tag }}.md
          echo "" >>docs/content/nightly/${{ needs.tags.outputs.tag }}.md
          cat nightly-changes.md >> docs/content/nightly/${{ needs.tags.outputs.tag }}.md

      - name: Tag for nightly release
        run: |

          git config --global user.name 'Sari'
          git config --global user.email 'acter-sari@users.noreply.github.com'
          git add "docs/content/nightly/${{ needs.tags.outputs.tag }}.md"
          echo "Tagging ${{ needs.tags.outputs.tag }}" > notes.md
          echo "" >> notes.md
          cat nightly-changes.md >> notes.md
          git commit -F notes.md
          git tag nightly-${{ needs.tags.outputs.tag }}
          git tag -f nightly-latest
          git push -f origin main nightly-${{ needs.tags.outputs.tag }} nightly-latest
      - name: Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          # publish this nightly release now
          draft: true
          generate_release_notes: false
          name: Nightly ${{ needs.tags.outputs.tag }}
          tag_name: nightly-${{ needs.tags.outputs.tag }}
          body_path: nightly-changes.md
          prerelease: true
      - uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}

      - name: Send message to nightly channel
        id: matrix-chat-message
        uses: fadenb/matrix-chat-message@v0.0.6
        with:
          homeserver: 'matrix.acter.global'
          token: ${{ secrets.NIGHTLY_MATRIX_TOKEN }}
          channel:  '!PsBFWhNhPEAfCBdApa:acter.global'
          message: |
            ## Nightly ${{ needs.tags.outputs.tag }} released

            Latest nightly builds have been built and [can be downloaded from here](https://dev.acter.global/nightly/${{ needs.tags.outputs.tag }}/).
            Direct install links:
             - 🤖 [Android devices](https://github.com/acterglobal/a3/releases/download/nightly-${{ needs.tags.outputs.tag }}/acter-nightly-android-arm64-${{ needs.tags.outputs.tag }}.apk)
             - 🍎 [iOS devices](itms-services://?action=download-manifest&amp;url=https://github.com/acterglobal/a3/releases/download/nightly-${{ needs.tags.outputs.tag }}/ios-manifest.plist) (for ad-hoc registered devices only)
