name: Nightly builds

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      custom_tag:
        description: 'Provide the tag name for this scenario'
        required: true
        type: string

  schedule:
   - cron: 0 3 * * *

jobs:
  run_checker:
    runs-on: ubuntu-latest
    name: Check latest commit
    outputs:
      should_run: ${{ steps.check-new-commits.outputs.has-new-commits }}
    steps:
      - uses: actions/checkout@v2
      - name: Check for new commits today
        id: check-new-commits
        uses: adriangl/check-new-commits-action@v1
        with:
          seconds: 86400 # One day in seconds

  tags:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      tag: ${{ inputs.custom_tag || steps.tag.outputs.tag }}
      build_num: ${{ steps.build_num.outputs.build_num }}
    steps:
      - id: tag
        run: echo "tag=`date +%F`" >> $GITHUB_OUTPUT
      - id: build_num
        run: echo "build_num=`date +%s`" >> $GITHUB_OUTPUT

  build:
    environment: nightly
    strategy:
      matrix:
       include:
          - name: Android Arm64
            target: android
            os: ubuntu-latest
            cargo_make_setup: setup-android
            cargo_make_args: android-arm
            with_ndk_version: r25
            flutter_build_args: "build apk --target-platform android-arm64"
            artifact_prefix: acter-nightly-android-arm64
            artifact_path:  app/build/app/outputs/apk/release/
            rename_file: "app-release.apk"
            rename_suffix: "apk"
          - name: Linux x64
            os: ubuntu-latest
            apt_install: ninja-build libgtk-3-dev
            cargo_make_args: desktop
            flutter_config: "--enable-linux-desktop"
            flutter_build_args: "build linux"
            artifact_prefix: acter-nightly-linux-x64
            artifact_path: app/build/linux/x64/release/bundle/
            tar_files: lib/ data/ acter
          - name: iOS
            os: macos-latest
            target: ios
            with_apple_cert: true
            cargo_make_setup: setup-ios
            cargo_make_args: ios
            flutter_build_args: "build ipa --export-options-plist=ios/exportOptions_nightly_adhoc.plist --build-number=${{ needs.tags.outputs.build_num }}"
            artifact_prefix: acter-nightly-ios
            artifact_path:  app/build/ios/ipa/
            rename_file: "acter.ipa"
            rename_suffix: "ipa"
            extra_artifacts: "ios-manifest.plist"
          - name: Mac OSx 
            os: macos-12
            with_apple_cert: true
            cargo_make_args: desktop
            flutter_config: "--enable-macos-desktop"
            flutter_build_args: "build macos"
            artifact_prefix: acter-nightly-macosx
            artifact_path: app/build/macos/Build/Products/Release/
            tar_files: "Acter.app"
          - name: Windows
            os: windows-latest
            cargo_make_args: desktop
            flutter_config: "--enable-windows-desktop"
            flutter_build_args: "build windows"
            artifact_prefix: acter-nightly-windows
            artifact_path: app/build/windows/runner/
            zip_files: "Release"

    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    needs:
     - run_checker
     - tags
    if: ${{ needs.run_checker.outputs.should_run != 'false' }}

    continue-on-error: true
    steps:
      - uses: actions/checkout@v2

      - name: Install supported toolchain
        id: rust_toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Cache Cargo
        id: cache-cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo
          key: ${{ runner.os }}-cargo-${{ steps.rust_toolchain.outputs.rustc_hash }}-${{ hashFiles('./Cargo.toml') }}

      - name: Cache Rust
        uses: actions/cache@v2
        with:
          path: |
            target
          key: ${{ runner.os }}-nightly-${{matrix.artifact_prefix}}-${{ steps.rust_toolchain.outputs.rustc_hash }}-${{ hashFiles('./Cargo.toml') }}

      - name: Install extra deps
        if: matrix.apt_install
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ${{ matrix.apt_install }}

      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        if: matrix.with_ndk_version
        with:
          ndk-version: ${{ matrix.with_ndk_version }}

      - name: Install cargo-make
        if: steps.cache-cargo.outputs.cache-hit != 'true'
        uses: davidB/rust-cargo-make@v1

      - name: Rust Setup
        if: matrix.cargo_make_setup
        run: cargo make ${{ matrix.cargo_make_setup }}

      - uses: subosito/flutter-action@v2
        name: Set up flutter
        with:
          flutter-version: '3.7.12'
          channel: 'stable'

      - name: Flutter info
        run: flutter doctor -v

      - name: Flutter config
        if: matrix.flutter_config
        run: flutter config ${{ matrix.flutter_config }}

      - name: Build Rust Lib
        run: cargo make --profile release ${{ matrix.cargo_make_args}}

      # - name: Ensure ffi-interface is up to date
      #   run: git diff --exit-code app/packages/rust_sdk/lib/acter_flutter_sdk_ffi.dart

      # Install the Apple certificate and provisioning profile
      - name: Install the Apple certificate and provisioning profile
        if: matrix.with_apple_cert
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.NIGHTLY_ADHOC_CERT_BASE64 }}
          P12_PASSWORD: ${{ secrets.NIGHTLY_ADHOC_CERT_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.NIGHTLY_MOBILEPROVISION_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.NIGHTLY_KEYCHAIN_PASSWORD }}
        run: |
          echo "starting in $RUNNER_TEMP"
          # create variables
          CERTIFICATE_PATH="$RUNNER_TEMP/build_certificate.p12"
          PP_PATH="$RUNNER_TEMP/build_pp.mobileprovision"
          KEYCHAIN_PATH="$RUNNER_TEMP/app-signing.keychain-db"
          echo "vars set"
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output "$CERTIFICATE_PATH"
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output "$PP_PATH"
          # create temporary keychain
          echo "creating keychain"
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          echo "setting keychain"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          echo "unlocking keychain"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          # import certificate to keychain
          echo "importing certificate"
          security import "$CERTIFICATE_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
          echo "listing keychains"
          security list-keychain -d user -s "$KEYCHAIN_PATH"
          # apply provisioning profile
          echo "copying over"
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Expose JKS file
        if: matrix.target == 'android'
        working-directory: ./app/android
        run: echo "${{ secrets.ANDROID_KEYSTORE_JKS }}" | base64 --decode > key.jks

      - name: Flutter Build
        env:
          RAGESHAKE_URL: ${{ secrets.RAGESHAKE_URL }}
          RAGESHAKE_APP_NAME: ${{ secrets.RAGESHAKE_APP_NAME_NIGHTLY }}
          ANDROID_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        shell: bash
        run: |
          flutter ${{ matrix.flutter_build_args }} \
            --dart-define=VERSION_NAME=Nightly+${{ needs.tags.outputs.tag }} \
            --dart-define=RAGESHAKE_URL=$RAGESHAKE_URL \
            --dart-define=RAGESHAKE_APP_NAME=$RAGESHAKE_APP_NAME \
            --dart-define=RAGESHAKE_APP_VERSION="Nightly-${{ needs.tags.outputs.tag }}/${{ matrix.name }}"
        working-directory: ./app

      # Important! Cleanup: remove the certificate and provisioning profile from the runner!
      - name: Clean up keychain and provisioning profile
        if: ${{ always() && matrix.with_apple_cert }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

      - name: Generate manifest
        if: matrix.target == 'ios'
        env:
          TAG: ${{needs.tags.outputs.tag}}
          VERSION: ${{ needs.tags.outputs.build_num }}
        run: |
          sed "s/__TAG__/$TAG/g ; s/__VERSION__/$VERSION/g" .github/templates/ios-manifest.plist.tmpl > ios-manifest.plist

      - name: Rename file
        if: matrix.rename_file
        working-directory: ${{ matrix.artifact_path }}
        run: |
          mv "${{matrix.rename_file}}" "${{ matrix.artifact_prefix }}-${{ needs.tags.outputs.tag }}.${{matrix.rename_suffix}}"

      - name: Package Tar file
        if: matrix.tar_files
        working-directory: ${{ matrix.artifact_path }}
        run: tar -cvjf "${{ matrix.artifact_prefix }}-${{ needs.tags.outputs.tag }}.tar.bz2" ${{ matrix.tar_files }}

      - name: Package Zip file
        if: matrix.zip_files
        working-directory: ${{ matrix.artifact_path }}
        run: |
          7z a "${{ matrix.artifact_prefix }}-${{ needs.tags.outputs.tag }}.zip" ${{ matrix.zip_files }}

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          name: Nightly ${{ needs.tags.outputs.tag }}
          tag_name: nightly-${{ needs.tags.outputs.tag }}
          prerelease: true
          files: |
            ${{ matrix.artifact_path }}/${{ matrix.artifact_prefix }}-${{ needs.tags.outputs.tag }}.*
            ${{ matrix.extra_artifacts }}

      - name: Report issue
        if: ${{ github.event.schedule && failure() }}
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ github.token }}
          TAG: ${{ needs.tags.outputs.tag }}
          NAME: ${{matrix.name}}
          FAILED_RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs/${{ github.job }}
          ARTIFACT_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        with:
          assignees: gnunicorn
          filename: .github/templates/failure-report-template.md.tmpl
          update_existing: false

  publish:
    environment: nightly
    runs-on: ubuntu-latest
    name: Publish
    if: ${{ github.event.schedule }}
    needs:
      - tags
      - build
    steps:
      - uses: actions/checkout@v2
      - name: Tag for nightly release
        run: |
          git tag nightly-${{ needs.tags.outputs.tag }}
          git push origin nightly-${{ needs.tags.outputs.tag }}
      - name: Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          # publish this nightly release now
          draft: true
          name: Nightly ${{ needs.tags.outputs.tag }}
          tag_name: nightly-${{ needs.tags.outputs.tag }}
          prerelease: true
      - uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}

      - name: Send message to nightly channel
        id: matrix-chat-message
        uses: fadenb/matrix-chat-message@v0.0.6
        with:
          homeserver: 'matrix.acter.global'
          token: ${{ secrets.NIGHTLY_MATRIX_TOKEN }}
          channel:  '!PsBFWhNhPEAfCBdApa:acter.global'
          message: |
            ## Nightly ${{ needs.tags.outputs.tag }} released

            Latest nightly builds have been built and [can be downloaded from here](https://github.com/acterglobal/a3/releases/nightly-${{ needs.tags.outputs.tag }}/).
            Direct install links:
             - 🤖 [Android devices](https://github.com/acterglobal/a3/releases/download/nightly-${{ needs.tags.outputs.tag }}/acter-nightly-android-arm64-${{ needs.tags.outputs.tag }}.apk)
             - 🍎 [iOS devices](itms-services://?action=download-manifest&amp;url=https://github.com/acterglobal/a3/releases/download/nightly-${{ needs.tags.outputs.tag }}/ios-manifest.plist) (for ad-hoc registered devices only)
