on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

name: Build Check

jobs:

  rust-style:
    runs-on: ubuntu-latest
    name: Formatting
    steps:
      - uses: actions/checkout@v2
      - name: Install specific toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
      - uses: actions-rs/cargo@v1
        name: Rust Format
        with:
          command: fmt
          args: --all --check

  clippy-n-test:
    runs-on: ${{ matrix.os }}
    # FIXME: remove once tests don't fail
    continue-on-error: true
    name: Clippy & Test ${{ matrix.name }}
    strategy:
      matrix:
        include:
          - name: Android
            target: aarch64-linux-android
            os: ubuntu-latest
            args: -p effektio
          - name: iOS
            target: x86_64-apple-ios
            os: macos-latest
            args: -p effektio
          - name: Core
            target: x86_64-unknown-linux-gnu
            args: -p effektio-core --tests
            os: ubuntu-latest
          - name: FFI
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            args: -p effektio
          - name: CLI
            target: x86_64-unknown-linux-gnu
            args: -p effektio-cli
            os: ubuntu-latest


    steps:
      - uses: actions/checkout@v2
      - name: Install specific toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: clippy
          target: ${{ matrix.target }}
      - uses: actions-rs/cargo@v1
        name: Clippy
        with:
          command: clippy
          args: ${{matrix.args}} --target ${{matrix.target}} -- -D warnings
      - uses: actions-rs/cargo@v1
        name: Test
        with:
          command: test
          args: ${{matrix.args}} --target ${{matrix.target}}

  test-cli:
    runs-on: ubuntu-latest
    name: Checking CLI
    steps:
      - uses: actions/checkout@v2
      - name: Install supported toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - uses: actions-rs/cargo@v1
        name: Testing
        with:
          command: test
          args: -p effektio-cli

      - uses: actions-rs/cargo@v1
        name: Building
        with:
          command: build
          args: --release -p effektio-cli

  build-android:
    runs-on: ubuntu-latest
    name: Build Android App
    # FIXME: remove once tests don't fail
    continue-on-error: true
    steps:
      - uses: actions/checkout@v2
      - name: Install supported toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
      - uses: nttld/setup-ndk@v1
        with:
          # FIXME: cargo-ndk doesn't work with latest 
          ndk-version: r22
      - run: |
          cargo install cargo-make
          cargo make setup-android
      - name: Build Android FFI
        run: cargo make android-build-release
      - uses: subosito/flutter-action@v2
        name: "Set up flutter"
        with:
          channel: 'stable'
      - run: flutter pub get
        working-directory: ./app
      # FIXME: tests are not set up to work yet
      - run: flutter test
        working-directory: ./app
      - run: flutter build apk
        working-directory: ./app
      - run: flutter build appbundle
        working-directory: ./app

  build-ios:
    runs-on: macos-latest
    name: Build iOS App
    # FIXME: remove once tests don't fail
    continue-on-error: true
    steps:
      - uses: actions/checkout@v2
      - name: Install supported toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
      - run: |
          cargo install cargo-make
          cargo make setup-ios
      - name: Build iOS FFI
        run: cargo make ios-release
      - uses: subosito/flutter-action@v2
        name: "Set up flutter"
        with:
          channel: 'stable'
      - run: flutter pub get
        working-directory: ./app
      # FIXME: tests are not set up to work yet
      - run: flutter test
        working-directory: ./app
      - run: flutter build ios --release --no-codesign
        working-directory: ./app