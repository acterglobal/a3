name: Reusable App Build

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      build_num:
        required: true
        type: string

      release:
        type: boolean
        default: false
      release_tag:
        required: false
        type: string
      release_env:
        required: false
        type: string
        default: release
      prerelease:
        type: boolean
        default: false
      release_title:
        required: false
        type: string

      artifacts_prefix:
        required: false
        type: string
      targets:
        required: false
        type: string
      env_extra:
        required: false
        type: string

jobs:
  build-app:
    environment: release
    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.name }}
    continue-on-error: true

    strategy:
      matrix:
       include:
          - name: Android
            target: android
            os: ubuntu-latest
            exclude_from_release: true
            cargo_make_setup: setup-android
            cargo_make_args: android-arm
            with_ndk_version: r25
            java_version: "21"
            flutter_build_args: "build appbundle --split-debug-info=debug_symbols"
            artifact_prefix: acter-${{inputs.artifacts_prefix}}android
            artifact_path:  app/build/app/outputs/bundle/release/
            specific_upload_artifacts: app/build/app/outputs/bundle/release/app-release.aab
            with_debug_symbols: true
          - name: Android apk
            target: android
            os: ubuntu-latest
            cargo_make_setup: setup-android
            cargo_make_args: android-arm
            with_ndk_version: r25
            java_version: "21"
            flutter_build_args: "build apk --split-per-abi --split-debug-info=debug_symbols"
            artifact_prefix: acter-${{inputs.artifacts_prefix}}android
            artifact_path:  app/build/app/outputs/apk/release/
            specific_upload_artifacts: app/build/app/outputs/apk/release/*.apk
            with_debug_symbols: true
          - name: Linux x64
            target: linux
            os: ubuntu-latest
            apt_install: ninja-build libgtk-3-dev libmpv-dev mpv libayatana-appindicator3-1 libayatana-appindicator3-dev
            cargo_make_args: desktop
            flutter_config: "--enable-linux-desktop"
            flutter_build_args: "build linux"
            artifact_prefix: acter-${{inputs.artifacts_prefix}}linux-x64
            artifact_path: app/build/linux/x64/release/bundle/
            tar_files: lib/ data/ acter *.png *.svg *.desktop  LICENSE*
          - name: iOS
            os: macos-14
            target: ios
            with_apple_cert: true
            cargo_make_setup: setup-ios
            cargo_make_args: ios
            flutter_build_args: "build ipa --export-options-plist=ios/exportOptions_release.plist --split-debug-info=debug_symbols"
            artifact_prefix: acter-${{inputs.artifacts_prefix}}ios
            artifact_path:  app/build/ios/ipa/
            rename_file: "acter.ipa"
            rename_suffix: "ipa"
            with_debug_symbols: true
          - name: MacOS
            os: macos-13
            target: macos
            with_apple_cert: true
            cargo_make_args: desktop
            flutter_config: "--enable-macos-desktop"
            flutter_build_args: "build macos --split-debug-info=debug_symbols --verbose"
            artifact_prefix: acter-${{inputs.artifacts_prefix}}macosx
            artifact_path: app/build/macos/Build/Products/Release/
            rename_file: "Acter.pkg"
            rename_suffix: "pkg"
            with_debug_symbols: true
          - name: Windows msix
            os: windows-latest
            target: windows-msix
            cargo_make_args: desktop
            flutter_config: "--enable-windows-desktop"
            flutter_build_args: "build windows --split-debug-info=debug_symbols"
            rename_file: acter.msix
            artifact_prefix: acter-${{inputs.artifacts_prefix}}windows
            rename_suffix: msix
            artifact_path: app\\build\\windows\\x64\\runner\\Release
            zip_files: false
            with_debug_symbols: true
            env_extra: "windowsApplicationId=" # in the bundle we must replace this with none
          - name: Windows exe
            os: windows-latest
            target: windows-exe
            cargo_make_args: desktop
            flutter_config: "--enable-windows-desktop"
            flutter_build_args: "build windows --split-debug-info=debug_symbols"
            artifact_prefix: acter-windows
            artifact_path: app\\build\\windows\\x64\\runner\\Release
            zip_files: "*"
            with_debug_symbols: true

    steps:
      - id: skipper
        name: "Check whether we build this target"
        env:
          TARGET: ${{matrix.target}}
          TARGETS: ${{inputs.targets || 'all'}}
        shell: bash
        run: |
            if [ "$TARGETS" = "all" ]; then
              echo "Should build all";
              echo "skipped=false"  >> $GITHUB_OUTPUT;
              exit 0
            fi
            
            if echo $TARGETS | tr "," "\n" | grep -Fxq $TARGET; then
              echo "target among selected";
              echo "skipped=false"  >> $GITHUB_OUTPUT;
              exit 0
            fi
            
            echo "skipped=true" >> $GITHUB_OUTPUT ;
            echo "Skipping build app for $TARGET"
            exit 1
    
      - uses: actions/checkout@v4

 ######  ######## ######## ##     ## ########  
##    ## ##          ##    ##     ## ##     ## 
##       ##          ##    ##     ## ##     ## 
 ######  ######      ##    ##     ## ########  
      ## ##          ##    ##     ## ##        
##    ## ##          ##    ##     ## ##        
 ######  ########    ##     #######  ##      

      - name: Install supported toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - uses: jlumbroso/free-disk-space@main
        name: Free Disk Space (Ubuntu)
        if: matrix.os == 'ubuntu-latest' && matrix.target != 'linux'
        with:
          tool-cache: true
          android: ${{ matrix.target != 'android' }}

      - name: Install extra deps
        if: matrix.apt_install
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ${{ matrix.apt_install }}

      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        if: matrix.with_ndk_version
        with:
          ndk-version: ${{ matrix.with_ndk_version }}

      - uses: actions/setup-java@v4
        if: matrix.java_version
        with:
          java-version: ${{ matrix.java_version }}
          distribution: 'temurin'
          cache: 'gradle'

      - name: Install cargo-make
        uses: davidB/rust-cargo-make@v1

      - uses: subosito/flutter-action@v2
        name: Set up flutter
        with:
          flutter-version: '3.24'
          channel: 'stable'

      - name: Flutter info
        run: flutter doctor -v

      - name: Flutter config
        if: matrix.flutter_config
        run: flutter config ${{ matrix.flutter_config }}

      - name: Unlock git-crypt
        if: matrix.with_apple_cert
        run: |
          brew install git-crypt
          echo "${{ secrets.GIT_CRYPT_KEY }}" | base64 --decode > .github/assets/git-crypt-key
          git-crypt unlock .github/assets/git-crypt-key
          echo "Files found:"
          git-crypt status -e

      # Install the Apple certificate and provisioning profile
      - name: Install the Apple certificates
        if: matrix.with_apple_cert
        env:
          P12_PASSWORD: ${{ secrets.BUILD_CERTS_P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo "starting in $RUNNER_TEMP"
          # create variables
          CERTIFICATE_PATH=".github/assets/build_certificates.p12"
          KEYCHAIN_PATH="$RUNNER_TEMP/app-signing.keychain-db"
          echo "vars set"
          # import certificate and provisioning profile from secrets
          # create temporary keychain
          echo "creating keychain"
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          echo "setting keychain"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          echo "unlocking keychain"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          # import certificate to keychain
          echo "importing certificate"
          security import "$CERTIFICATE_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
          echo "listing keychains"
          security list-keychain -d user -s "$KEYCHAIN_PATH"

      - name: Install the Apple provisioning profile
        if: matrix.with_apple_cert
        run: |
          echo "Installing provision profiles"
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles/
          cp .github/assets/provision_profiles/* ~/Library/MobileDevice/Provisioning\ Profiles/
          ls -ltas ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Rust Setup
        if: matrix.cargo_make_setup
        run: cargo make ${{ matrix.cargo_make_setup }}

        ########  ##     ## #### ##       ########  
        ##     ## ##     ##  ##  ##       ##     ## 
        ##     ## ##     ##  ##  ##       ##     ## 
        ########  ##     ##  ##  ##       ##     ## 
        ##     ## ##     ##  ##  ##       ##     ## 
        ##     ## ##     ##  ##  ##       ##     ## 
        ########   #######  #### ######## ########  

      - name: Build Rust Lib
        run: cargo make --profile release ${{ matrix.cargo_make_args}}

      - name: Expose JKS file
        if: matrix.target == 'android'
        working-directory: ./app/android
        run: echo "${{ secrets.ANDROID_KEYSTORE_JKS }}" | base64 --decode > key.jks

      - name: Write environment
        working-directory: ./app
        shell: bash
        run: |
          cat <<EOF > .env.production
          SENTRY_DSN=${{ secrets.SENTRY_DSN }}
          SENTRY_RELEASE=${{ inputs.version }}
          SENTRY_ENVIRONMENT=${{inputs.release_env}}
          PUSH_SERVER=${{ secrets.PUSH_SERVER }}
          NTFY_SERVER=${{ secrets.NTFY_SERVER }}
          RAGESHAKE_URL=${{ secrets.RAGESHAKE_URL }}
          RAGESHAKE_APP_NAME=${{ secrets.RAGESHAKE_APP_NAME }}
          RAGESHAKE_APP_VERSION=${{inputs.release_env}}/${{inputs.version}}/${{ matrix.name }}
          DEFAULT_HOMESERVER_URL=${{vars.DEFAULT_HOMESERVER_URL}}
          DEFAULT_HOMESERVER_NAME=${{vars.DEFAULT_HOMESERVER_NAME}}
          ${{ matrix.env_extra }}
          ${{ inputs.env_extra  }}
          EOF

          dart run enven

          echo "Show .env files"
          ls -ltash .env*

      - name: Flutter Build
        env:
          ANDROID_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        shell: bash
        run: |
          flutter ${{ matrix.flutter_build_args }} \
            --build-name="${{ inputs.version }}" \
            --build-number="${{ inputs.build_num }}"
        working-directory: ./app

           ######  ####  ######   ##    ## 
          ##    ##  ##  ##    ##  ###   ## 
          ##        ##  ##        ####  ## 
           ######   ##  ##   #### ## ## ## 
                ##  ##  ##    ##  ##  #### 
          ##    ##  ##  ##    ##  ##   ### 
           ######  ####  ######   ##    ## 

      # ignore codesign
      - name: Package Acter.app to Acter.pkg
        if: matrix.target == 'macos'
        working-directory: ${{ matrix.artifact_path }}
        env:
          APPLE_SIGN_CERTNAME: ${{ secrets.APPLE_MAC_APPSTORE_SIGN_CERTNAME }}
        run: |
          echo "Productbuild"
          productbuild --component Acter.app /Applications --sign "$APPLE_SIGN_CERTNAME" Acter.pkg

      # Important! Cleanup: remove the certificate and provisioning profile from the runner!
      - name: Clean up keychain and provisioning profile
        if: ${{ always() && matrix.with_apple_cert }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/*
          rm .github/assets/git-crypt-key

        ########  ##    ##  ######   
        ##     ## ##   ##  ##    ##  
        ##     ## ##  ##   ##        
        ########  #####    ##   #### 
        ##        ##  ##   ##    ##  
        ##        ##   ##  ##    ##  
        ##        ##    ##  ######   

      - name: Generate iOS manifest
        if: matrix.target == 'ios'
        env:
          VERSION: ${{inputs.version}}
        run: |
          sed "s/__TAG__/$TAG/g ; s/__VERSION__/$VERSION/g" .github/templates/ios-manifest.plist.tmpl > ios-manifest.plist

      - name: Copy VSCode redistribution libs over
        if: matrix.os == 'windows-latest'
        working-directory: ${{ matrix.artifact_path }}
        shell: powershell
        # Copy the latest vscode redistribution .dll files into the folder as per
        # https://docs.flutter.dev/platform-integration/windows/building#distributing-windows-apps
        # to fix crash issues like:
        # https://github.com/media-kit/media-kit/issues/842
        run: |
          Copy-Item (& "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -find 'VC\Redist\MSVC\*\x64\*\msvcp140.dll') -Force .
          Copy-Item (& "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -find 'VC\Redist\MSVC\*\x64\*\msvcp140_1.dll') -Force .
          Copy-Item (& "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -find 'VC\Redist\MSVC\*\x64\*\msvcp140_2.dll') -Force .
          Copy-Item (& "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -find 'VC\Redist\MSVC\*\x64\*\vcruntime140.dll') -Force .
          Copy-Item (& "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -find 'VC\Redist\MSVC\*\x64\*\vcruntime140_1.dll') -Force .
      - name: Build MSIX
        if: matrix.target == 'windows-msix'
        working-directory: app
        run: dart pub run msix:create --store --build-windows false --version ${{ inputs.version }}.0 -v

      - name: Copy further assets
        if: matrix.target == 'linux'
        run: |
          cp app/linux/packaging/global.acter.a3.desktop ${{ matrix.artifact_path }}
          cp app/assets/icon/logo.png ${{ matrix.artifact_path }}/acter.png
          cp app/assets/icon/acter-logo.svg ${{ matrix.artifact_path }}/acter.svg
          cp LICENSE* ${{ matrix.artifact_path }}

      - name: Rename file
        if: matrix.rename_file
        working-directory: ${{ matrix.artifact_path }}
        run: |
          mv "${{matrix.rename_file}}" "${{ matrix.artifact_prefix }}-${{ inputs.version }}.${{matrix.rename_suffix}}"

      - name: Package Tar file
        if: matrix.tar_files
        working-directory: ${{ matrix.artifact_path }}
        run: tar -cvjf "${{ matrix.artifact_prefix }}-${{ inputs.version }}.tar.bz2" ${{ matrix.tar_files }}

      - name: Package Zip file
        if: matrix.zip_files
        working-directory: ${{ matrix.artifact_path }}
        run: |
          7z a "${{ matrix.artifact_prefix }}-${{ inputs.version }}.zip" ${{ matrix.zip_files }}

    ##     ## ########  ##        #######     ###    ########  
    ##     ## ##     ## ##       ##     ##   ## ##   ##     ## 
    ##     ## ##     ## ##       ##     ##  ##   ##  ##     ## 
    ##     ## ########  ##       ##     ## ##     ## ##     ## 
    ##     ## ##        ##       ##     ## ######### ##     ## 
    ##     ## ##        ##       ##     ## ##     ## ##     ## 
     #######  ##        ########  #######  ##     ## ########  

      - uses: actions/upload-artifact@v4
        name: "Upload artifacts"
        if: matrix.specific_upload_artifacts
        with:
          name: ${{ matrix.name }}
          path: |
            ${{ matrix.specific_upload_artifacts }}

      - name: "move artifacts"
        if: ${{!matrix.specific_upload_artifacts}}
        run: mv ${{ matrix.artifact_path }}/${{ matrix.artifact_prefix }}-${{ inputs.version }}.* .

      - uses: actions/upload-artifact@v4
        name: "Upload artifacts"
        if: ${{!matrix.specific_upload_artifacts}}
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.artifact_prefix }}-${{ inputs.version }}.*

      - uses: actions/upload-artifact@v4
        name: "Upload debug artifacts"
        if: ${{ matrix.with_debug_symbols }}
        with:
          name: ${{ matrix.name }}-debug-symbols
          path: app/debug_symbols/*

      - name: "Upload debug artifacts to sentry"
        if: ${{matrix.with_debug_symbols && inputs.release }}
        working-directory: app
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_RELEASE: ${{ inputs.version }}
        run: flutter packages pub run sentry_dart_plugin

      - name: Release
        if: ${{! matrix.exclude_from_release && inputs.release }}
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          name: ${{ inputs.release_title }}
          tag_name: ${{inputs.release_tag}}
          generate_release_notes: false
          prerelease: ${{ inputs.prerelease }}
          files: |
            ${{ matrix.artifact_prefix }}-${{ inputs.version }}.*
            ${{ matrix.specific_upload_artifacts }}

      - name: Report issue
        if: ${{ inputs.release && failure() && steps.skipper.outputs.skipped != 'true' }}
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ inputs.version }}
          NAME: ${{matrix.name}}
          FAILED_RUN_URL: ${{env.GITHUB_SERVER_URL}}/${{env.GITHUB_REPOSITORY}}/actions/runs/${{ github.run_id }}/jobs/${{ github.job }}
          ARTIFACT_URL: ${{env.GITHUB_SERVER_URL}}/${{env.GITHUB_REPOSITORY}}/actions/runs/${{env.GITHUB_RUN_ID}}
        with:
          assignees: gnunicorn
          filename: .github/templates/failure-report-template.md.tmpl
          update_existing: false
